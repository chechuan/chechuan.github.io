<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Celery任务队列</title>
    <url>/2020/11/19/Celery%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="什么是任务队列（Task-Queue）"><a href="#什么是任务队列（Task-Queue）" class="headerlink" title="什么是任务队列（Task Queue）?"></a>什么是任务队列（Task Queue）?</h3><p>使用任务队列作为分发任务的机制。<br>一个任务队列的输入是一组被称为任务的工作单元。专用的工人会持续监听任务队列来等待完成新的工作。<br>Celery通过消息进行通信，通常使用中间人作为客户端和工人（workers）间的媒介。为了初始化一项任务，客户端会添加一条消息到队列中，然后中间人传递这条消息给一个worker。</p>
<span id="more"></span>
<p>一个Celery系统可以包含多个工人和中间人，解决高可用可平行扩展问题。</p>
<h3 id="我需要什么？"><a href="#我需要什么？" class="headerlink" title="我需要什么？"></a>我需要什么？</h3><p>Celery需要一个消息传输系统来收发消息。RabbitMQ and Redis传输系统功能完备，但也有很多其他的实验性解决方案，如使用SQLite做本地开发。Celery 是用 Python 编写的，但协议可以用任何语言实现。除了 Python 语言实现之外，还有Node.js的node-celery和php的celery-php。 可以通过暴露 HTTP 的方式进行，任务交互以及其它语言的集成开发。<br>Celery可以在单一机器上，在多台机器上，甚至跨数据中心运行。</p>
<h2 id="Celery任务队列"><a href="#Celery任务队列" class="headerlink" title="Celery任务队列"></a>Celery任务队列</h2><p>Celery 是基于Python开发的分布式任务队列。它支持使用任务队列的方式在分布的机器／进程／线程上执行任务调度。</p>
<h3 id="核心部件"><a href="#核心部件" class="headerlink" title="核心部件"></a>核心部件</h3><ul>
<li>broker<ul>
<li>消息队列，由第三方消息中间件完成</li>
<li>常见有RabbitMQ, Redis, MongoDB等</li>
</ul>
</li>
<li>worker<ul>
<li>任务执行器</li>
<li>可以有多个worker进程</li>
<li>worker又可以起多个queue来并行消费消息</li>
</ul>
</li>
<li>backend<ul>
<li>后端存储，用于持久化任务执行结果</li>
</ul>
</li>
</ul>
<h3 id="功能部件"><a href="#功能部件" class="headerlink" title="功能部件"></a>功能部件</h3><ul>
<li>beat<ul>
<li>定时器，用于周期性调起任务</li>
</ul>
</li>
<li>flower<ul>
<li>web管理界面</li>
</ul>
</li>
</ul>
<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>基本用法是在程序里引用celery，并将函数方法绑定到task</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, backend=<span class="string">&#x27;amqp&#x27;</span>, broker=<span class="string">&#x27;amqp://guest@localhost//&#x27;</span>)</span><br><span class="line">app.conf.CELERY_RESULT_BACKEND = <span class="string">&#x27;db+sqlite:///results.sqlite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>

<p>然后调用相应方法即可(delay与apply_async都是异步调用)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tasks <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">result = add.delay(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> result.ready():</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;not ready yet&quot;</span></span><br><span class="line">  time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> result.get()    </span><br></pre></td></tr></table></figure>

<p>由于是采用消息队列，因此任务提交之后，程序立刻返回一个任务ID。<br>之后可以通过该ID查询该任务的执行状态和结果。</p>
<h3 id="关联任务"><a href="#关联任务" class="headerlink" title="关联任务"></a>关联任务</h3><p>执行1个任务，完成后再执行第2个，第一个任务的结果做第二个任务的入参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add.apply_async((<span class="number">2</span>, <span class="number">2</span>), link=add.s(<span class="number">16</span>))</span><br><span class="line">结果：<span class="number">2</span>+<span class="number">2</span>+<span class="number">16</span>=<span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>还可以做错误处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.task(<span class="params">bind=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_handler</span>(<span class="params">self, uuid</span>):</span><br><span class="line">    result = self.app.AsyncResult(uuid)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Task &#123;0&#125; raised exception: &#123;1!r&#125;\n&#123;2!r&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">          uuid, result.result, result.traceback))</span><br><span class="line"></span><br><span class="line">  add.apply_async((<span class="number">2</span>, <span class="number">2</span>), link_error=error_handler.s())</span><br></pre></td></tr></table></figure>

<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>让任务在指定的时间执行，与下文叙述的周期性任务是不同的。</p>
<ul>
<li>ETA, 指定任务执行时间,注意时区</li>
<li>countdown, 倒计时,单位秒</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line">tomorrow = datetime.utcnow() + timedelta(seconds=<span class="number">3</span>)</span><br><span class="line">add.apply_async((<span class="number">2</span>, <span class="number">2</span>), eta=tomorrow)</span><br><span class="line">result = add.apply_async((<span class="number">2</span>, <span class="number">2</span>), countdown=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h5 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h5><ul>
<li>任务的信息是保存在broker中的，因此关闭worker并不会丢失任务信息</li>
<li>回收任务(revoke)并非是将队列中的任务删除，而是在worker的内存中保存回收的任务task-id，不同worker之间会自动同步上述revoked task-id。</li>
<li>由于信息是保存在内存当中的，因此如果将所有worker都关闭了，revoked task-id信息就丢失了，回收过的任务就又可以执行了。要防治这点，需要在启动worker时指定一个文件用于保存信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery -A app.celery worker --loglevel=info &amp;&gt; celery_worker.log --statedb=/var/tmp/celery_worker.state</span><br></pre></td></tr></table></figure>

<h3 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h3><p>expires单位秒，超过过期时间还未开始执行的任务会被回收</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add.apply_async((10, 10), expires=60)</span><br></pre></td></tr></table></figure>

<h3 id="重试"><a href="#重试" class="headerlink" title="重试"></a>重试</h3><ul>
<li><p>max_retries:最大重试次数</p>
</li>
<li><p>interval_start:重试等待时间</p>
</li>
<li><p>interval_step:每次重试叠加时长，假设第一重试等待1s，第二次等待1＋n秒</p>
</li>
<li><p>interval_max:最大等待时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add.apply_async((2, 2), retry=True, retry_policy=&#123;</span><br><span class="line">    &#x27;max_retries&#x27;: 3,</span><br><span class="line">    &#x27;interval_start&#x27;: 0,</span><br><span class="line">    &#x27;interval_step&#x27;: 0.2,</span><br><span class="line">    &#x27;interval_max&#x27;: 0.2,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="任务路由"><a href="#任务路由" class="headerlink" title="任务路由"></a>任务路由</h3><p>使用-Q参数为队列(queue)命名，然后调用任务时可以指定相应队列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ celery -A proj worker -l info -Q celery,priority.high    </span><br><span class="line"></span><br><span class="line">add.apply_async(queue=&#x27;priority.high&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>按照一定关系一次调用多个任务</p>
<ul>
<li>group: 并行调度</li>
<li>chain: 串行调度</li>
<li>chord: 类似group，但分header和body2个部分，header可以是一个group任务，执行完成后调用body的任务</li>
<li>map: 映射调度，通过输入多个入参来多次调度同一个任务</li>
<li>starmap: 类似map，入参类似＊args</li>
<li>chunks:将任务按照一定数量进行分组</li>
</ul>
<h2 id="周期性任务"><a href="#周期性任务" class="headerlink" title="周期性任务"></a>周期性任务</h2><p>周期性任务就是按照一定的时间检查反复执行的任务。前面描述的定时任务值的是一次性的任务。<br>程序中引入并配置好周期性任务后，beat进程就会定期调起相关任务</p>
<p>beat进程是需要单独启动的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ celery -A proj beat</span><br></pre></td></tr></table></figure>

<p>或者在worker启动时一起拉起</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ celery -A proj worker -B</span><br></pre></td></tr></table></figure>

<p>注意一套celery只能启一个beat进程</p>
]]></content>
  </entry>
  <entry>
    <title>6月内蒙之行</title>
    <url>/2023/06/22/6%E6%9C%88%E5%86%85%E8%92%99%E4%B9%8B%E8%A1%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="6月的斗志一半被杀死在40°C的北京，一半被草原的夜晚降冷。"><a href="#6月的斗志一半被杀死在40°C的北京，一半被草原的夜晚降冷。" class="headerlink" title="6月的斗志一半被杀死在40°C的北京，一半被草原的夜晚降冷。"></a>6月的斗志一半被杀死在40°C的北京，一半被草原的夜晚降冷。</h4><p>刚进入内蒙地界，车内仪表温度显示20多摄氏度，要知道，此刻北京正经历着史上空前的高温蒸烤。</p>
<p>到了住的地方已经晚上了，路上看见烟花，能感受到他们欢乐的氛围，辉腾锡勒草原，听过这个名字。</p>
<p>篝火晚会，我的目光不自觉地，投在了一位舞者的身上，她穿着本地人的装束，动作自然、轻盈、又有力量，充满生命力， 不会是专业舞蹈演员吧？有可能。快结束，有位男士，突然拿起话筒，说要唱一首歌给一位女孩，但气温越来越低，我们穿得又少，便没有多待，就开始往回走。</p>
<p>在乌兰察布我们看到几万亿年前的火山喷发造就的地质面貌。看见敕勒川草原，还去了呼和浩特。</p>
<p>这趟旅程，我有个比较好奇的点，就是很多墓碑上都刻着十字架，他们也信奉基督教？我印象里，少数民族好像有一种自己的民族信奉的教，可能他们在很早的时候就接触到了基督教？</p>
<p>朋友对当地一种东西也很好奇，在他们房顶上有一种类似烟囱的东西，如果只有一个烟囱，可以理解，但同一个房子有好几个这样的烟囱，就很奇特了。<br><a href="https://postimg.cc/4n29LQzz"><img src="https://i.postimg.cc/zX8FfdvP/1241698313768-pic-hd.jpg" alt="1241698313768-pic-hd.jpg"></a><br><a href="https://postimg.cc/yJf11v6j"><img src="https://i.postimg.cc/j5TLhFGp/1251698313769-pic-hd.jpg" alt="1251698313769-pic-hd.jpg"></a><br><a href="https://postimg.cc/V0XPCRw3"><img src="https://i.postimg.cc/SRvSHTvN/1261698313770-pic-hd.jpg" alt="1261698313770-pic-hd.jpg"></a><br><a href="https://postimg.cc/YGmJ53vh"><img src="https://i.postimg.cc/1tWsN7Pc/1271698313771-pic-hd.jpg" alt="1271698313771-pic-hd.jpg"></a><br><a href="https://postimg.cc/fJb6ZDtG"><img src="https://i.postimg.cc/RV1970MZ/1281698313772-pic-hd.jpg" alt="1281698313772-pic-hd.jpg"></a><br><a href="https://postimg.cc/2Ly2pjcT"><img src="https://i.postimg.cc/BbcyKXxW/1291698313774-pic-hd.jpg" alt="1291698313774-pic-hd.jpg"></a><br><a href="https://postimg.cc/jCLcv5Gk"><img src="https://i.postimg.cc/59mr4Qp1/1301698313776-pic-hd.jpg" alt="1301698313776-pic-hd.jpg"></a><br><a href="https://postimg.cc/gXQ6JYcg"><img src="https://i.postimg.cc/sxDPTXkC/1311698313777-pic-hd.jpg" alt="1311698313777-pic-hd.jpg"></a><br><a href="https://postimg.cc/JyZKNdv7"><img src="https://i.postimg.cc/g0B5PCKh/1321698313778-pic-hd.jpg" alt="1321698313778-pic-hd.jpg"></a><br><a href="https://postimg.cc/bd5Kz4xd"><img src="https://i.postimg.cc/fTWZvNk7/1331698313779-pic-hd.jpg" alt="1331698313779-pic-hd.jpg"></a><br><a href="https://postimg.cc/Wq3Rzv3f"><img src="https://i.postimg.cc/6qVBH6Nw/1341698313780-pic-hd.jpg" alt="1341698313780-pic-hd.jpg"></a><br><a href="https://postimg.cc/F7QVgZmD"><img src="https://i.postimg.cc/J4sY86FV/1351698313781-pic-hd.jpg" alt="1351698313781-pic-hd.jpg"></a><br><a href="https://postimg.cc/dZ9k9Gmx"><img src="https://i.postimg.cc/BbrT4g84/1361698313783-pic-hd.jpg" alt="1361698313783-pic-hd.jpg"></a><br><a href="https://postimg.cc/dhf7nsrw"><img src="https://i.postimg.cc/tgqhq7gZ/1371698313784-pic-hd.jpg" alt="1371698313784-pic-hd.jpg"></a><br><a href="https://postimg.cc/F7RKc8zj"><img src="https://i.postimg.cc/65VGsNN1/1381698313786-pic-hd.jpg" alt="1381698313786-pic-hd.jpg"></a><br><a href="https://postimg.cc/hz2Bt49N"><img src="https://i.postimg.cc/yxHYnkW6/1391698313786-pic-hd.jpg" alt="1391698313786-pic-hd.jpg"></a><br><a href="https://postimg.cc/fkbsgXss"><img src="https://i.postimg.cc/3rXwNCbk/1401698313787-pic-hd.jpg" alt="1401698313787-pic-hd.jpg"></a><br><a href="https://postimg.cc/D4Stfrfb"><img src="https://i.postimg.cc/rsjcJjvg/1411698313788-pic-hd.jpg" alt="1411698313788-pic-hd.jpg"></a><br><a href="https://postimg.cc/jnnFYRvH"><img src="https://i.postimg.cc/cCFyYHnb/1421698313790-pic-hd.jpg" alt="1421698313790-pic-hd.jpg"></a><br><a href="https://postimg.cc/v1Pq14N7"><img src="https://i.postimg.cc/MTwhFR0L/1431698313792-pic-hd.jpg" alt="1431698313792-pic-hd.jpg"></a><br><a href="https://postimg.cc/FkXj1mNg"><img src="https://i.postimg.cc/Y0h8nqPV/1441698313793-pic-hd.jpg" alt="1441698313793-pic-hd.jpg"></a><br><a href="https://postimg.cc/xNQznR36"><img src="https://i.postimg.cc/Y0GfNDGB/1451698313794-pic-hd.jpg" alt="1451698313794-pic-hd.jpg"></a><br><a href="https://postimg.cc/rDHgcB0g"><img src="https://i.postimg.cc/9fmkPVW3/1461698313797-pic-hd.jpg" alt="1461698313797-pic-hd.jpg"></a><br><a href="https://postimg.cc/ZCM6yrb5"><img src="https://i.postimg.cc/2SzGMwgh/1471698313798-pic-hd.jpg" alt="1471698313798-pic-hd.jpg"></a><br><a href="https://postimg.cc/cgnbVsFQ"><img src="https://i.postimg.cc/26cNLyvX/1481698313799-pic-hd.jpg" alt="1481698313799-pic-hd.jpg"></a><br><a href="https://postimg.cc/34mtttw1"><img src="https://i.postimg.cc/85nxP3Q2/1491698313801-pic-hd.jpg" alt="1491698313801-pic-hd.jpg"></a><br><a href="https://postimg.cc/jW7VrQ5w"><img src="https://i.postimg.cc/438XVWR5/1501698313804-pic-hd.jpg" alt="1501698313804-pic-hd.jpg"></a></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>草原</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7.6环境基于Prometheus和Grafana结合钉钉机器人打造全时监控(预警)Docker容器服务系统</title>
    <url>/2020/12/07/Centos7-6%E7%8E%AF%E5%A2%83%E5%9F%BA%E4%BA%8EPrometheus%E5%92%8CGrafana%E7%BB%93%E5%90%88%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%89%93%E9%80%A0%E5%85%A8%E6%97%B6%E7%9B%91%E6%8E%A7-%E9%A2%84%E8%AD%A6-Docker%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>   我们知道，奉行长期主义的网络公司，势必应在软件开发流程管理体系上具备规范意识，即代码提交有CR(CodeReview)，功能测试上自动化，而功能发布讲究三板斧：灰度、监控、止血。灰度属于测试范畴，止血则是亡羊补牢，今天我们来聊聊监控，提起监控，就不得不提在DepOps(自动化运维)领域鼎鼎有名的Prometheus(普罗米修斯)，有人说这个开源系统的名字怎么有点如雷贯耳啊，没错，它的名字就是取自从宙斯手中为人类夺回圣火的古希腊神明普罗米修斯，而Prometheus的Logo恰恰就是奥林匹克圣火。Prometheus主要的功能就是可以无时不刻的监控所有部署在生产环境中的服务，如果服务出现问题则会及时报警以提醒开发者。</p>
<span id="more"></span>
<p><img src="https://v3u.cn/v3u/Public/Uploads/1607234636.png" alt="远见而明察近观若明火|Centos7.6环境基于Prometheus和Grafana结合钉钉机器人打造全时监控(预警)Docker容器服务系统"></p>
<p>​    本次我们利用Docker和Prometheus以及周边的其他生态来搭建一套属于自己的全时监控告警平台，系统采用Centos7.6。</p>
<p>​    首先在系统中安装Docker:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#升级yum</span></span><br><span class="line">sudo yum update</span><br><span class="line"><span class="comment">#卸载旧版本docker</span></span><br><span class="line">sudo yum remove docker  docker-common docker-selinux docker-engine</span><br><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment">#设置源</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum makecache fast</span><br><span class="line"><span class="comment">#安装docker</span></span><br><span class="line">sudo yum install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<p>​    安装成功后查看版本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[root@instance-53r3vagg tmp]<span class="comment"># docker -v</span></span><br><span class="line">Docker version <span class="number">19.03</span><span class="number">.14</span>, build 5eb3275d40</span><br></pre></td></tr></table></figure>

<p>​    在下载镜像之前，我们需要设置一下国内源，用来提高下载速度，执行sudo vim &#x2F;etc&#x2F;docker&#x2F;daemon.json 命令创建新文件，并添加如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://d7grpode.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    重启Docker:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>​    随后拉取Prometheus的Docker镜像：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker pull prom/prometheus:latest</span><br></pre></td></tr></table></figure>

<p>​    这里我们以监控Redis数据库为例子，所以还需要拉取redis和redis状态收集器两个镜像：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line">docker pull oliver006/redis_exporter:latest</span><br></pre></td></tr></table></figure>

<p>​    分别启动redis和redis状态收集器:</p>
<p>​    启动redis:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis -p <span class="number">6379</span>:<span class="number">6379</span> redis</span><br></pre></td></tr></table></figure>

<p>​    启动redis状态收集器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis_exporter -p <span class="number">9121</span>:<span class="number">9121</span> oliver006/redis_exporter:latest --redis.addr redis://<span class="number">120.48</span><span class="number">.20</span><span class="number">.113</span>:<span class="number">6379</span></span><br></pre></td></tr></table></figure>

<p>​    这里redis_exporter监听服务器上的redis服务，而redis_exporter运行在9121端口上，注意redis的地址写服务器的公网ip。</p>
<p>​    运行docker ps查看服务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[root@instance-53r3vagg tmp]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                                   COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">51349113892a        redis                                   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   <span class="number">52</span> minutes ago      Up <span class="number">52</span> minutes       <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">6379</span>-&gt;<span class="number">6379</span>/tcp   redis</span><br><span class="line">0ffcf81ea7ff        oliver006/redis_exporter:latest         <span class="string">&quot;/redis_exporter --r…&quot;</span>   About an hour ago   Up About an hour    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9121</span>-&gt;<span class="number">9121</span>/tcp   redis_exporter</span><br></pre></td></tr></table></figure>

<p>​    随后创建prometheus的配置文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vim /tmp/prometheus.yml</span><br></pre></td></tr></table></figure>

<p>​    加入下面代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  - job_name: <span class="string">&#x27;redis&#x27;</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Override the global default and scrape targets from this job every 5 seconds.</span></span><br><span class="line"></span><br><span class="line">    scrape_interval: 5s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line"></span><br><span class="line">      - targets: [<span class="string">&#x27;120.48.20.113:9121&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>​    这里每隔5秒就获取一下服务运行信息，注意服务器地址要写公网ip，随后启动prometheus服务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">9090</span>:<span class="number">9090</span> -v /tmp/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus:latest</span><br></pre></td></tr></table></figure>

<p>​    此时，prometheus就运行在9090端口上，访问一下：<a href="http://120.48.20.113:9090/targets">http://120.48.20.113:9090/targets</a></p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20201206141259_13874.png" alt="img"></p>
<p>​    就可以看到redis服务正在运行，与此同时，也可以查询一些参数，比如内存占用：</p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20201206141218_52275.png" alt="img"></p>
<p>​    监控我们已经做到了，但是如果redis服务挂了怎么办，如何第一时间让研发人员知晓情况是首要课题，还在用原始的邮件通知？还记得<a href="https://v3u.cn/a_id_132">钉钉机器人</a>么？这里我们引入一个报警机器人，来实现24小时全时报警的功能，创建一个机器人：</p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20201206141216_96093.png" alt="img"></p>
<p>​    这里需要注意一点，安全设置选择ip过滤，将公网ip填入：</p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20201206141257_84365.png" alt="img"></p>
<p>​    ok，前置操作搞定了，接下来我们继续利用Docker拉取两个镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull prom/alertmanager:latest</span><br><span class="line">docker pull timonwong/prometheus-webhook-dingtalk</span><br></pre></td></tr></table></figure>

<p>​    分别是prometheus的告警模块以及钉钉机器人插件，流程是如果prometheus检测到服务器异常，就会通过请求钉钉机器人的webhook地址来发送告警通知。</p>
<p>​    编写告警配置文件:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vim /tmp/alertmanager.yml</span><br></pre></td></tr></table></figure>

<p>​    添加代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">global</span>:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">route:</span><br><span class="line">  receiver: webhook</span><br><span class="line">  group_wait: 30s</span><br><span class="line">  group_interval: 5m</span><br><span class="line">  repeat_interval: 5m</span><br><span class="line">  group_by: [alertname]</span><br><span class="line">  routes:</span><br><span class="line">  - receiver: webhook</span><br><span class="line">    group_wait: 10s</span><br><span class="line">receivers:</span><br><span class="line">- name: webhook</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: http://<span class="number">120.48</span><span class="number">.20</span><span class="number">.113</span>:<span class="number">8060</span>/dingtalk/webhook1/send</span><br><span class="line">    send_resolved: true</span><br></pre></td></tr></table></figure>

<p>​    同时编写告警规则：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vim /tmp/redis.rules</span><br></pre></td></tr></table></figure>

<p>​    添加代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">groups:</span><br><span class="line">- name: redis</span><br><span class="line">  rules:</span><br><span class="line">  - alert: redis</span><br><span class="line">    expr: up&#123;job=<span class="string">&quot;redis&quot;</span>&#125; == <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>: 15s</span><br><span class="line">    labels:</span><br><span class="line">      severity: <span class="number">1</span></span><br><span class="line">      team: node</span><br><span class="line">    annotations:</span><br><span class="line">      summary: <span class="string">&quot;恭喜您，您的redis服务已经挂掉啦&quot;</span></span><br></pre></td></tr></table></figure>

<p>​    最后，修改一下prometheus的配置文件，将告警设置配置好：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vim /tmp/prometheus.yml</span><br></pre></td></tr></table></figure>

<p>​    修改代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line"></span><br><span class="line">  - job_name: <span class="string">&#x27;redis&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Override the global default and scrape targets from this job every 5 seconds.</span></span><br><span class="line"></span><br><span class="line">    scrape_interval: 5s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line"></span><br><span class="line">      - targets: [<span class="string">&#x27;120.48.20.113:9121&#x27;</span>]</span><br><span class="line"></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - <span class="number">120.48</span><span class="number">.20</span><span class="number">.113</span>:<span class="number">9093</span></span><br><span class="line"></span><br><span class="line">rule_files:</span><br><span class="line">  - <span class="string">&quot;/etc/prometheus/redis.rules&quot;</span></span><br></pre></td></tr></table></figure>

<p>​    重启prometheus服务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">9090</span>:<span class="number">9090</span> -v /tmp/prometheus.yml:/etc/prometheus/prometheus.yml -v /tmp/redis.rules:/etc/prometheus/redis.rules  prom/prometheus:latest</span><br></pre></td></tr></table></figure>

<p>​    注意，这里和第一次启动prometheus有所不同，这次我们通过-v挂载命令将redis.rules挂载到容器内部使用，随后启动告警服务以及钉钉插件：</p>
<p>​    启动告警模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker run -d --name alertmanager -p <span class="number">9093</span>:<span class="number">9093</span> -v /tmp/alertmanager.yml:/etc/alertmanager/alertmanager.yml prom/alertmanager:latest</span><br></pre></td></tr></table></figure>

<p>​    启动钉钉插件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">8060</span>:<span class="number">8060</span> --name webhook timonwong/prometheus-webhook-dingtalk --ding.profile=<span class="string">&quot;webhook1=https://oapi.dingtalk.com/robot/send?access_token=钉钉token&quot;</span></span><br></pre></td></tr></table></figure>

<p>​    注意将token替换成自己的机器人token。</p>
<p>​    再次访问<a href="http://120.48.20.113:9090/rules">http://120.48.20.113:9090/rules</a></p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20201206141216_78418.png" alt="img"></p>
<p>​    可以看到告警配置已经生效了，现在我们简单模拟一下redis的宕机</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[root@instance-53r3vagg tmp]<span class="comment"># docker stop redis_exporter</span></span><br><span class="line">redis_exporter</span><br></pre></td></tr></table></figure>

<p>​    prometheus监控立刻发现问题：</p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20201206141210_60476.png" alt="img"></p>
<p>​    如果宕机持续10秒，则会立刻触发firiing(警告)：</p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20201206141238_63054.png" alt="img"></p>
<p>​    同时，钉钉机器人立刻发送信息：</p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20201206141207_48514.png" alt="img"></p>
<p>​    整个过程滴水不漏，当然了，如果你觉得prometheus的监控界面过于简陋，可以使用Grafana将监控数据可视化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker run -d --name prom-dashboard -p <span class="number">3000</span>:<span class="number">3000</span></span><br></pre></td></tr></table></figure>

<p>​    访问地址：<a href="http://120.48.20.113:3000/">http://120.48.20.113:3000/</a></p>
<p>​    默认账号密码是admin&#x2F;amdin。</p>
<p>​    导入数据：</p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20201206141205_36897.png" alt="img"></p>
<p>​    选择prometheus</p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20201206141232_60232.png" alt="img"></p>
<p>​    配置prometheus地址和端口：</p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20201206151212_26601.png" alt="img"></p>
<p>​    随后就能以图形化界面来监控服务了：</p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20201206151254_63575.png" alt="img"></p>
<p>​    结语：监控是整个项目生命周期中至关重要的一环，灾前及时预警发现故障，灾后提供详实的数据用于追查定位问题，而prometheus正是这样一个承前启后继往开来的监控宗师，区区5个镜像就可以帮助我们打造全时无死角监控预警体系。</p>
]]></content>
      <categories>
        <category>运维开发</category>
      </categories>
      <tags>
        <tag>运维开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Django中的session的使用</title>
    <url>/2020/11/23/Django%E4%B8%AD%E7%9A%84session%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="一、Session-的概念"><a href="#一、Session-的概念" class="headerlink" title="一、Session 的概念"></a>一、Session 的概念</h2><ul>
<li>cookie 是在浏览器端保存键值对数据，而 session 是在服务器端保存键值对数据</li>
<li>session 的使用依赖 cookie：在使用 Session 后，会在 Cookie 中存储一个 sessionid 的数据，每次请求时浏览器都会将这个数据发给服务器，服务器在接收到 sessionid 后，会根据这个值找出这个请求者的 Session。<span id="more"></span></li>
</ul>
<h2 id="二、Django-中-Session-的存储"><a href="#二、Django-中-Session-的存储" class="headerlink" title="二、Django 中 Session 的存储"></a>二、Django 中 Session 的存储</h2><ul>
<li>session 键值对数据保存<br><img src="https://img-blog.csdnimg.cn/img_convert/13d262f06a37cab0967672a154da6d2b.png" alt="a722a7c49947a7d7ee505afa7828fa4a.png"></li>
<li>session 的键值对数据默认保存在 django 项目的一张数据库表中(表名为：django_session)，保存格式如下：<br><img src="https://img-blog.csdnimg.cn/img_convert/377cba9915a32bca53dc2b8b212a3958.png" alt="3c2291ab7560f7c5881bf60a3adf797b.png"></li>
<li>实际上是对数据有加密的，如下图：<br> <img src="https://img-blog.csdnimg.cn/img_convert/bf3cbd48fbe625711ab197622551f253.png" alt="ba1b277d609a20d17215fca01093b6f6.png"></li>
</ul>
<h2 id="三、Django-中-Session-的配置"><a href="#三、Django-中-Session-的配置" class="headerlink" title="三、Django 中 Session 的配置"></a>三、Django 中 Session 的配置</h2><p>Django 中默认支持 Session，其内部提供了 5 种类型的 Session 供开发者使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 数据库（默认）</span><br><span class="line">- 缓存</span><br><span class="line">- 文件</span><br><span class="line">- 缓存+数据库</span><br><span class="line">- 加密cookie</span><br></pre></td></tr></table></figure>

<h3 id="1）数据库-Session"><a href="#1）数据库-Session" class="headerlink" title="1）数据库 Session"></a>1）数据库 Session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a. 配置 settings.py</span><br><span class="line"></span><br><span class="line">    SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.db&#x27;</span>   <span class="comment"># 引擎（默认）</span></span><br><span class="line"></span><br><span class="line">    SESSION_COOKIE_NAME ＝ <span class="string">&quot;sessionid&quot;</span>                       <span class="comment"># Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）</span></span><br><span class="line">    SESSION_COOKIE_PATH ＝ <span class="string">&quot;/&quot;</span>                               <span class="comment"># Session的cookie保存的路径（默认）</span></span><br><span class="line">    SESSION_COOKIE_DOMAIN = <span class="literal">None</span>                             <span class="comment"># Session的cookie保存的域名（默认）</span></span><br><span class="line">    SESSION_COOKIE_SECURE = <span class="literal">False</span>                            <span class="comment"># 是否Https传输cookie（默认）</span></span><br><span class="line">    SESSION_COOKIE_HTTPONLY = <span class="literal">True</span>                           <span class="comment"># 是否Session的cookie只支持http传输（默认）</span></span><br><span class="line">    SESSION_COOKIE_AGE = <span class="number">1209600</span>                             <span class="comment"># Session的cookie失效日期（2周）（默认）</span></span><br><span class="line">    SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="literal">False</span>                  <span class="comment"># 是否关闭浏览器使得Session过期（默认）</span></span><br><span class="line">    SESSION_SAVE_EVERY_REQUEST = <span class="literal">False</span>                       <span class="comment"># 是否每次请求都保存Session，默认修改之后才保存（默认）</span></span><br></pre></td></tr></table></figure>

<h3 id="2）缓存-Session"><a href="#2）缓存-Session" class="headerlink" title="2）缓存 Session"></a>2）缓存 Session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a. 配置 settings.py</span><br><span class="line"></span><br><span class="line">    SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.cache&#x27;</span>  <span class="comment"># 引擎</span></span><br><span class="line">    SESSION_CACHE_ALIAS = <span class="string">&#x27;default&#x27;</span>                            <span class="comment"># 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置</span></span><br><span class="line"></span><br><span class="line">    SESSION_COOKIE_NAME ＝ <span class="string">&quot;sessionid&quot;</span>                        <span class="comment"># Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串</span></span><br><span class="line">    SESSION_COOKIE_PATH ＝ <span class="string">&quot;/&quot;</span>                                <span class="comment"># Session的cookie保存的路径</span></span><br><span class="line">    SESSION_COOKIE_DOMAIN = <span class="literal">None</span>                              <span class="comment"># Session的cookie保存的域名</span></span><br><span class="line">    SESSION_COOKIE_SECURE = <span class="literal">False</span>                             <span class="comment"># 是否Https传输cookie</span></span><br><span class="line">    SESSION_COOKIE_HTTPONLY = <span class="literal">True</span>                            <span class="comment"># 是否Session的cookie只支持http传输</span></span><br><span class="line">    SESSION_COOKIE_AGE = <span class="number">1209600</span>                              <span class="comment"># Session的cookie失效日期（2周）</span></span><br><span class="line">    SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="literal">False</span>                   <span class="comment"># 是否关闭浏览器使得Session过期</span></span><br><span class="line">    SESSION_SAVE_EVERY_REQUEST = <span class="literal">False</span>                        <span class="comment"># 是否每次请求都保存Session，默认修改之后才保存</span></span><br></pre></td></tr></table></figure>

<h3 id="3）文件-Session"><a href="#3）文件-Session" class="headerlink" title="3）文件 Session"></a>3）文件 Session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a. 配置 settings.py</span><br><span class="line"></span><br><span class="line">    SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.file&#x27;</span>    <span class="comment"># 引擎</span></span><br><span class="line">    SESSION_FILE_PATH = <span class="literal">None</span>                                    <span class="comment"># 缓存文件路径，如果为None，则使用tempfile</span></span><br><span class="line">模块获取一个临时地址tempfile.gettempdir()                             <span class="comment"># 如：/var/folders/d3/j9tj0gz93dg06bmwxmhh6_xm0000gn/T</span></span><br><span class="line"></span><br><span class="line">    SESSION_COOKIE_NAME ＝ <span class="string">&quot;sessionid&quot;</span>                          <span class="comment"># Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串</span></span><br><span class="line">    SESSION_COOKIE_PATH ＝ <span class="string">&quot;/&quot;</span>                                  <span class="comment"># Session的cookie保存的路径</span></span><br><span class="line">    SESSION_COOKIE_DOMAIN = <span class="literal">None</span>                                <span class="comment"># Session的cookie保存的域名</span></span><br><span class="line">    SESSION_COOKIE_SECURE = <span class="literal">False</span>                               <span class="comment"># 是否Https传输cookie</span></span><br><span class="line">    SESSION_COOKIE_HTTPONLY = <span class="literal">True</span>                              <span class="comment"># 是否Session的cookie只支持http传输</span></span><br><span class="line">    SESSION_COOKIE_AGE = <span class="number">1209600</span>                                <span class="comment"># Session的cookie失效日期（2周）</span></span><br><span class="line">    SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="literal">False</span>                     <span class="comment"># 是否关闭浏览器使得Session过期</span></span><br><span class="line">    SESSION_SAVE_EVERY_REQUEST = <span class="literal">False</span>                          <span class="comment"># 是否每次请求都保存Session，默认修改之后才保存</span></span><br></pre></td></tr></table></figure>

<h3 id="4）缓存-数据库-Session"><a href="#4）缓存-数据库-Session" class="headerlink" title="4）缓存+数据库 Session"></a>4）缓存+数据库 Session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a. 配置 settings.py</span><br><span class="line"></span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.cached_db&#x27;</span>        <span class="comment"># 引擎</span></span><br></pre></td></tr></table></figure>

<h3 id="5）加密-cookie-Session"><a href="#5）加密-cookie-Session" class="headerlink" title="5）加密 cookie Session"></a>5）加密 cookie Session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a. 配置 settings.py</span><br><span class="line"></span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.signed_cookies&#x27;</span>   <span class="comment"># 引擎</span></span><br></pre></td></tr></table></figure>

<h2 id="四、Session-的基本操作："><a href="#四、Session-的基本操作：" class="headerlink" title="四、Session 的基本操作："></a>四、Session 的基本操作：</h2><ul>
<li>以键值对的格式写 session</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session[<span class="string">&#x27;键&#x27;</span>]=值</span><br></pre></td></tr></table></figure>

<ul>
<li>根据键读取值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.get(<span class="string">&#x27;键&#x27;</span>,默认值)</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">request.session[<span class="string">&#x27;键&#x27;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>清除所有 session，在存储中删除值的部分</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.clear()</span><br></pre></td></tr></table></figure>

<ul>
<li>清除 session 数据，在存储中删除 session 的整条数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.flush()</span><br></pre></td></tr></table></figure>

<ul>
<li>删除 session 中的指定键及值，在存储中只删除某个键及对应的值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">del request.session[&#x27;键&#x27;]</span><br></pre></td></tr></table></figure>

<ul>
<li>设置 session 数据有效时间； 如果不设置，默认过期时间为两周</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.set_expiry(value)</span><br></pre></td></tr></table></figure>

<ol>
<li>如果过期时间的 value 是一个整数，则 session 数据 将在 value 秒没有活动后过期。</li>
<li>如果过期时间的 value 为 None，那么会话永不过期。</li>
<li>如果过期时间的 value 为 0，那么用户会话的 Cookie 将在用户的浏览器关闭时过期。</li>
</ol>
<h2 id="四、以下是使用例子："><a href="#四、以下是使用例子：" class="headerlink" title="四、以下是使用例子："></a>四、以下是使用例子：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 发短信接口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sms_send</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># http://localhost:8000/duanxin/duanxin/sms_send/?phone=18434288349</span></span><br><span class="line">    <span class="comment"># 1 获取手机号</span></span><br><span class="line">    phone = request.GET.get(<span class="string">&#x27;phone&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2 生成6位验证码</span></span><br><span class="line">    code = aliyunsms.get_code(<span class="number">6</span>, <span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 3 缓存到Redis</span></span><br><span class="line">    <span class="comment">#cache.set(phone,code,60) #60s有效期</span></span><br><span class="line">    <span class="comment">#print(&#x27;判断缓存中是否有:&#x27;,cache.has_key(phone))</span></span><br><span class="line">    <span class="comment">#print(&#x27;获取Redis验证码:&#x27;,cache.get(phone))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#暂时用session处理</span></span><br><span class="line">    request.session[<span class="string">&#x27;phone&#x27;</span>] = code</span><br><span class="line">    request.session.set_expiry(<span class="number">300</span>) <span class="comment">#设置5分钟后过期</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;判断缓存中是否有:&#x27;</span>, request.session.get(<span class="string">&#x27;phone&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;获取session验证码:&#x27;</span>,request.session.get(<span class="string">&#x27;phone&#x27;</span>))</span><br><span class="line">    <span class="comment"># 4 发短信</span></span><br><span class="line">    result = aliyunsms.send_sms(phone, code)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 短信验证码校验</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sms_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># /duanxin/sms_check/?phone=xxx&amp;code=xxx</span></span><br><span class="line">    <span class="comment"># 1. 电话和手动输入的验证码</span></span><br><span class="line">    phone = request.GET.get(<span class="string">&#x27;phone&#x27;</span>)</span><br><span class="line">    code = request.GET.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2. 获取redis中保存的code</span></span><br><span class="line">    <span class="comment">#print(&#x27;缓存中是否包含:&#x27;,cache.has_key(phone))</span></span><br><span class="line">    <span class="comment">#print(&#x27;取值:&#x27;,cache.get(phone))</span></span><br><span class="line">    <span class="comment">#cache_code = cache.get(phone)</span></span><br><span class="line">    <span class="comment">#获取session里的code</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;取值:&#x27;</span>, request.session.get(<span class="string">&#x27;phone&#x27;</span>))</span><br><span class="line">    cache_code = request.session.get(<span class="string">&#x27;phone&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 判断</span></span><br><span class="line">    <span class="keyword">if</span> code == cache_code:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(&#123;<span class="string">&#x27;result&#x27;</span>:<span class="string">&#x27;OK&#x27;</span>&#125;))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(&#123;<span class="string">&#x27;result&#x27;</span>:<span class="string">&#x27;False&#x27;</span>&#125;))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile文件详解</title>
    <url>/2020/11/22/Dockerfile%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="什么是dockerfile"><a href="#什么是dockerfile" class="headerlink" title="什么是dockerfile?"></a>什么是dockerfile?</h2><p>Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取<code>Dockerfile</code>中的指令自动生成映像。</p>
<p><code>docker build</code>命令用于从Dockerfile构建映像。可以在<code>docker build</code>命令中使用<code>-f</code>标志指向文件系统中任何位置的Dockerfile。</p>
<span id="more"></span>
<p>例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -f /path/to/a/Dockerfile</span><br></pre></td></tr></table></figure>
<h2 id="Dockerfile的基本结构"><a href="#Dockerfile的基本结构" class="headerlink" title="Dockerfile的基本结构"></a>Dockerfile的基本结构</h2><p>Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释。</p>
<h2 id="Dockerfile文件说明"><a href="#Dockerfile文件说明" class="headerlink" title="Dockerfile文件说明"></a>Dockerfile文件说明</h2><p>Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是<em>FROM</em>。一个声明以<code>＃</code>字符开头则被视为注释。可以在Docker文件中使用<code>RUN</code>，<code>CMD</code>，<code>FROM</code>，<code>EXPOSE</code>，<code>ENV</code>等指令。</p>
<p><strong>在这里列出了一些常用的指令。</strong></p>
<p><strong>FROM：指定基础镜像，必须为第一个命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">　　FROM &lt;image&gt;</span><br><span class="line">　　FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class="line">　　FROM &lt;image&gt;@&lt;digest&gt;</span><br><span class="line">示例：</span><br><span class="line">　　FROM mysql:5.6</span><br><span class="line">注：</span><br><span class="line">　　tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</span><br></pre></td></tr></table></figure>

<p><strong>MAINTAINER: 维护者信息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    MAINTAINER &lt;name&gt;</span><br><span class="line">示例：</span><br><span class="line">    MAINTAINER Jasper Xu</span><br><span class="line">    MAINTAINER sorex@163.com</span><br><span class="line">    MAINTAINER Jasper Xu &lt;sorex@163.com&gt;</span><br></pre></td></tr></table></figure>

<p><strong>RUN：构建镜像时执行的命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RUN用于在镜像容器中执行命令，其有以下两种命令执行方式：</span><br><span class="line">shell执行</span><br><span class="line">格式：</span><br><span class="line">    RUN &lt;command&gt;</span><br><span class="line">exec执行</span><br><span class="line">格式：</span><br><span class="line">    RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line">示例：</span><br><span class="line">    RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line">    RUN apk update</span><br><span class="line">    RUN [&quot;/etc/execfile&quot;, &quot;arg1&quot;, &quot;arg1&quot;]</span><br><span class="line">注：</span><br><span class="line">　　RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如：docker build --no-cache</span><br></pre></td></tr></table></figure>

<p><strong>ADD：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    ADD &lt;src&gt;... &lt;dest&gt;</span><br><span class="line">    ADD [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;] 用于支持包含空格的路径</span><br><span class="line">示例：</span><br><span class="line">    ADD hom* /mydir/          # 添加所有以&quot;hom&quot;开头的文件</span><br><span class="line">    ADD hom?.txt /mydir/      # ? 替代一个单字符,例如：&quot;home.txt&quot;</span><br><span class="line">    ADD test relativeDir/     # 添加 &quot;test&quot; 到 `WORKDIR`/relativeDir/</span><br><span class="line">    ADD test /absoluteDir/    # 添加 &quot;test&quot; 到 /absoluteDir/</span><br></pre></td></tr></table></figure>

<p><strong>COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源</strong></p>
<p><strong>CMD：构建容器后调用，也就是在容器启动时才进行调用。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (执行可执行文件，优先)</span><br><span class="line">    CMD [&quot;param1&quot;,&quot;param2&quot;] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)</span><br><span class="line">    CMD command param1 param2 (执行shell内部命令)</span><br><span class="line">示例：</span><br><span class="line">    CMD echo &quot;This is a test.&quot; | wc -</span><br><span class="line">    CMD [&quot;/usr/bin/wc&quot;,&quot;--help&quot;]</span><br><span class="line">注：</span><br><span class="line"> 　　CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</span><br></pre></td></tr></table></figure>

<p><strong>ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (可执行文件, 优先)</span><br><span class="line">    ENTRYPOINT command param1 param2 (shell内部命令)</span><br><span class="line">示例：</span><br><span class="line">    FROM ubuntu</span><br><span class="line">    ENTRYPOINT [&quot;top&quot;, &quot;-b&quot;]</span><br><span class="line">    CMD [&quot;-c&quot;]</span><br><span class="line">注：</span><br><span class="line">　　　ENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。</span><br></pre></td></tr></table></figure>

<p><strong>LABEL：用于为镜像添加元数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br><span class="line">示例：</span><br><span class="line">　　LABEL version=&quot;1.0&quot; description=&quot;这是一个Web服务器&quot; by=&quot;IT笔录&quot;</span><br><span class="line">注：</span><br><span class="line">　　使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。</span><br></pre></td></tr></table></figure>

<p><strong>ENV：设置环境变量</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    ENV &lt;key&gt; &lt;value&gt;  #&lt;key&gt;之后的所有内容均会被视为其&lt;value&gt;的组成部分，因此，一次只能设置一个变量</span><br><span class="line">    ENV &lt;key&gt;=&lt;value&gt; ...  #可以设置多个变量，每个变量为一个&quot;&lt;key&gt;=&lt;value&gt;&quot;的键值对，如果&lt;key&gt;中包含空格，可以使用\来进行转义，也可以通过&quot;&quot;来进行标示；另外，反斜线也可以用于续行</span><br><span class="line">示例：</span><br><span class="line">    ENV myName John Doe</span><br><span class="line">    ENV myDog Rex The Dog</span><br><span class="line">    ENV myCat=fluffy</span><br></pre></td></tr></table></figure>

<p><strong>EXPOSE：指定于外界交互的端口</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    EXPOSE &lt;port&gt; [&lt;port&gt;...]</span><br><span class="line">示例：</span><br><span class="line">    EXPOSE 80 443</span><br><span class="line">    EXPOSE 8080</span><br><span class="line">    EXPOSE 11211/tcp 11211/udp</span><br><span class="line">注：</span><br><span class="line">　　EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口</span><br></pre></td></tr></table></figure>

<p><strong>VOLUME：用于指定持久化目录</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    VOLUME [&quot;/path/to/dir&quot;]</span><br><span class="line">示例：</span><br><span class="line">    VOLUME [&quot;/data&quot;]</span><br><span class="line">    VOLUME [&quot;/var/www&quot;, &quot;/var/log/apache2&quot;, &quot;/etc/apache2&quot;</span><br><span class="line">注：</span><br><span class="line">　　一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 卷可以容器间共享和重用</span><br><span class="line">2 容器并不一定要和其它容器共享卷</span><br><span class="line">3 修改卷后会立即生效</span><br><span class="line">4 对卷的修改不会对镜像产生影响</span><br><span class="line">5 卷会一直存在，直到没有任何容器在使用它</span><br></pre></td></tr></table></figure>

<p><strong>WORKDIR：工作目录，类似于cd命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    WORKDIR /path/to/workdir</span><br><span class="line">示例：</span><br><span class="line">    WORKDIR /a  (这时工作目录为/a)</span><br><span class="line">    WORKDIR b  (这时工作目录为/a/b)</span><br><span class="line">    WORKDIR c  (这时工作目录为/a/b/c)</span><br><span class="line">注：</span><br><span class="line">　　通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。</span><br></pre></td></tr></table></figure>

<p>**USER:**<strong>指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户</strong></p>
<p> 格式:<br>　　USER user<br>　　USER user:group<br>　　USER uid<br>　　USER uid:gid<br>　　USER user:gid<br>　　USER uid:group</p>
<p> 示例：<br>　　USER www</p>
<p> 注：</p>
<p>　　使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过<code>docker run</code>运行容器时，可以通过-u参数来覆盖所指定的用户。</p>
<p><strong>ARG：用于指定传递给构建运行时的变量</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    ARG &lt;name&gt;[=&lt;default value&gt;]</span><br><span class="line">示例：</span><br><span class="line">    ARG site</span><br><span class="line">    ARG build_user=www</span><br></pre></td></tr></table></figure>

<p><strong>ONBUILD：用于设置镜像触发器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">　　ONBUILD [INSTRUCTION]</span><br><span class="line">示例：</span><br><span class="line">　　ONBUILD ADD . /app/src</span><br><span class="line">　　ONBUILD RUN /usr/local/bin/python-build --dir /app/src</span><br><span class="line">注：</span><br><span class="line">　　当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发</span><br></pre></td></tr></table></figure>

<p><strong>以下是一个小例子：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This my first nginx Dockerfile</span><br><span class="line"># Version 1.0</span><br><span class="line"></span><br><span class="line"># Base images 基础镜像</span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">#MAINTAINER 维护者信息</span><br><span class="line">MAINTAINER tianfeiyu </span><br><span class="line"></span><br><span class="line">#ENV 设置环境变量</span><br><span class="line">ENV PATH /usr/local/nginx/sbin:$PATH</span><br><span class="line"></span><br><span class="line">#ADD  文件放在当前目录下，拷过去会自动解压</span><br><span class="line">ADD nginx-1.8.0.tar.gz /usr/local/  </span><br><span class="line">ADD epel-release-latest-7.noarch.rpm /usr/local/  </span><br><span class="line"></span><br><span class="line">#RUN 执行以下命令 </span><br><span class="line">RUN rpm -ivh /usr/local/epel-release-latest-7.noarch.rpm</span><br><span class="line">RUN yum install -y wget lftp gcc gcc-c++ make openssl-devel pcre-devel pcre &amp;&amp; yum clean all</span><br><span class="line">RUN useradd -s /sbin/nologin -M www</span><br><span class="line"></span><br><span class="line">#WORKDIR 相当于cd</span><br><span class="line">WORKDIR /usr/local/nginx-1.8.0 </span><br><span class="line"></span><br><span class="line">RUN ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">RUN echo &quot;daemon off;&quot; &gt;&gt; /etc/nginx.conf</span><br><span class="line"></span><br><span class="line">#EXPOSE 映射端口</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">#CMD 运行以下命令</span><br><span class="line">CMD [&quot;nginx&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>最后用一张图解释常用指令的意义^-^</strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ebcca944fbba19df0269a02d8e9110d9.png" alt="img"></p>
<p>“一劳永逸” 的话，有是有的，而 “一劳永逸” 的事却极少</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令大全</title>
    <url>/2020/11/19/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作:"></a>基础操作:</h2><p>1 <strong>docker images</strong> 查看镜像信息列表 镜像是静态的</p>
<p>2 <strong>docker ps -a</strong> 查看运行中的所有容器</p>
<p>3 **docker pull  [images]:[version]**从dockerhub拉取指定镜像</p>
<p>4 <strong>docker run -p 8000:80 -tdi –privileged [imageID][command]</strong>  后台启动docker,并指定宿主机端口和docker映射端口。</p>
<span id="more"></span>
<p> **-i:**以交互模式运行容器，通常与 -t 同时使用；</p>
<p> **-d:**后台运行容器，并返回容器ID；</p>
<p>**-t:**为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p>
<p><strong>–privileged</strong> 容器将拥有访问主机所有设备的权限</p>
<p>通常情况下 [command] 填下 <strong>&#x2F;bin&#x2F;bash</strong> 即可。</p>
<p>特殊情况下，如需要在centos镜像中使用<strong>systemctl</strong> . 则应添加**–privileged** 并设置[command ]为 <strong>init</strong>。</p>
<p>5 当镜像通过run 启动后，便会载入到一个动态的container(容器)中运行，此时若需要进入终端交互模式：</p>
<p><strong>sudo docker exec -it [containerID] &#x2F;bin&#x2F;bash</strong></p>
<p>交互模式中，使用  ctrl+p+q退出交互 保持运行,使用 exit命令退出并停止容器。</p>
<p>6 在容器非交互模式下，通过docker  start&#x2F;stop 命令来启动&#x2F;停止已部署的容器服务。</p>
<p>7 <strong>docker rm [containerID]</strong> 删除容器</p>
<p>8 <strong>docker rmi [imageID]</strong> 删除镜像</p>
<p>9 <strong>docker cp [YourHostFilePath][containerID]:[DockerPath]</strong>  将宿主机内的指定文件传输至容器内部的指定地址。</p>
<h2 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作:"></a>镜像制作:</h2><p>1  <strong>docker commit [containerID] [ImageName]:[Version]</strong> 将修改后的容器重新打包成镜像</p>
<p>2 <strong>docker commit -a “runoob.com” -m “my apache” a404c6c174a2 mymysql:v1</strong> 将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。</p>
<p><strong>-a</strong> :提交的镜像作者；</p>
<p> <strong>-c</strong> :使用Dockerfile指令来创建镜像；</p>
<p> <strong>-m</strong> :提交时的说明文字；</p>
<p> <strong>-p</strong> :在commit时，将容器暂停。</p>
<p>3 **docker push [ImageID][repertory_address]**提交镜像到云仓库</p>
<p>（暂时先记录这些，后续再更新）</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的安装和简单使用</title>
    <url>/2020/11/19/Docker%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="介绍一下docker"><a href="#介绍一下docker" class="headerlink" title="介绍一下docker"></a>介绍一下docker</h3><p>2013年发布至今， <a href="https://www.docker.com/">Docker</a> 一直广受瞩目，被认为可能会改变软件行业。但是，许多人并不清楚 Docker 到底是什么，要解决什么问题，好处又在哪里？本文就来详细解释，帮助大家理解它，还带有简单易懂的实例，教你如何将它用于日常开发。</p>
<h4 id="Docker核心概念"><a href="#Docker核心概念" class="headerlink" title="Docker核心概念"></a>Docker核心概念</h4><span id="more"></span>
<p>镜像(image) Docker 镜像（Image）就是一个只读的模板。例如：一个镜像可以包含一个完整的操作系统环境，里面仅安装了 Apache 或用户需要的其它应用程序。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。</p>
<p>仓库(repository) 仓库（Repository）是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p>
<p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。最大的公开仓库是 Docker Hub，存放了数量庞大的镜像供用户下载。国内的公开仓库包括 时速云 、网易云 等，可以提供大陆用户更稳定快速的访问。当然，用户也可以在本地网络内创建一个私有仓库。</p>
<p>当用户创建了自己的镜像之后就可以使用 push 命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 pull 下来就可以了。</p>
<p>Docker 仓库的概念跟 Git 类似，注册服务器可以理解为 GitHub 这样的托管服务。</p>
<p>容器(container) Docker 利用容器（Container）来运行应用。容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p>
<p>容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。</p>
<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><p>首先是我们的windows10版本下安装docker ,如果你的电脑是家庭教育版建议您下载docker tool box,专业版的下载docker desktop也就是桌面版。</p>
<p>在下载过程中，我们也遇到了一些错误。</p>
<p>比如安装之后出来了三个图标，当我们点击其中一个软件Docker Quickstart Terminal，你会发现它是打不开的 ，这里我们注意一下,docker本身是基于git的。</p>
<p>这里我们这样解决，先找到git的文件位置，找到git下面的bin目录的位置，然后复制它的地址放到Docker Quickstart Terminal的位置前面,然后再双击运行，就可以打开了。</p>
<h3 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h3><p>Docker CE 的安装请参考官方文档。</p>
<blockquote>
<ul>
<li><a href="https://docs.docker.com/docker-for-mac/install/">Mac</a></li>
<li><a href="https://docs.docker.com/docker-for-windows/install/">Windows</a></li>
<li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">Ubuntu</a></li>
<li><a href="https://docs.docker.com/install/linux/docker-ce/debian/">Debian</a></li>
<li><a href="https://docs.docker.com/install/linux/docker-ce/centos/">CentOS</a></li>
<li><a href="https://docs.docker.com/install/linux/docker-ce/fedora/">Fedora</a></li>
<li><a href="https://docs.docker.com/install/linux/docker-ce/binaries/">其他 Linux 发行版</a></li>
</ul>
</blockquote>
<p>安装完成后，运行下面的命令，验证是否安装成功。</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker version</span><br><span class="line"># 或者</span><br><span class="line">$ docker info</span><br></pre></td></tr></table></figure>
</blockquote>
<p>我们常用的镜像有redis,mysql</p>
<p>运行redis镜像</p>
<blockquote>
<p><code>$ docker run -it -p 80:80 a580a</code></p>
</blockquote>
<p>开启守护进程</p>
<blockquote>
<p><code>$ docker run -itd -p 80:80 a580a</code></p>
</blockquote>
<p>列出本地镜像</p>
<blockquote>
<p><code>$ docker images</code></p>
</blockquote>
<p>列出容器</p>
<blockquote>
<p><code>$ docker ps</code></p>
</blockquote>
<p>关闭服务(返回一个ID)</p>
<blockquote>
<p><code>$ docker stop 96f60</code></p>
</blockquote>
<p>强制删除</p>
<blockquote>
<p><code>$ docker rmi -f a580a</code></p>
</blockquote>
<p>docker就像是一个精灵球,我们的项目就是精灵球里面的精灵，当我们开发完毕就可以利用Docker把项目制作成镜像,部署时就可以理解为小精灵被释放出来，进行战斗，而Docker的仓库则提高了镜像的便捷性，可以让我们随时随地只要联网就可以使用自己的镜像。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Python垃圾回收机制</title>
    <url>/2017/11/20/Python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>Python中的垃圾回收是以引用计数为主，分代收集为辅。引用计数的缺陷是循环引用的问题。<br>在Python中，如果一个对象的引用数为0，Python虚拟机就会回收这个对象的内存。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line">__author__ = <span class="string">&#x27;kevinlu1010@qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;object born,id:%s&#x27;</span>%<span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">id</span>(self)))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;object del,id:%s&#x27;</span>%<span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">id</span>(self)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1=ClassA()</span><br><span class="line">        <span class="keyword">del</span> c1</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>执行f1()会循环输出这样的结果，而且进程占用的内存基本不会变动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span> born,<span class="built_in">id</span>:<span class="number">0x237cf58</span></span><br><span class="line"><span class="built_in">object</span> <span class="keyword">del</span>,<span class="built_in">id</span>:<span class="number">0x237cf58</span></span><br></pre></td></tr></table></figure>

<p><code>c1=ClassA()</code>会创建一个对象，放在<code>0x237cf58</code>内存中，c1变量指向这个内存，这时候这个内存的引用计数是1<br><code>del c1</code>后，c1变量不再指向<code>0x237cf58</code>内存，所以这块内存的引用计数减一，等于0，所以就销毁了这个对象，然后释放内存。</p>
<ol>
<li><p>导致引用计数+1的情况</p>
<ol>
<li>对象被创建，例如<code>a=23</code></li>
<li>对象被引用，例如<code>b=a</code></li>
<li>对象被作为参数，传入到一个函数中，例如<code>func(a)</code></li>
<li>对象作为一个元素，存储在容器中，例如<code>list1=[a,a]</code></li>
</ol>
</li>
<li><p>导致引用计数-1的情况</p>
<ol>
<li>对象的别名被显式销毁，例如<code>del a</code></li>
<li>对象的别名被赋予新的对象，例如<code>a=24</code></li>
<li>一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）</li>
<li>对象所在的容器被销毁，或从容器中删除对象</li>
</ol>
<p>demo</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">c,d</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;in func function&#x27;</span>, sys.getrefcount(c) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;init&#x27;</span>, sys.getrefcount(<span class="number">11</span>) - <span class="number">1</span></span><br><span class="line">a = <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;after a=11&#x27;</span>, sys.getrefcount(<span class="number">11</span>) - <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;after b=1&#x27;</span>, sys.getrefcount(<span class="number">11</span>) - <span class="number">1</span></span><br><span class="line">func(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;after func(a)&#x27;</span>, sys.getrefcount(<span class="number">11</span>) - <span class="number">1</span></span><br><span class="line">list1 = [a, <span class="number">12</span>, <span class="number">14</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;after list1=[a,12,14]&#x27;</span>, sys.getrefcount(<span class="number">11</span>) - <span class="number">1</span></span><br><span class="line">a=<span class="number">12</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;after a=12&#x27;</span>, sys.getrefcount(<span class="number">11</span>) - <span class="number">1</span></span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;after del a&#x27;</span>, sys.getrefcount(<span class="number">11</span>) - <span class="number">1</span></span><br><span class="line"><span class="keyword">del</span> b</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;after del b&#x27;</span>, sys.getrefcount(<span class="number">11</span>) - <span class="number">1</span></span><br><span class="line"><span class="comment"># list1.pop(0)</span></span><br><span class="line"><span class="comment"># print &#x27;after pop list1&#x27;,sys.getrefcount(11)-1</span></span><br><span class="line"><span class="keyword">del</span> list1</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;after del list1&#x27;</span>, sys.getrefcount(<span class="number">11</span>) - <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">init <span class="number">24</span></span><br><span class="line">after a=<span class="number">11</span> <span class="number">25</span></span><br><span class="line">after b=<span class="number">1</span> <span class="number">26</span></span><br><span class="line"><span class="keyword">in</span> func function <span class="number">28</span></span><br><span class="line">after func(a) <span class="number">26</span></span><br><span class="line">after list1=[a,<span class="number">12</span>,<span class="number">14</span>] <span class="number">27</span></span><br><span class="line">after a=<span class="number">12</span> <span class="number">26</span></span><br><span class="line">after <span class="keyword">del</span> a <span class="number">26</span></span><br><span class="line">after <span class="keyword">del</span> b <span class="number">25</span></span><br><span class="line">after <span class="keyword">del</span> list1 <span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><strong>问题：为什么调用函数会令引用计数+2</strong></p>
</li>
<li><p>查看一个对象的引用计数</p>
</li>
</ol>
<p><code>sys.getrefcount(a)</code>可以查看a对象的引用计数，但是比正常计数大1，因为调用函数的时候传入a，这会让a的引用计数+1</p>
<h2 id="二-循环引用导致内存泄露"><a href="#二-循环引用导致内存泄露" class="headerlink" title="二.循环引用导致内存泄露"></a>二.循环引用导致内存泄露</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1=ClassA()</span><br><span class="line">        c2=ClassA()</span><br><span class="line">        c1.t=c2</span><br><span class="line">        c2.t=c1</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line">        <span class="keyword">del</span> c2</span><br></pre></td></tr></table></figure>

<p>执行f2()，进程占用的内存会不断增大。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span> born,<span class="built_in">id</span>:<span class="number">0x237cf30</span></span><br><span class="line"><span class="built_in">object</span> born,<span class="built_in">id</span>:<span class="number">0x237cf58</span></span><br></pre></td></tr></table></figure>

<p>创建了c1，c2后，<code>0x237cf30</code>（c1对应的内存，记为内存1）,<code>0x237cf58</code>（c2对应的内存，记为内存2）这两块内存的引用计数都是1，执行<code>c1.t=c2</code>和<code>c2.t=c1</code>后，这两块内存的引用计数变成2.<br>在del c1后，内存1的对象的引用计数变为1，由于不是为0，所以内存1的对象不会被销毁，所以内存2的对象的引用数依然是2，在del c2后，同理，内存1的对象，内存2的对象的引用数都是1。<br>虽然它们两个的对象都是可以被销毁的，但是由于<strong>循环引用</strong>，导致垃圾回收器都不会回收它们，所以就会导致内存泄露。</p>
<h2 id="三-垃圾回收"><a href="#三-垃圾回收" class="headerlink" title="三.垃圾回收"></a>三.垃圾回收</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">deff3():</span><br><span class="line">    <span class="comment"># print gc.collect()</span></span><br><span class="line">    c1=ClassA()</span><br><span class="line">    c2=ClassA()</span><br><span class="line">    c1.t=c2</span><br><span class="line">    c2.t=c1</span><br><span class="line">    <span class="keyword">del</span> c1</span><br><span class="line">    <span class="keyword">del</span> c2</span><br><span class="line">    <span class="built_in">print</span> gc.garbage</span><br><span class="line">    <span class="built_in">print</span> gc.collect() <span class="comment">#显式执行垃圾回收</span></span><br><span class="line">    <span class="built_in">print</span> gc.garbage</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    gc.set_debug(gc.DEBUG_LEAK) <span class="comment">#设置gc模块的日志</span></span><br><span class="line">    f3()</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gc: uncollectable &lt;ClassA instance at <span class="number">0230E918</span>&gt;</span><br><span class="line">gc: uncollectable &lt;ClassA instance at <span class="number">0230E940</span>&gt;</span><br><span class="line">gc: uncollectable &lt;<span class="built_in">dict</span> 0230B810&gt;</span><br><span class="line">gc: uncollectable &lt;<span class="built_in">dict</span> 02301ED0&gt;</span><br><span class="line"><span class="built_in">object</span> born,<span class="built_in">id</span>:<span class="number">0x230e918</span></span><br><span class="line"><span class="built_in">object</span> born,<span class="built_in">id</span>:<span class="number">0x230e940</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<ul>
<li>垃圾回收后的对象会放在gc.garbage列表里面</li>
<li><code>gc.collect()</code>会返回<strong>不可达</strong>的对象数目，4等于两个对象以及它们对应的dict</li>
<li>有三种情况会触发垃圾回收：<br>1.调用<code>gc.collect()</code>,<br>2.当gc模块的计数器达到阀值的时候。<br>3.程序退出的时候</li>
</ul>
<h2 id="四-gc模块常用功能解析"><a href="#四-gc模块常用功能解析" class="headerlink" title="四.gc模块常用功能解析"></a>四.gc模块常用功能解析</h2><p><a href="https://docs.python.org/2/library/gc.html">Garbage Collector interface</a><br>gc模块提供一个接口给开发者设置垃圾回收的选项。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。</p>
<h3 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a>常用函数：</h3><ol>
<li>gc.set_debug(flags)<br>设置gc的debug日志，一般设置为gc.DEBUG_LEAK</li>
<li>gc.collect([generation])<br>显式进行垃圾回收，可以输入参数，0代表只检查第一代的对象，1代表检查一，二代的对象，2代表检查一，二，三代的对象，如果不传参数，执行一个full collection，也就是等于传2。<br>返回不可达（unreachable objects）对象的数目</li>
<li>gc.set_threshold(threshold0[, threshold1[, threshold2])<br>设置自动执行垃圾回收的频率。</li>
<li>gc.get_count()<br>获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表</li>
<li></li>
</ol>
<h3 id="gc模块的自动垃圾回收机制"><a href="#gc模块的自动垃圾回收机制" class="headerlink" title="gc模块的自动垃圾回收机制"></a>gc模块的自动垃圾回收机制</h3><p>必须要import gc模块，并且is_enable()&#x3D;True才会启动自动垃圾回收。<br>这个机制的主要作用就是发现并处理不可达的垃圾对象。<br>垃圾回收&#x3D;垃圾检查+垃圾回收<br>在Python中，采用分代收集的方法。把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，改对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中。</p>
<p>gc模块里面会有一个长度为3的列表的计数器，可以通过<code>gc.get_count()</code>获取。<br>例如<code>(488,3,0)</code>，其中<code>488</code>是指距离上一次一代垃圾检查，Python分配内存的数目减去释放内存的数目，<strong>注意是内存分配，而不是引用计数的增加</strong>。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> gc.get_count()  <span class="comment"># (590, 8, 0)</span></span><br><span class="line">a = ClassA()</span><br><span class="line"><span class="built_in">print</span> gc.get_count()  <span class="comment"># (591, 8, 0)</span></span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"><span class="built_in">print</span> gc.get_count()  <span class="comment"># (590, 8, 0)</span></span><br></pre></td></tr></table></figure>

<p><code>3</code>是指距离上一次二代垃圾检查，一代垃圾检查的次数，同理，<code>0</code>是指距离上一次三代垃圾检查，二代垃圾检查的次数。</p>
<p>gc模快有一个自动垃圾回收的阀值，即通过<code>gc.get_threshold</code>函数获取到的长度为3的元组，例如<code>(700,10,10)</code><br>每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目，如果是，就会执行对应的代数的垃圾检查，然后重置计数器<br>例如，假设阀值是<code>(700,10,10)</code>：</p>
<ul>
<li>当计数器从<code>(699,3,0)</code>增加到<code>(700,3,0)</code>，gc模块就会执行<code>gc.collect(0)</code>,即检查一代对象的垃圾，并重置计数器为<code>(0,4,0)</code></li>
<li>当计数器从<code>(699,9,0)</code>增加到<code>(700,9,0)</code>，gc模块就会执行<code>gc.collect(1)</code>,即检查一、二代对象的垃圾，并重置计数器为<code>(0,0,1)</code></li>
<li>当计数器从<code>(699,9,9)</code>增加到<code>(700,9,9)</code>，gc模块就会执行<code>gc.collect(2)</code>,即检查一、二、三代对象的垃圾，并重置计数器为<code>(0,0,0)</code></li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>如果循环引用中，两个对象都定义了<code>__del__</code>方法，gc模块不会销毁这些不可达对象，因为gc模块不知道应该先调用哪个对象的<code>__del__</code>方法，所以为了安全起见，gc模块会把对象放到gc.garbage中，但是不会销毁对象。</li>
</ol>
<h2 id="五-应用"><a href="#五-应用" class="headerlink" title="五.应用"></a>五.应用</h2><ol>
<li>项目中避免循环引用</li>
<li>引入gc模块，启动gc模块的自动清理循环引用的对象机制</li>
<li>由于分代收集，所以把需要长期使用的变量集中管理，并尽快移到二代以后，减少GC检查时的消耗</li>
<li>gc模块唯一处理不了的是循环引用的类都有<code>__del__</code>方法，所以项目中要避免定义_<code>_del__</code>方法，如果一定要使用该方法，同时导致了循环引用，需要代码显式调用<code>gc.garbage</code>里面的对象的<code>__del__</code>来打破僵局</li>
</ol>
<p>参考：</p>
<p><a href="http://www.cnblogs.com/CBDoctor/p/3781078.html">python的内存管理机制</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>EChart.js（前端数据可视化）实现外汇实时走势</title>
    <url>/2020/11/26/EChart-js%EF%BC%88%E5%89%8D%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%89%E5%AE%9E%E7%8E%B0%E5%A4%96%E6%B1%87%E5%AE%9E%E6%97%B6%E8%B5%B0%E5%8A%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>你可以通过以下几种方式获取 Apache ECharts (incubating)TM。</p>
<ul>
<li>从 <a href="https://echarts.apache.org/zh/download.html">Apache ECharts (incubating) 官网下载界面</a> 获取官方源码包后构建。</li>
<li>在 ECharts 的 <a href="https://github.com/apache/incubator-echarts/releases">GitHub</a> 获取。</li>
<li>通过 npm 获取 echarts，<code>npm install echarts --save</code>，详见“<a href="https://echarts.apache.org/zh/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts">在 webpack 中使用 echarts</a>”</li>
<li>通过 <a href="https://www.jsdelivr.com/package/npm/echarts">jsDelivr</a> 等 CDN 引入</li>
</ul>
<span id="more"></span>
<h2 id="引入-ECharts"><a href="#引入-ECharts" class="headerlink" title="引入 ECharts"></a>引入 ECharts</h2><p>通过标签方式直接引入构建好的 echarts 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;!-- 引入 ECharts 文件 --&gt;</span><br><span class="line">    &lt;script src=&quot;echarts.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="绘制一个简单的图表"><a href="#绘制一个简单的图表" class="headerlink" title="绘制一个简单的图表"></a>绘制一个简单的图表</h2><p>在绘图前我们需要为 ECharts 准备一个具备高宽的 DOM 容器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span><br><span class="line">    &lt;div id=&quot;main&quot; style=&quot;width: 600px;height:400px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>然后就可以通过 <a href="https://echarts.apache.org/zh/api.html#echarts.init">echarts.init</a> 方法初始化一个 echarts 实例并通过 <a href="https://echarts.apache.org/zh/api.html#echartsInstance.setOption">setOption</a> 方法生成一个简单的柱状图，下面是完整代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ECharts<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 引入 echarts.js --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 指定图表的配置项和数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> option = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">title</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">tooltip</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">legend</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>:[<span class="string">&#x27;销量&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">xAxis</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>: [<span class="string">&quot;衬衫&quot;</span>,<span class="string">&quot;羊毛衫&quot;</span>,<span class="string">&quot;雪纺衫&quot;</span>,<span class="string">&quot;裤子&quot;</span>,<span class="string">&quot;高跟鞋&quot;</span>,<span class="string">&quot;袜子&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">yAxis</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">series</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        myChart.<span class="title function_">setOption</span>(option);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>这样你的第一个图表就诞生了！</p>
<p> <img src="https://img-blog.csdnimg.cn/20201126230436169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0sxMTYzMzE3NTE1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="爬取数据，并使用websocket连接-发送数据到前端"><a href="#爬取数据，并使用websocket连接-发送数据到前端" class="headerlink" title="爬取数据，并使用websocket连接,发送数据到前端"></a>爬取数据，并使用websocket连接,发送数据到前端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dwebsocket.decorators <span class="keyword">import</span> accept_websocket</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exchange</span>():</span><br><span class="line">	url = <span class="string">&#x27;http://fx.cmbchina.com/hq/&#x27;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># ua伪装</span></span><br><span class="line"></span><br><span class="line">	header = &#123;</span><br><span class="line"></span><br><span class="line">		<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36&quot;</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	res = requests.get(url=url,headers=header)</span><br><span class="line"></span><br><span class="line">	tree = etree.HTML(res.text)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># xpath定位，爬取数据</span></span><br><span class="line"></span><br><span class="line">	tr_list = tree.xpath(<span class="string">&#x27;//div[@id=&quot;realRateInfo&quot;]/table/tr[position()&gt;1]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	data=&#123;</span><br><span class="line">		<span class="string">&#x27;Time&#x27;</span>: tr_list[<span class="number">2</span>].xpath(<span class="string">&quot;./td[8]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&quot;</span>).strip(),</span><br><span class="line"></span><br><span class="line">		<span class="string">&#x27;HongKong&#x27;</span>:<span class="built_in">format</span>(<span class="built_in">float</span>(tr_list[<span class="number">0</span>].xpath(<span class="string">&quot;./td[2]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip())/<span class="built_in">float</span>(tr_list[<span class="number">0</span>].xpath(<span class="string">&quot;./td[4]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip()),<span class="string">&quot;.4f&quot;</span>),</span><br><span class="line"></span><br><span class="line">		<span class="string">&#x27;NewZealand&#x27;</span>: <span class="built_in">format</span>(<span class="built_in">float</span>(tr_list[<span class="number">1</span>].xpath(<span class="string">&quot;./td[2]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip())/<span class="built_in">float</span>(tr_list[<span class="number">1</span>].xpath(<span class="string">&quot;./td[4]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip()),<span class="string">&quot;.4f&quot;</span>),</span><br><span class="line"></span><br><span class="line">		<span class="string">&#x27;Australia&#x27;</span>: <span class="built_in">format</span>(<span class="built_in">float</span>(tr_list[<span class="number">2</span>].xpath(<span class="string">&quot;./td[2]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip())/<span class="built_in">float</span>(tr_list[<span class="number">2</span>].xpath(<span class="string">&quot;./td[4]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip()),<span class="string">&quot;.4f&quot;</span>),</span><br><span class="line"></span><br><span class="line">		<span class="string">&#x27;USA&#x27;</span>: <span class="built_in">format</span>(<span class="built_in">float</span>(tr_list[<span class="number">3</span>].xpath(<span class="string">&quot;./td[2]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip())/<span class="built_in">float</span>(tr_list[<span class="number">3</span>].xpath(<span class="string">&quot;./td[4]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip()),<span class="string">&quot;.4f&quot;</span>),</span><br><span class="line"></span><br><span class="line">		<span class="string">&#x27;Europe&#x27;</span> : <span class="built_in">format</span>(<span class="built_in">float</span>(tr_list[<span class="number">4</span>].xpath(<span class="string">&quot;./td[2]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip())/<span class="built_in">float</span>(tr_list[<span class="number">4</span>].xpath(<span class="string">&quot;./td[4]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip()),<span class="string">&quot;.4f&quot;</span>),</span><br><span class="line"></span><br><span class="line">		<span class="string">&#x27;Canada&#x27;</span> : <span class="built_in">format</span>(<span class="built_in">float</span>(tr_list[<span class="number">5</span>].xpath(<span class="string">&quot;./td[2]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip())/<span class="built_in">float</span>(tr_list[<span class="number">5</span>].xpath(<span class="string">&quot;./td[4]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip()),<span class="string">&quot;.4f&quot;</span>),</span><br><span class="line"></span><br><span class="line">		<span class="string">&#x27;English&#x27;</span> : <span class="built_in">format</span>(<span class="built_in">float</span>(tr_list[<span class="number">6</span>].xpath(<span class="string">&quot;./td[2]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip())/<span class="built_in">float</span>(tr_list[<span class="number">6</span>].xpath(<span class="string">&quot;./td[4]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip()),<span class="string">&quot;.4f&quot;</span>),</span><br><span class="line"></span><br><span class="line">		<span class="string">&#x27;Japaense&#x27;</span> : <span class="built_in">format</span>(<span class="built_in">float</span>(tr_list[<span class="number">7</span>].xpath(<span class="string">&quot;./td[2]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip())/<span class="built_in">float</span>(tr_list[<span class="number">7</span>].xpath(<span class="string">&quot;./td[4]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip()),<span class="string">&quot;.4f&quot;</span>),</span><br><span class="line"></span><br><span class="line">		<span class="string">&#x27;Singapore&#x27;</span> : <span class="built_in">format</span>(<span class="built_in">float</span>(tr_list[<span class="number">8</span>].xpath(<span class="string">&quot;./td[2]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip())/<span class="built_in">float</span>(tr_list[<span class="number">8</span>].xpath(<span class="string">&quot;./td[4]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip()),<span class="string">&quot;.4f&quot;</span>),</span><br><span class="line"></span><br><span class="line">		<span class="string">&#x27;Switzerland&#x27;</span> : <span class="built_in">format</span>(<span class="built_in">float</span>(tr_list[<span class="number">9</span>].xpath(<span class="string">&quot;./td[2]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip())/<span class="built_in">float</span>(tr_list[<span class="number">9</span>].xpath(<span class="string">&quot;./td[4]/text()&quot;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;&quot;</span>).strip()),<span class="string">&quot;.4f&quot;</span>),</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">exchange()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器</span></span><br><span class="line">clients=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># websocket连接</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@accept_websocket</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Websocketlink</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> request.is_websocket():</span><br><span class="line"></span><br><span class="line">		key = request.session.session_key  <span class="comment"># 缓存在session中的键</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">			message = request.websocket.wait()</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> message:</span><br><span class="line"></span><br><span class="line">				clients.clear()</span><br><span class="line"></span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">				<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">					clients[<span class="built_in">str</span>(key)] = request.websocket</span><br><span class="line"></span><br><span class="line">					<span class="keyword">for</span> i <span class="keyword">in</span> clients:</span><br><span class="line">						message = exchange()</span><br><span class="line"></span><br><span class="line">						clients[i].send(json.dumps(message))</span><br><span class="line"></span><br><span class="line">					time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="K线图绘制"><a href="#K线图绘制" class="headerlink" title="K线图绘制"></a>K线图绘制</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//数组处理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">splitData</span>(<span class="params">rawData</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> datas = [];</span><br><span class="line">  <span class="keyword">var</span> times = [];</span><br><span class="line">  <span class="keyword">var</span> vols = [];</span><br><span class="line">  <span class="keyword">var</span> macds = []; <span class="keyword">var</span> difs = []; <span class="keyword">var</span> deas = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rawData.<span class="property">length</span>; i++) &#123;</span><br><span class="line">	  datas.<span class="title function_">push</span>(rawData[i]);</span><br><span class="line">	  times.<span class="title function_">push</span>(rawData[i].<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>)[<span class="number">0</span>]);</span><br><span class="line">	  vols.<span class="title function_">push</span>(rawData[i][<span class="number">4</span>]);</span><br><span class="line">	  macds.<span class="title function_">push</span>(rawData[i][<span class="number">6</span>]);</span><br><span class="line">	  difs.<span class="title function_">push</span>(rawData[i][<span class="number">7</span>]);</span><br><span class="line">	  deas.<span class="title function_">push</span>(rawData[i][<span class="number">8</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">datas</span>: datas,</span><br><span class="line">      <span class="attr">times</span>: times,</span><br><span class="line">      <span class="attr">vols</span>: vols,</span><br><span class="line">      <span class="attr">macds</span>: macds,</span><br><span class="line">      <span class="attr">difs</span>: difs,</span><br><span class="line">      <span class="attr">deas</span>: deas</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分段计算</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fenduans</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> markLineData = [];</span><br><span class="line">  <span class="keyword">var</span> idx = <span class="number">0</span>; <span class="keyword">var</span> tag = <span class="number">0</span>; <span class="keyword">var</span> vols = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">times</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">	  <span class="comment">//初始化数据</span></span><br><span class="line">      <span class="keyword">if</span>(data.<span class="property">datas</span>[i][<span class="number">5</span>] != <span class="number">0</span> &amp;&amp; tag == <span class="number">0</span>)&#123;</span><br><span class="line">          idx = i; vols = data.<span class="property">datas</span>[i][<span class="number">4</span>]; tag = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(tag == <span class="number">1</span>)&#123; vols += data.<span class="property">datas</span>[i][<span class="number">4</span>]; &#125;</span><br><span class="line">      <span class="keyword">if</span>(data.<span class="property">datas</span>[i][<span class="number">5</span>] != <span class="number">0</span> &amp;&amp; tag == <span class="number">1</span>)&#123;</span><br><span class="line">          markLineData.<span class="title function_">push</span>([&#123;</span><br><span class="line">              <span class="attr">xAxis</span>: idx,</span><br><span class="line">              <span class="attr">yAxis</span>: data.<span class="property">datas</span>[idx][<span class="number">1</span>]&gt;data.<span class="property">datas</span>[idx][<span class="number">0</span>]?(data.<span class="property">datas</span>[idx][<span class="number">3</span>]).<span class="title function_">toFixed</span>(<span class="number">2</span>):(data.<span class="property">datas</span>[idx][<span class="number">2</span>]).<span class="title function_">toFixed</span>(<span class="number">2</span>),</span><br><span class="line">              <span class="attr">value</span>: vols</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">              <span class="attr">xAxis</span>: i,</span><br><span class="line">              <span class="attr">yAxis</span>: data.<span class="property">datas</span>[i][<span class="number">1</span>]&gt;data.<span class="property">datas</span>[i][<span class="number">0</span>]?(data.<span class="property">datas</span>[i][<span class="number">3</span>]).<span class="title function_">toFixed</span>(<span class="number">2</span>):(data.<span class="property">datas</span>[i][<span class="number">2</span>]).<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line">          &#125;]);</span><br><span class="line">          idx = i; vols = data.<span class="property">datas</span>[i][<span class="number">4</span>]; tag = <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//更替数据</span></span><br><span class="line">      <span class="keyword">if</span>(tag == <span class="number">2</span>)&#123; vols += data.<span class="property">datas</span>[i][<span class="number">4</span>]; &#125;</span><br><span class="line">      <span class="keyword">if</span>(data.<span class="property">datas</span>[i][<span class="number">5</span>] != <span class="number">0</span> &amp;&amp; tag == <span class="number">2</span>)&#123;</span><br><span class="line">          markLineData.<span class="title function_">push</span>([&#123;</span><br><span class="line">              <span class="attr">xAxis</span>: idx,</span><br><span class="line">              <span class="attr">yAxis</span>: data.<span class="property">datas</span>[idx][<span class="number">1</span>]&gt;data.<span class="property">datas</span>[idx][<span class="number">0</span>]?(data.<span class="property">datas</span>[idx][<span class="number">3</span>]).<span class="title function_">toFixed</span>(<span class="number">2</span>):(data.<span class="property">datas</span>[idx][<span class="number">2</span>]).<span class="title function_">toFixed</span>(<span class="number">2</span>),</span><br><span class="line">              <span class="attr">value</span>: (vols/(i-idx+<span class="number">1</span>)).<span class="title function_">toFixed</span>(<span class="number">2</span>)+<span class="string">&#x27; M&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">              <span class="attr">xAxis</span>: i,</span><br><span class="line">              <span class="attr">yAxis</span>: data.<span class="property">datas</span>[i][<span class="number">1</span>]&gt;data.<span class="property">datas</span>[i][<span class="number">0</span>]?(data.<span class="property">datas</span>[i][<span class="number">3</span>]).<span class="title function_">toFixed</span>(<span class="number">2</span>):(data.<span class="property">datas</span>[i][<span class="number">2</span>]).<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line">          &#125;]);</span><br><span class="line">          idx = i; vols = data.<span class="property">datas</span>[i][<span class="number">4</span>];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> markLineData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MA计算公式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateMA</span>(<span class="params">dayCount</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = data.<span class="property">times</span>.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; dayCount) &#123;</span><br><span class="line">          result.<span class="title function_">push</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; dayCount; j++) &#123;</span><br><span class="line">          sum += data.<span class="property">datas</span>[i - j][<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      result.<span class="title function_">push</span>((sum / dayCount).<span class="title function_">toFixed</span>(<span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;K线周期图表(matols.com)&#x27;</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">tooltip</span>: &#123;</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span>,</span><br><span class="line">      <span class="attr">axisPointer</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">legend</span>: &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&#x27;KLine&#x27;</span>, <span class="string">&#x27;MA5&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">grid</span>: [           &#123;</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="string">&#x27;1%&#x27;</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="string">&#x27;60%&#x27;</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="string">&#x27;1%&#x27;</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&#x27;71%&#x27;</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="string">&#x27;10%&#x27;</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="string">&#x27;1%&#x27;</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&#x27;82%&#x27;</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="string">&#x27;14%&#x27;</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">xAxis</span>: [&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: data.<span class="property">times</span>,</span><br><span class="line">      <span class="attr">scale</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123; <span class="attr">onZero</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      <span class="attr">splitLine</span>: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      <span class="attr">splitNumber</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">min</span>: <span class="string">&#x27;dataMin&#x27;</span>,</span><br><span class="line">      <span class="attr">max</span>: <span class="string">&#x27;dataMax&#x27;</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">      <span class="attr">gridIndex</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">data</span>: data.<span class="property">times</span>,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">      <span class="attr">gridIndex</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">data</span>: data.<span class="property">times</span>,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">yAxis</span>: [&#123;</span><br><span class="line">      <span class="attr">scale</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">splitArea</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">      <span class="attr">gridIndex</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">splitNumber</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123;<span class="attr">onZero</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      <span class="attr">axisTick</span>: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      <span class="attr">splitLine</span>: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">	  <span class="attr">gridIndex</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">splitNumber</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123;<span class="attr">onZero</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      <span class="attr">axisTick</span>: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      <span class="attr">splitLine</span>: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">dataZoom</span>: [&#123;</span><br><span class="line">    	  <span class="attr">type</span>: <span class="string">&#x27;inside&#x27;</span>,</span><br><span class="line">          <span class="attr">xAxisIndex</span>: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">          <span class="attr">start</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">end</span>: <span class="number">100</span></span><br><span class="line">  	&#125;,&#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">xAxisIndex</span>: [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;slider&#x27;</span>,</span><br><span class="line">          <span class="attr">top</span>: <span class="string">&#x27;97%&#x27;</span>,</span><br><span class="line">          <span class="attr">start</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">end</span>: <span class="number">100</span></span><br><span class="line">  	&#125;,&#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">xAxisIndex</span>: [<span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;slider&#x27;</span>,</span><br><span class="line">      <span class="attr">start</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">end</span>: <span class="number">100</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">series</span>: [&#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;K线周期图表(matols.com)&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;candlestick&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: data.<span class="property">datas</span>,</span><br><span class="line">          <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">              <span class="attr">normal</span>: &#123;</span><br><span class="line">				  <span class="attr">color</span>: <span class="string">&#x27;#ef232a&#x27;</span>,</span><br><span class="line">			      <span class="attr">color0</span>: <span class="string">&#x27;#14b143&#x27;</span>,</span><br><span class="line">			      <span class="attr">borderColor</span>: <span class="string">&#x27;#ef232a&#x27;</span>,</span><br><span class="line">			      <span class="attr">borderColor0</span>: <span class="string">&#x27;#14b143&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">markArea</span>: &#123;</span><br><span class="line">              <span class="attr">silent</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">                  <span class="attr">normal</span>: &#123;</span><br><span class="line">                      <span class="attr">color</span>: <span class="string">&#x27;Honeydew&#x27;</span>                  </span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">data</span>: <span class="title function_">fenduans</span>()</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">markPoint</span>: &#123;</span><br><span class="line">              <span class="attr">data</span>: [</span><br><span class="line">                  &#123;<span class="attr">type</span>: <span class="string">&#x27;max&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最大值&#x27;</span>&#125;,</span><br><span class="line">                  &#123;<span class="attr">type</span>: <span class="string">&#x27;min&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;最小值&#x27;</span>&#125;</span><br><span class="line">              ]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">markLine</span>: &#123;</span><br><span class="line">              <span class="attr">label</span>: &#123;</span><br><span class="line">                  <span class="attr">normal</span>: &#123;</span><br><span class="line">                      <span class="attr">position</span>: <span class="string">&#x27;middle&#x27;</span>,</span><br><span class="line">                      <span class="attr">textStyle</span>:&#123;<span class="attr">color</span>:<span class="string">&#x27;Blue&#x27;</span>,<span class="attr">fontSize</span>: <span class="number">15</span>&#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">data</span>: <span class="title function_">fenduans</span>(),</span><br><span class="line">              <span class="attr">symbol</span>: [<span class="string">&#x27;circle&#x27;</span>, <span class="string">&#x27;none&#x27;</span>]</span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;MA5&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: <span class="title function_">calculateMA</span>(<span class="number">5</span>),</span><br><span class="line">          <span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">              <span class="attr">normal</span>: &#123;</span><br><span class="line">                  <span class="attr">opacity</span>: <span class="number">0.5</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;Volumn&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">          <span class="attr">xAxisIndex</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">yAxisIndex</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">data</span>: data.<span class="property">vols</span>,</span><br><span class="line">          <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">	    	  <span class="attr">normal</span>: &#123;</span><br><span class="line">		          <span class="attr">color</span>: <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">		              <span class="keyword">var</span> colorList;</span><br><span class="line">		              <span class="keyword">if</span> (data.<span class="property">datas</span>[params.<span class="property">dataIndex</span>][<span class="number">1</span>]&gt;data.<span class="property">datas</span>[params.<span class="property">dataIndex</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">		                  colorList = <span class="string">&#x27;#ef232a&#x27;</span>;</span><br><span class="line">		              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		                  colorList = <span class="string">&#x27;#14b143&#x27;</span>;</span><br><span class="line">		              &#125;</span><br><span class="line">		              <span class="keyword">return</span> colorList;</span><br><span class="line">		          &#125;,</span><br><span class="line">		      &#125;</span><br><span class="line">	      &#125;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;MACD&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">          <span class="attr">xAxisIndex</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">yAxisIndex</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">data</span>: data.<span class="property">macds</span>,</span><br><span class="line">          <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">	    	  <span class="attr">normal</span>: &#123;</span><br><span class="line">		          <span class="attr">color</span>: <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">		              <span class="keyword">var</span> colorList;</span><br><span class="line">		              <span class="keyword">if</span> (params.<span class="property">data</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		                  colorList = <span class="string">&#x27;#ef232a&#x27;</span>;</span><br><span class="line">		              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		                  colorList = <span class="string">&#x27;#14b143&#x27;</span>;</span><br><span class="line">		              &#125;</span><br><span class="line">		              <span class="keyword">return</span> colorList;</span><br><span class="line">		          &#125;,</span><br><span class="line">		      &#125;</span><br><span class="line">	      &#125;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;DIF&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">          <span class="attr">xAxisIndex</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">yAxisIndex</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">data</span>: data.<span class="property">difs</span></span><br><span class="line">      &#125;,&#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;DEA&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">          <span class="attr">xAxisIndex</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">yAxisIndex</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">data</span>: data.<span class="property">deas</span></span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;	</span><br></pre></td></tr></table></figure>

<h2 id="设X轴、Y轴接收后端爬取的数据并展示"><a href="#设X轴、Y轴接收后端爬取的数据并展示" class="headerlink" title="设X轴、Y轴接收后端爬取的数据并展示"></a>设X轴、Y轴接收后端爬取的数据并展示</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mychart&quot;</span> <span class="attr">class</span>=<span class="string">&quot;chart&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;width: &#x27;100%&#x27;, height: &#x27;500px&#x27;&#125;&quot;</span> <span class="attr">:option</span>=<span class="string">&#x27;exchange&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;demo2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// x轴</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Time</span>: [], </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// y轴</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">HongKong</span>: [], </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">NewZealand</span>: [], </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">USA</span>: [], </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Europe</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Canada</span>: [], </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">English</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Japaense</span>: [], </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Singapore</span>: [], </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Switzerland</span>: [], </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Australia</span>:[]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  		<span class="title class_">Time</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  			<span class="variable language_">this</span>.<span class="title function_">exchange</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  		&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">this</span>.<span class="title function_">exchange</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">this</span>.<span class="title function_">websocketinit</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">exchange</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> option = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">title</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">text</span>: <span class="string">&#x27;外汇实时汇率&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">tooltip</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">legend</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">data</span>:[ <span class="string">&#x27;新西兰元&#x27;</span>, <span class="string">&#x27;澳大利亚元&#x27;</span>, <span class="string">&#x27;美元&#x27;</span>, <span class="string">&#x27;欧元&#x27;</span>,<span class="string">&quot;加拿大元&quot;</span>,<span class="string">&quot;英镑&quot;</span>,<span class="string">&quot;新加坡元&quot;</span>,<span class="string">&quot;瑞士法郎&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">grid</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">right</span>: <span class="string">&#x27;4%&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">bottom</span>: <span class="string">&#x27;3%&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">containLabel</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// x轴</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">xAxis</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">Time</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// y轴</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">yAxis</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">series</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;新西兰元&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">NewZealand</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;澳大利亚元&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">Australia</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;美元&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">stack</span>: <span class="string">&#x27;总量&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">USA</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;欧元&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">Europe</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;加拿大元&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">Canada</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;新加坡元&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">Singapore</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;瑞士法郎&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">Switzerland</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">mychart</span> = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;mychart&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">mychart</span>.<span class="title function_">setOption</span>(option)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">//连接</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">websocketinit</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//判断浏览器是否支持websocket</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">if</span>(<span class="string">&#x27;WebSocket&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;支持&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//生成websocket连接</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://192.168.1.171:8000/websocketlink/&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//发送链接请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ws.<span class="title function_">send</span>(<span class="string">&#x27;test&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//发送消息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ws.<span class="property">onmessage</span> =  <span class="function">(<span class="params">evt</span>) =&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//将获取信息打印</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(evt.<span class="property">data</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> msg =<span class="title class_">JSON</span>.<span class="title function_">parse</span>(evt.<span class="property">data</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">Time</span>.<span class="title function_">push</span>(msg.<span class="property">Time</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Time&#x27;</span>,<span class="variable language_">this</span>.<span class="property">Time</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">HongKong</span>.<span class="title function_">push</span>(msg.<span class="property">HongKong</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HongKong&#x27;</span>,<span class="variable language_">this</span>.<span class="property">HongKong</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">NewZealand</span>.<span class="title function_">push</span>(msg.<span class="property">NewZealand</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;NewZealand&#x27;</span>,<span class="variable language_">this</span>.<span class="property">NewZealand</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">Australia</span>.<span class="title function_">push</span>(msg.<span class="property">Australia</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Australia&#x27;</span>,<span class="variable language_">this</span>.<span class="property">Australia</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">USA</span>.<span class="title function_">push</span>(msg.<span class="property">USA</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;USA&#x27;</span>,<span class="variable language_">this</span>.<span class="property">USA</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">Europe</span>.<span class="title function_">push</span>(msg.<span class="property">Europe</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Europe&#x27;</span>,<span class="variable language_">this</span>.<span class="property">Europe</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">Canada</span>.<span class="title function_">push</span>(msg.<span class="property">Canada</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Canada&#x27;</span>,<span class="variable language_">this</span>.<span class="property">Canada</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">Japaense</span>.<span class="title function_">push</span>(msg.<span class="property">Japaense</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Japaense&#x27;</span>,<span class="variable language_">this</span>.<span class="property">Japaense</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ws.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误信息为&#x27;</span>,e)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//断开连接</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;链接已关闭&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Python匿名函数与递归函数</title>
    <url>/2017/10/24/Python%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E4%B8%8E%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="1-什么是递归函数"><a href="#1-什么是递归函数" class="headerlink" title="1.什么是递归函数"></a><strong>1.什么是递归函数</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>)</span><br><span class="line">n = <span class="number">20</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(fib(i), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 </span></span><br></pre></td></tr></table></figure>
<ul>
<li>调用自己本身的函数叫递归函数；<span id="more"></span></li>
</ul>
<h4 id="2-斐波那契数列"><a href="#2-斐波那契数列" class="headerlink" title="2.斐波那契数列"></a><strong>2.斐波那契数列</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pre = <span class="number">1</span></span><br><span class="line"><span class="built_in">next</span> = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(pre, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    pre, <span class="built_in">next</span> = <span class="built_in">next</span>, pre+<span class="built_in">next</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：1 1 2 3 5 8 13 21 34 55 89 144 </span></span><br></pre></td></tr></table></figure>

<ul>
<li>类似：1, 1, 2, 3, 5, 8, 13, 21, 34, 55…..的一个数列；</li>
<li>数列的前两项都是1，第三项开始，每一项都是前两项之和；</li>
<li>F1 &#x3D; 1， F2 &#x3D; 1， F(n) &#x3D; F(n-1) + F(n-2), 且递归一定需要有结束条件；</li>
</ul>
<h4 id="3-递归函数的特性"><a href="#3-递归函数的特性" class="headerlink" title="3.递归函数的特性"></a><strong>3.递归函数的特性</strong></h4><ul>
<li>递归一定需要有结束条件；</li>
<li>每次进入更深一层递归时，问题规模比上一次递归都应有所减少；</li>
<li>通常前一次递归的输出就作为后一次递归的输入；</li>
<li>递归效率不高，递归层次过多会导致栈溢出；</li>
</ul>
<h4 id="4-匿名函数"><a href="#4-匿名函数" class="headerlink" title="4.匿名函数"></a><strong>4.匿名函数</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义匿名函数</span></span><br><span class="line">fn = <span class="keyword">lambda</span> x: x+<span class="number">1</span></span><br><span class="line">y = fn(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># 输出：4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#匿名函数自调用</span></span><br><span class="line">(<span class="keyword">lambda</span> x: <span class="built_in">print</span>(x+<span class="number">2</span>))(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#输出：6</span></span><br></pre></td></tr></table></figure>

<ul>
<li>没有名字的函数就是匿名函数，并且因为匿名函数没有名字，所以不必担心函数名冲突；</li>
<li>在Python中，借助lambda表达式构建匿名函数，关键字lambda表示匿名函数，冒号前面的变量名表示函数参数；</li>
<li>匿名函数可以实现自调用（也就是自己调用自己）；</li>
<li>如何简化匿名函数的代码；</li>
</ul>
<h4 id="5-高阶函数"><a href="#5-高阶函数" class="headerlink" title="5.高阶函数"></a><strong>5.高阶函数</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匿名函数在高阶函数中的使用</span></span><br><span class="line">y = [x <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="keyword">lambda</span> *args: <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x + <span class="number">10</span>, args))(*<span class="built_in">range</span>(<span class="number">10</span>))]</span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment">#输出：[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上面的列表解析式进行拆分</span></span><br><span class="line">fn = <span class="keyword">lambda</span> x: x + <span class="number">10</span></span><br><span class="line">w = (<span class="keyword">lambda</span> *args: <span class="built_in">map</span>(fn, args))(*<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">y = [x <span class="keyword">for</span> x <span class="keyword">in</span> w]</span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment">#输出：[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>高阶函数就是把函数当成参数传递的一种函数；</li>
<li>现在的课程还没有讲到，以后的课程会系统讲解；</li>
<li>需要特别注意一下匿名函数在高阶函数map( )函数中的使用场景；</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署web应用(django)</title>
    <url>/2020/11/22/Docker%E9%83%A8%E7%BD%B2web%E5%BA%94%E7%94%A8-django/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="Docker的简介"><a href="#Docker的简介" class="headerlink" title="Docker的简介"></a>Docker的简介</h2><p>1.docker定义:docker是一个用来装应用的容器，就像杯子可以装水，笔筒可以装笔，书包可以放书一样。你可以把“Hello World！”放到docker中，也可以把网站放到docker中，你可以把任何你想到的程序放到docker中。</p>
<span id="more"></span>

<p>2.docker思想：</p>
<p>（1）集装箱</p>
<p>（2）标准化 （运输方式、存储方式、API接口）</p>
<p>运输方式（docker鲸鱼负责运输） </p>
<p>存储方式（不用关心存在哪，存在哪个盘） </p>
<p>API接口的标准化：Docker提供了一系列的RESTFUL API接口，包含了对Docker也就是对应用的控制，其中包括停止 查看 删除等等</p>
<p>（3）隔离：最底层的技术实际上是一种linux的一种内核的限制机制，叫做LXC，LXC是一种轻量级的容器虚拟化技术，最大效率的隔离了进程和资源，通过cgroup  namespace等限制隔离进程组所使用的物理资源，如CPU  I&#x2F;O  Memory等等</p>
<p>3、docker解决的问题</p>
<p>（1）docker解决了运行环境不一致带来的问题 </p>
<p>（2）docker隔离性，每台服务器相互隔离，互不影响，可以保证自己运行的程序不受其他程序的影响。</p>
<p>（3）一键化部署服务器（例如双11，服务器数量。。。），docker的标准化让快速扩展，弹性伸缩变得简单。</p>
<blockquote>
<p>本次我们将在Win10环境下利用Docker容器技术来对前后端分离项目Django+Vue.js进行打包，分别定制化对应的项目镜像，应对快速部署以及高扩展的需求 </p>
</blockquote>
<h2 id="Dockerfile部署Web项目"><a href="#Dockerfile部署Web项目" class="headerlink" title="Dockerfile部署Web项目"></a>Dockerfile部署Web项目</h2><h3 id="Django项目配置"><a href="#Django项目配置" class="headerlink" title="Django项目配置"></a>Django项目配置</h3><p>先在宿主机上安装gunicorn,容器内采用异步的方式来启动Django</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install gunicorn gevent</span><br></pre></td></tr></table></figure>

<p>settings.py对应的应用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"><span class="comment"># 所有的应用</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;myapp&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dwebsocket&#x27;</span>, <span class="comment"># 外部支持webscoket</span></span><br><span class="line">    <span class="string">&#x27;gunicorn&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在项目的根目录下编写gunicorn的配置文件.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line">bind = <span class="string">&quot;0.0.0.0:8000&quot;</span>   <span class="comment">#绑定的ip与端口</span></span><br><span class="line">workers = <span class="number">1</span>                <span class="comment">#进程数</span></span><br></pre></td></tr></table></figure>

<p>接下来导入项目依赖的包</p>
<blockquote>
<p>在项目部署到服务器上的时候，我们有时候不得不面临需要将项目依赖的包一个个再安装的窘境。 </p>
</blockquote>
<p>在项目的根目录中使用终端执行命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt 	<span class="comment">#requirements.txt只是个名字可以随便起，一般默认为requirements.txt</span></span><br></pre></td></tr></table></figure>

<p>会在项目的根目录中得到一个requirements.text文件记录着所有的依赖包。</p>
<p><img src="https://img-blog.csdnimg.cn/20201122171436152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0sxMTYzMzE3NTE1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">FROM python:<span class="number">3.7</span>					   <span class="comment"># 拉取python基础镜像</span></span><br><span class="line">WORKDIR /Project/mydjango			<span class="comment"># 当前工作的项目</span></span><br><span class="line"></span><br><span class="line">COPY ./nltk_data  /root/nltk_data    <span class="comment"># copy需要两个参数 中间需要两个空格</span></span><br><span class="line"></span><br><span class="line">COPY requirements.txt ./			<span class="comment"># 在同级目录下添加依赖包</span></span><br><span class="line">RUN pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple		<span class="comment">#执行安装命令并使用清华源镜像</span></span><br><span class="line"></span><br><span class="line">COPY . .</span><br><span class="line">ENV LANG C.UTF-<span class="number">8</span>		  </span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;mydjango.wsgi:application&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;./gunicorn.conf.py&quot;</span>]			<span class="comment">#容器启动时所要执行的命令</span></span><br></pre></td></tr></table></figure>

<h3 id="编译docker镜像"><a href="#编译docker镜像" class="headerlink" title="编译docker镜像"></a>编译docker镜像</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在docker中mydjango根目录下执行命令</span></span><br><span class="line">docker build -t <span class="string">&#x27;mydjango&#x27;</span> .</span><br></pre></td></tr></table></figure>

<p>开始打包;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">86153</span>@steven MINGW64 /d/shixun1/wpro/mydjango (master)</span><br><span class="line">$ docker build -t <span class="string">&#x27;mydjango&#x27;</span> .</span><br><span class="line">Sending build context to Docker daemon  <span class="number">17.57</span>MB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">7</span> : FROM python:<span class="number">3.7</span></span><br><span class="line"> ---&gt; 5b86e11778a2</span><br><span class="line">Step <span class="number">2</span>/<span class="number">7</span> : WORKDIR /Project/mydjango</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 72ebab5770a2</span><br><span class="line">Step <span class="number">3</span>/<span class="number">7</span> : COPY requirements.txt ./</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; b888452d1cad</span><br><span class="line">Step <span class="number">4</span>/<span class="number">7</span> : RUN pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; a576113cff5a</span><br><span class="line">Step <span class="number">5</span>/<span class="number">7</span> : COPY . .</span><br><span class="line"> ---&gt; 5c5247d5a743</span><br><span class="line">Step <span class="number">6</span>/<span class="number">7</span> : ENV LANG C.UTF-<span class="number">8</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> af84623622a6</span><br><span class="line">Removing intermediate container af84623622a6</span><br><span class="line"> ---&gt; f3d876487dab</span><br><span class="line">Step <span class="number">7</span>/<span class="number">7</span> : CMD [<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;mydjango.wsgi:application&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;./gunicorn.conf.py&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> d9392807ae77</span><br><span class="line">Removing intermediate container d9392807ae77</span><br><span class="line"> ---&gt; c3ffb74ae263</span><br><span class="line">Successfully built c3ffb74ae263</span><br><span class="line">Successfully tagged mydjango:latest</span><br><span class="line">SECURITY WARNING: You are building a Docker image <span class="keyword">from</span> Windows against a non-Windows Docker host. All files <span class="keyword">and</span> directories added to build context will have <span class="string">&#x27;-rwxr-xr-x&#x27;</span> permissions. It <span class="keyword">is</span> recommended to double check <span class="keyword">and</span> reset permissions <span class="keyword">for</span> sensitive files <span class="keyword">and</span> directories.</span><br></pre></td></tr></table></figure>

<p> &gt;  第一次打包编译的时候，可能中途遇到网络错误导致的失败，反复执行打包命令即可;</p>
<p>打包完成之后，运行命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p> 可以看到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">86153</span>@steven MINGW64 /d/shixun1/wpro/mydjango (master)</span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line"></span><br><span class="line">mydjango                   latest              3aa7fca13b2a        <span class="number">14</span> hours ago        <span class="number">2.87</span>GB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker run -it --rm -p <span class="number">8081</span>:<span class="number">8000</span> 3aa7f		<span class="comment"># 3aa7f为mydjango的容器id</span></span><br></pre></td></tr></table></figure>

<p>这里我们用端口映射技术将宿主机的8001端口映射到容器内的8000端口，</p>
<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>访问http:&#x2F;&#x2F;容器ip:8001</p>
<p><img src="https://img-blog.csdnimg.cn/20201122173923982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0sxMTYzMzE3NTE1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="vue相关配置"><a href="#vue相关配置" class="headerlink" title="vue相关配置"></a>vue相关配置</h3><p>首先打开vue项目的打包配置文件config&#x2F;index.js: </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="comment">// Template for index.html</span></span><br><span class="line">    <span class="attr">index</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../dist/index.html&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Paths</span></span><br><span class="line">    <span class="attr">assetsRoot</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">    <span class="attr">assetsSubDirectory</span>: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">    <span class="attr">assetsPublicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Source Maps</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">productionSourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// https://webpack.js.org/configuration/devtool/#production</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;#source-map&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Gzip off by default as many popular static hosts such as</span></span><br><span class="line">    <span class="comment">// Surge or Netlify already gzip all static assets for you.</span></span><br><span class="line">    <span class="comment">// Before setting to `true`, make sure to:</span></span><br><span class="line">    <span class="comment">// npm install --save-dev compression-webpack-plugin</span></span><br><span class="line">    <span class="attr">productionGzip</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">productionGzipExtensions</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Run the build command with an extra argument to</span></span><br><span class="line">    <span class="comment">// View the bundle analyzer report after build finishes:</span></span><br><span class="line">    <span class="comment">// `npm run build --report`</span></span><br><span class="line">    <span class="comment">// Set to `true` or `false` to always turn it on or off</span></span><br><span class="line">    <span class="attr">bundleAnalyzerReport</span>: process.<span class="property">env</span>.<span class="property">npm_config_report</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将打包目录改成相对路径，同时注意路由的配置，如果曾经修改为history模式记得改回hash： </p>
<p>hash利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。（需要特定浏览器支持）这两个方法应用于浏览器的历史记录栈，在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 URL，但浏览器不会立即向后端发送请求。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>:routes,</span><br><span class="line">  <span class="comment">//mode:&#x27;history&#x27;   /*hash*/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="编写Dockerfile-1"><a href="#编写Dockerfile-1" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h3><p>在项目的根目录下编写Dockerfile文件:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">FROM node:lts-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># install simple http server for serving static content</span></span><br><span class="line">RUN npm install -g http-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># make the &#x27;app&#x27; folder the current working directory</span></span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy both &#x27;package.json&#x27; and &#x27;package-lock.json&#x27; (if available)</span></span><br><span class="line">COPY package*.json ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># install project dependencies</span></span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy project files and folders to the current working directory (i.e. &#x27;app&#x27; folder)</span></span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"><span class="comment"># build app for production with minification</span></span><br><span class="line">RUN npm run build</span><br><span class="line"></span><br><span class="line">EXPOSE <span class="number">8080</span></span><br><span class="line">CMD [ <span class="string">&quot;http-server&quot;</span>, <span class="string">&quot;dist&quot;</span> ]</span><br></pre></td></tr></table></figure>

<h3 id="编译docker镜像-1"><a href="#编译docker镜像-1" class="headerlink" title="编译docker镜像"></a>编译docker镜像</h3><p>进入项目的根目录，执行打包命令:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在docker中myvue根目录下执行命令</span></span><br><span class="line">docker build -t myvue .</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">86153</span>@steven MINGW64 /d/shixun1/wpro/myvue (master)</span><br><span class="line">$ docker build -t myvue .</span><br><span class="line">Sending build context to Docker daemon  <span class="number">202.1</span>MB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">9</span> : FROM node:lts-alpine</span><br><span class="line">lts-alpine: Pulling <span class="keyword">from</span> library/node</span><br><span class="line">cbdbe7a5bc2a: Pull complete</span><br><span class="line">4c504479294d: Pull complete</span><br><span class="line">1e557b93d557: Pull complete</span><br><span class="line"><span class="number">227291017118</span>: Pull complete</span><br><span class="line">Digest: sha256:5a940b79d5655cc688cfb319bd4d0f18565bc732ae19fab6106daaa72aeb7a63</span><br><span class="line">Removing intermediate container 5317abe3649b</span><br><span class="line"> ---&gt; 2ddb8a0e3225</span><br><span class="line">Successfully built 2ddb8a0e3225</span><br><span class="line">Successfully tagged myvue:latest</span><br><span class="line">SECURITY WARNING: You are building a Docker image <span class="keyword">from</span> Windows against a non-Windows Docker host. All files <span class="keyword">and</span> directories added to build context will have <span class="string">&#x27;-rwxr-xr-x&#x27;</span> permissions. It <span class="keyword">is</span> recommended to double check <span class="keyword">and</span> reset permissions <span class="keyword">for</span> sensitive files <span class="keyword">and</span> directories.</span><br></pre></td></tr></table></figure>

<p>系统会自动根据脚本进行安装依赖，第一次也需要等待一段时间。</p>
<p> 打包完成后，执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>可以看到前端镜像的体积要小一点:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">86153</span>@steven MINGW64 /d/shixun1/wpro/myvue (master)</span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">myvue               latest              917d1c69f10f        <span class="number">23</span> hours ago        539MB</span><br></pre></td></tr></table></figure>

<h3 id="运行容器-1"><a href="#运行容器-1" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker run -it --rm -p <span class="number">8082</span>:<span class="number">8080</span> myvue</span><br></pre></td></tr></table></figure>

<h3 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h3><p>访问http:&#x2F;&#x2F;容器ip:8082即可</p>
<!-- more -->



]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习路线分享实现快速排序算法</title>
    <url>/2018/11/24/Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%88%86%E4%BA%AB%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="Python学习路线分享实现快速排序算法"><a href="#Python学习路线分享实现快速排序算法" class="headerlink" title="Python学习路线分享实现快速排序算法"></a>Python学习路线分享实现快速排序算法</h1><p>　　好程序员Python学习路线分享实现快速排序算法快速排序算法是一种基于交换的高效的排序算法，由C.R.A.Hoare于1962年提出，是一种划分交换排序。它采用了一种分治的策略，通常称其为分治法(Divide and conquer algorithm)。</p>
<span id="more"></span>
<p>分治法的基本思想</p>
<p>将原问题分解为若干个规模更小但结构与原问题相似的子问题。递归地解这些子问题，然后将这些子问题的解组合为原问题的解。</p>
<p>快速排序的基本思想</p>
<ul>
<li>先找到一个基准点（一般指数组的中部），然后数组被该基准点分为两部分，依次与该基准点数据比较，如果比它小，放左边；反之，放右边。</li>
<li>左右分别用一个空数组去存储比较后的数据。</li>
<li>最后递归执行上述操作，直到数组长度 &lt;&#x3D; 1;</li>
</ul>
<p>代码实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">lists, left, right</span>):</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;快速排序&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 跳出递归判断</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> left &gt;= right:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lists</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择参考点，该调整范围的第1个值</span></span><br><span class="line"></span><br><span class="line">    key = lists[left]</span><br><span class="line"></span><br><span class="line">    low = left  </span><br><span class="line"></span><br><span class="line">    high = right</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环判断直到遍历全部</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从右边开始查找大于参考点的值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lists[right] &gt;= key:</span><br><span class="line"></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        lists[left] = lists[right]  <span class="comment"># 这个位置的值先挪到左边</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从左边开始查找小于参考点的值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lists[left] &lt;= key:</span><br><span class="line"></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        lists[right] = lists[left]  <span class="comment"># 这个位置的值挪到右边</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写回改成的值</span></span><br><span class="line"></span><br><span class="line">    lists[left] = key</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归，并返回结果</span></span><br><span class="line"></span><br><span class="line">    quick_sort(lists, low, left - <span class="number">1</span>)    <span class="comment"># 递归左边部分</span></span><br><span class="line"></span><br><span class="line">    quick_sort(lists, left + <span class="number">1</span>, high)   <span class="comment"># 递归右边部分</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lists</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">quick_sort(numbers，<span class="number">0</span>，<span class="built_in">len</span>(numbers)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> numbers == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis备份、容灾及高可用实战</title>
    <url>/2020/11/26/Redis%E5%A4%87%E4%BB%BD%E3%80%81%E5%AE%B9%E7%81%BE%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote>
<p>Redis已经大量应用于各种互联网架构场景中，其优异的性能，良好的操作性，以及大量的场景应用案例，使得Redis备受瞩目。本文作者向大家介绍了一种Redis在非大集群分布式应用场景下的灾备解决方案。一起来品读一下吧~</p>
</blockquote>
<span id="more"></span>

<h3 id="一，Redis简单介绍"><a href="#一，Redis简单介绍" class="headerlink" title="一，Redis简单介绍"></a>一，Redis简单介绍</h3><p>Redis是一个高性能的key-value非关系型数据库，由于其具有高性能的特性，支持高可用、持久化、多种数据结构、集群等，使其脱颖而出，成为常用的非关系型数据库。<br>此外，Redis的使用场景也比较多。</p>
<ol>
<li><strong>会话缓存（Session Cache）</strong><br>Redis缓存会话有非常好的优势，因为Redis提供持久化，在需要长时间保持会话的应用场景中，如购物车场景这样的场景中能提供很好的长会话支持，能给用户提供很好的购物体验。</li>
<li><strong>全页缓存</strong><br>在WordPress中，Pantheon提供了一个不错的插件<code>wp-redis</code>，这个插件能以最快的速度加载你曾经浏览过的页面。</li>
<li><strong>队列</strong></li>
</ol>
<p>Reids提供list和set操作，这使得Redis能作为一个很好的消息队列平台来使用。</p>
<p>我们常通过Reids的队列功能做购买限制。比如到节假日或者推广期间，进行一些活动，对用户购买行为进行限制，限制今天只能购买几次商品或者一段时间内只能购买一次。也比较适合适用。</p>
<p>   4.<strong>排名</strong><br>Redis在内存中对数字进行递增或递减的操作实现得非常好。所以我们在很多排名的场景中会应用Redis来进行，比如小说网站对小说进行排名，根据排名，将排名靠前的小说推荐给用户。</p>
<p>   5.<strong>发布&#x2F;订阅</strong><br>Redis提供发布和订阅功能，发布和订阅的场景很多，比如我们可以基于发布和订阅的脚本触发器，实现用Redis的发布和订阅功能建立起来的聊天系统。</p>
<p>此外还有很多其它场景，Redis都表现的不错。 </p>
<h3 id="二，Redis使用中单点故障问题"><a href="#二，Redis使用中单点故障问题" class="headerlink" title="二，Redis使用中单点故障问题"></a>二，Redis使用中单点故障问题</h3><p>正是由于Redis具备多种优良特新，且应用场景非常丰富，以至于Redis在各个公司都有它存在的身影。那么随之而来的问题和风险也就来了。Redis虽然应用场景丰富，但部分公司在实践Redis应用的时候还是相对保守使用单节点部署，那为日后的维护带来了安全风险。</p>
<p>在2015年的时候，曾处理过一个因为单点故障原因导致的业务中断问题。当时的Redis都未采用分布式部署，采用单实例部署，并未考虑容灾方面的问题。</p>
<p>当时我们通过Redis服务器做用户购买优惠商品的行为控制，但后来由于未知原因Redis节点的服务器宕机了，导致我们无法对用户购买行为进行控制，造成了用户能够在一段时间内多次购买优惠商品的行为。</p>
<p>这种宕机事故可以说已经对公司造成了不可挽回的损失了，安全风险问题非常严重，作为当时运维这个系统的我来说有必要对这个问题进行修复和在架构上的改进。于是我开始了解决非分布式应用下Redis单点故障方面的研究学习。</p>
<h3 id="三，非分布式场景下Redis应用的备份与容灾"><a href="#三，非分布式场景下Redis应用的备份与容灾" class="headerlink" title="三，非分布式场景下Redis应用的备份与容灾"></a>三，非分布式场景下Redis应用的备份与容灾</h3><p>Redis主从复制现在应该是很普遍了。常用的主从复制架构有如下两种架构方案。</p>
<h4 id="常用Redis主从复制"><a href="#常用Redis主从复制" class="headerlink" title="常用Redis主从复制"></a>常用Redis主从复制</h4><ul>
<li><strong>方案一</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/22be81b033d1141625388f09c18cab0c.png" alt="img"><br>这是最常见的一种架构，一个Master节点，两个Slave节点。客户端写数据的时候是写Master节点，读的时候，是读取两个Slave，这样实现读的扩展，减轻了Master节点读负载。</li>
<li><strong>方案二</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/b81717a6ed4b7dd682ba7a3ae7af2051.png" alt="img"><br>这种架构同样是一个Master和两个Slave。不同的是Master和Slave1使用keepalived进行VIP转移。Client连接Master的时候是通过VIP进行连接的。避免了方案一IP更改的情况。</li>
</ul>
<h4 id="Redis主从复制优点与不足"><a href="#Redis主从复制优点与不足" class="headerlink" title="Redis主从复制优点与不足"></a>Redis主从复制优点与不足</h4><ul>
<li><strong>优点</strong></li>
</ul>
<ol>
<li>实现了对master数据的备份，一旦master出现故障，slave节点可以提升为新的master，顶替旧的master继续提供服务</li>
<li>实现读扩展。使用主从复制架构， 一般都是为了实现读扩展。Master主要实现写功能，  Slave实现读的功能</li>
</ol>
<ul>
<li><p><strong>不足</strong><br><strong>架构方案一</strong><br>当Master出现故障时，Client就与Master端断开连接，无法实现写功能，同时Slave也无法从Master进行复制。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a1a0859b60df498210558d9db2c29b8f.png" alt="img"></p>
</li>
</ul>
<p>此时需要经过如下操作(假设提升Slave1为Master):</p>
<blockquote>
<p>1)在Slave1上执<code>slaveof no one</code>命令提升Slave1为新的Master节点。<br>2)在Slave1上配置为可写，这是因为大多数情况下，都将slave配置只读。<br>3)告诉Client端(也就是连接Redis的程序)新的Master节点的连接地址。<br>4)配置Slave2从新的Master进行数据复制。</p>
</blockquote>
<p><strong>架构方案二</strong><br>当master出现故障后，Client可以连接到Slave1上进行数据操作，但是Slave1就成了一个单点，就出现了经常要避免的单点故障(single point of failure)。<br><img src="https://img-blog.csdnimg.cn/img_convert/8743a28dcc9096604757d6287be42d16.png" alt="img">之后需要经过如下操作：</p>
<blockquote>
<p>1）在Slave1上执行slaveof no one命令提升Slave1为新的Master节点<br>2）在Slave1上配置为可写，这是因为大多数情况下，都将Slave配置只读<br>3）配置Slave2从新的Master进行数据复制</p>
</blockquote>
<p>可以发现，无论是哪种架构方案都需要人工干预来进行故障转移(failover)。需要人工干预就增加了运维工作量，同时也对业务造成了巨大影响。这时候可以使用Redis的高可用方案-Sentinel</p>
<h3 id="四，Redis-Sentinel介绍"><a href="#四，Redis-Sentinel介绍" class="headerlink" title="四，Redis Sentinel介绍"></a>四，Redis Sentinel介绍</h3><p>Redis Sentinel为Redis提供了高可用方案。从实践方面来说，使用Redis Sentinel可以创建一个无需人为干预就可以预防某些故障的Redis环境。<br>Redis Sentinel设计为分布式的架构，运行多个Sentinel进程来共同合作的。运行多个Sentinel进程合作，当多个Sentinel同一给定的master无法再继续提供服务，就会执行故障检测，这会降低误报的可能性。</p>
<h3 id="五，Redis-Sentinel功能"><a href="#五，Redis-Sentinel功能" class="headerlink" title="五，Redis Sentinel功能"></a>五，Redis Sentinel功能</h3><p>Redis Sentinel在Redis高可用方案中主要作用有如下功能：</p>
<ul>
<li>监控<br>Sentinel会不断的检查master和slave是否像预期那样正常运行</li>
<li>通知<br>通过API，Sentinel能够通知系统管理员、程序监控的Redis实例出现了故障</li>
<li>自动故障转移<br>如果master不像预想中那样正常运行，Sentinel可以启动故障转移过程，其中的一个slave会提成为master，其它slave会重新配置来使用新的master，使用Redis服务的应用程序，当连接时，也会被通知使用新的地址。</li>
<li>配置提供者<br>Sentinel可以做为客户端服务发现的认证源：客户端连接Sentinel来获取目前负责给定服务的Redis master地址。如果发生故障转移，Sentinel会报告新的地址。</li>
</ul>
<h3 id="六，Redis-Sentinel架构"><a href="#六，Redis-Sentinel架构" class="headerlink" title="六，Redis Sentinel架构"></a>六，Redis Sentinel架构</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/628e9af48ede9cbea4cec0dfc0c786a8.png" alt="img"></p>
<h3 id="七，Redis-Sentinel实现原理"><a href="#七，Redis-Sentinel实现原理" class="headerlink" title="七，Redis Sentinel实现原理"></a>七，Redis Sentinel实现原理</h3><p>Sentinel集群对自身和Redis主从复制进行监控。当发现Master节点出现故障时，会经过如下步骤：</p>
<ul>
<li><p>1）Sentinel之间进行选举，选举出一个leader，由选举出的leader进行failover</p>
</li>
<li><p>2）Sentinel leader选取slave节点中的一个slave作为新的Master节点。对slave选举需要对slave进行选举的方法如下：</p>
<blockquote>
<p>a) <strong>与master断开时间</strong><br> 如果与master断开的时间超过down-after-milliseconds(sentinel配置） * 10秒加上从sentinel判定master不可用到sentinel开始执行故障转移之间的时间，就认为该slave不适合提升为master。<br>b) <strong>slave优先级</strong><br>每个slave都有优先级，保存在redis.conf配置文件里。如果优先级相同，则继续进行。<br><strong>c) 复制偏移位置</strong><br>复制偏移纪录着从master复制数据复制到哪里，复制偏移越大表明从master接受的数据越多，如果复制偏移量也一样，继续进行选举<br>d) <strong>Run ID</strong><br>选举具有最小Run ID的Slave作为新的Master<br>流程图如下：<br><img src="https://img-blog.csdnimg.cn/img_convert/c5c139ea4c8a235032117b0392994ce9.png" alt="img"></p>
</blockquote>
</li>
<li><ol start="3">
<li>Sentinel leader会在上一步选举的新master上执行slaveof no one操作，将其提升为master节点</li>
</ol>
</li>
<li><p>4）Sentinel leader向其它slave发送命令，让剩余的slave成为新的master节点的slave</p>
</li>
<li><p>5）Sentinel leader会让原来的master降级为slave，当恢复正常工作，Sentinel leader会发送命令让其从新的master进行复制<br>以上failover操作均有sentinel自己独自完成，完全无需人工干预。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python多线程和锁</title>
    <url>/2020/11/23/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p>进程是执行中的计算机程序。每个进程都拥有自己的地址空间、内存、数据栈及其它的辅助数据。操作系统管理着所有的进程，并为这些进程合理分配时间。进程可以通过派生新的进程来执行其它任务，不过每个进程都拥有自己的内存和数据栈等，进程之间的数据交换采用 <strong>进程间通信(IPC)</strong> 方式。<br>线程在进程之下执行，一个进程下可以运行多个线程，它们之间共享相同上下文。线程包括开始、执行顺序和结束三部分。它有一个指针，用于记录当前运行的上下文。当其它线程执行时，它可以被抢占(中断)和临时挂起(也称睡眠) ——这种做法叫做 <strong>让步(yielding)</strong> 。</p>
<span id="more"></span>
<p>一个进程中的各个线程与主进程共享同一片数据空间，与独立进程相比，线程之间信息共享和通信更加容易。线程一般以并发执行，正是由于这种并发和数据共享机制，使多任务间的协作成为可能。当然，这种共享也并不是没有风险的，如果多个线程访问同一数据空间，由于访问顺序不同，可能导致结果不一致，这种情况通常称为**竞态条件(race condition)**，不过大多数线程库都有同步原语，以允许线程管理器的控制执行和访问；另一个要注意的问题是，线程无法给予公平执行时间，CPU 时间分配会倾向那些阻塞更少的函数。</p>
<h3 id="全局解释器锁-GIL"><a href="#全局解释器锁-GIL" class="headerlink" title="全局解释器锁(GIL)"></a>全局解释器锁(GIL)</h3><p>Python 代码执行由 <em>Python 虚拟机</em> (又名解释器主循环) 进行控制。Python 在设计时是这样考虑的，在主循环中同时只能有一个控制线程在执行。对 Python 虚拟机的访问由 <em>全局解释器(GIL)</em> 控制，这个锁用于，当有多个线程时保证同一时刻只能有一个线程在运行。</p>
<p>由于 Python 的 GIL 的限制，多线程更适合 I&#x2F;O 密集型应用( I&#x2F;O 释放了 GIL，可以允许更多的并发)，对于计算密集型应用，为了实现更好的并行性，适合使用多进程，已便利用 CPU 的多核优势。Python 的多进程相关模块：subprocess、multiprocessing、concurrent.futures</p>
<h3 id="threading-模块"><a href="#threading-模块" class="headerlink" title="threading 模块"></a>threading 模块</h3><p>threading 是 Python 高级别的多线程模块。</p>
<h4 id="threading-模块的函数"><a href="#threading-模块的函数" class="headerlink" title="threading 模块的函数"></a>threading 模块的函数</h4><ul>
<li><strong>active_count()</strong> 当前活动的 Thread 对象个数</li>
<li><strong>current_thread()</strong> 返回当前 Thread 对象</li>
<li><strong>get_ident()</strong> 返回当前线程</li>
<li><strong>enumerater()</strong> 返回当前活动 Thread 对象列表</li>
<li><strong>main_thread()</strong> 返回主 Thread 对象</li>
<li><strong>settrace(func)</strong> 为所有线程设置一个 trace 函数</li>
<li><strong>setprofile(func)</strong> 为所有线程设置一个 profile 函数</li>
<li><strong>stack_size([size])</strong> 返回新创建线程栈大小；或为后续创建的线程设定栈大小为 size</li>
<li><strong>TIMEOUT_MAX</strong> <code>Lock.acquire()</code>, <code>RLock.acquire()</code>, <code>Condition.wait()</code> 允许的最大值</li>
</ul>
<p>threading 可用对象列表：</p>
<ul>
<li><strong>Thread</strong> 表示执行线程的对象</li>
<li><strong>Lock</strong> 锁原语对象</li>
<li><strong>RLock</strong> 可重入锁对象，使单一进程再次获得已持有的锁(递归锁)</li>
<li><strong>Condition</strong> 条件变量对象，使得一个线程等待另一个线程满足特定条件，比如改变状态或某个值</li>
<li><strong>Semaphore</strong> 为线程间共享的有限资源提供一个”计数器”，如果没有可用资源会被阻塞</li>
<li><strong>Event</strong> 条件变量的通用版本，任意数量的线程等待某个时间的发生，在改事件发生后所有线程被激活</li>
<li><strong>Timer</strong> 与 Thread 相识，不过它要在运行前等待一段时间</li>
<li><strong>Barrier</strong> 创建一个”阻碍”，必须达到指定数量的线程后才可以继续</li>
</ul>
<h4 id="Thread-类"><a href="#Thread-类" class="headerlink" title="Thread 类"></a>Thread 类</h4><p>Thread 对象的属性有：<code>Thread.name</code>、<code>Thread.ident</code>、<code>Thread.daemon</code>。详见(<em>The Python Standard Library</em>)</p>
<p>Thread 对象方法：<br><code>Thread.start()</code>、<code>Thread.run()</code>、<code>Thread.join(timeout=None)</code>、<code>Thread.getName</code>、<code>Thread.setName</code>、<code>Thread.is_alive()</code>、<code>Thread.isDaemon()</code>、<code>Thread.setDaemon()</code>。详见(<em>The Python Standard Library</em>)</p>
<p>使用 Thread 类，可以有很多种方法来创建线程，这里使用常见的两种：</p>
<ul>
<li>创建 Thread 实例，传给它一个函数。</li>
<li>派生 Thread 子类，并创建子类的实例。</li>
</ul>
<h4 id="一个单线程例子"><a href="#一个单线程例子" class="headerlink" title="一个单线程例子"></a>一个单线程例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">n</span>):</span><br><span class="line">    sleep(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ZzZzzz, sleep: &quot;</span>, n)    <span class="comment"># 打印 Sleep 的秒数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;### Start at: &quot;</span>, ctime())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        hi(randint(<span class="number">1</span>,<span class="number">2</span>))    <span class="comment"># 调用十次，每次 Sleep 1秒或2秒</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;### Done at: &quot;</span>, ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Start at:  Thu Sep  1 14:11:00 2016</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line"><span class="comment">### Done at:  Thu Sep  1 14:11:14 2016</span></span><br></pre></td></tr></table></figure>

<p>一共是用了14秒。</p>
<h4 id="多线程：创建-Thread-实例，传给它一个函数"><a href="#多线程：创建-Thread-实例，传给它一个函数" class="headerlink" title="多线程：创建 Thread 实例，传给它一个函数"></a>多线程：创建 Thread 实例，传给它一个函数</h4><p>直接上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">n</span>):</span><br><span class="line">    sleep(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ZzZzzz, sleep: &quot;</span>, n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;### Start at: &quot;</span>, ctime())</span><br><span class="line">    threads = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        rands = randint(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 实例化每个 Thread 对象，把函数和参数传递进去，返回 Thread 实例</span></span><br><span class="line">        t = threading.Thread(target=hi, args=(rands,))</span><br><span class="line">        threads.append(t)     <span class="comment"># 分配线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        threads[i].start()    <span class="comment"># 开始执行多线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        threads[i].join()     <span class="comment"># (自旋锁)等待线程结束或超时，然后再往下执行</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;### Done at: &quot;</span>, ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Start at:  Thu Sep  1 14:18:00 2016</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line"><span class="comment">### Done at:  Thu Sep  1 14:18:02 2016</span></span><br></pre></td></tr></table></figure>

<p>使用多线程，只用了2秒。</p>
<h4 id="多线程：派生-Thread-子类，并创建子类的实例"><a href="#多线程：派生-Thread-子类，并创建子类的实例" class="headerlink" title="多线程：派生 Thread 子类，并创建子类的实例"></a>多线程：派生 Thread 子类，并创建子类的实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(threading.Thread):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func, args, times</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyThread, self).__init__()</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line">        self.times = times</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;begin thread......&quot;</span>, self.times)</span><br><span class="line">        self.res = self.func(*self.args)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;end threads......&quot;</span>, self.times)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">n</span>):</span><br><span class="line">    sleep(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ZzZzzz, sleep: &quot;</span>, n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;### Start at: &quot;</span>, ctime())</span><br><span class="line">    threads = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        rands = randint(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">        t = MyThread(hi, (rands,), i+<span class="number">1</span>)</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        threads[i].join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;### Done at: &quot;</span>, ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Start at:  Thu Sep  1 14:47:09 2016</span></span><br><span class="line">begin thread...... <span class="number">1</span></span><br><span class="line">begin thread...... <span class="number">2</span></span><br><span class="line">begin thread...... <span class="number">3</span></span><br><span class="line">begin thread...... <span class="number">4</span></span><br><span class="line">begin thread...... <span class="number">5</span></span><br><span class="line">begin thread...... <span class="number">6</span></span><br><span class="line">begin thread...... <span class="number">7</span></span><br><span class="line">begin thread...... <span class="number">8</span></span><br><span class="line">begin thread...... <span class="number">9</span></span><br><span class="line">begin thread...... <span class="number">10</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">end threads...... <span class="number">1</span></span><br><span class="line">end threads...... <span class="number">4</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">end threads...... <span class="number">7</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">end threads...... <span class="number">3</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">1</span></span><br><span class="line">end threads...... <span class="number">9</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line">end threads...... <span class="number">2</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line">end threads...... <span class="number">5</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line">end threads...... <span class="number">10</span></span><br><span class="line">end threads...... <span class="number">6</span></span><br><span class="line">ZzZzzz, sleep:  <span class="number">2</span></span><br><span class="line">end threads...... <span class="number">8</span></span><br><span class="line"><span class="comment">### Done at:  Thu Sep  1 14:47:11 2016</span></span><br></pre></td></tr></table></figure>

<p>这个栗子对 Thread 子类化，而不是对其实例化，使得定制线程对象更具灵活性，同时也简化线程创建的调用过程。</p>
<h3 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h3><p>当多线程争夺锁时，允许第一个获得锁的线程进入临街区，并执行代码。所有之后到达的线程将被阻塞，直到第一个线程执行结束，退出临街区，并释放锁。需要注意，那些阻塞的线程是没有顺序的。</p>
<p>举个栗子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line">L = threading.Lock() <span class="comment"># 引入锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">n</span>):</span><br><span class="line">    L.acquire()    <span class="comment"># 加锁</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>]:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        sleep(n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ZzZzzz, sleep: &quot;</span>, n)</span><br><span class="line">    L.release()    <span class="comment"># 释放锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;### Start at: &quot;</span>, ctime())</span><br><span class="line">    threads = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        rands = randint(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">        t = threading.Thread(target=hi, args=(rands,))</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        threads[i].join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;### Done at: &quot;</span>, ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>运行上面的代码，再将锁的代码注释掉，对比下输出。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/09/03/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>base64图片展示</title>
    <url>/2020/11/19/base64%E5%9B%BE%E7%89%87%E5%B1%95%E7%A4%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="base64图片展示（后端给base64数据，前端展示图片）"><a href="#base64图片展示（后端给base64数据，前端展示图片）" class="headerlink" title="base64图片展示（后端给base64数据，前端展示图片）"></a>base64图片展示（后端给base64数据，前端展示图片）</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-- coding: utf-<span class="number">8</span> --</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\Users\user\Desktop\20170508134213.png&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">b64encode是编码，b64decode是解码</span><br><span class="line"></span><br><span class="line">    base64_data = base64.b64encode(f.read())</span><br><span class="line"></span><br><span class="line">base64.b64decode(base64data)</span><br><span class="line"> <span class="built_in">print</span>(base64_data)</span><br></pre></td></tr></table></figure>
<span id="more"></span>


<p>前端html中如何直接调用base64编码呢？</p>
<p>使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;data:image/jpg;base64,这里是base64的编码&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="attr">data</span>: &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">                 <span class="attr">imageData</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="title function_">created</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line"></span><br><span class="line">   <span class="attr">methods</span>:&#123;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">imgShow</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">let</span> imageData = <span class="string">&#x27;data:image/png;base64,&#x27;</span> + resp.<span class="property">data</span>.<span class="title function_">imageByte</span>(后端传来数据)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果base64位图片没有带前面的头：&#x27;data:image/png;base64,&#x27;，需要添加，才可以展示图片</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="几种常见的格式"><a href="#几种常见的格式" class="headerlink" title="几种常见的格式"></a>几种常见的格式</h2><p>1.png格式：this.src &#x3D; ‘data:image&#x2F;png;base64,’ + this.baseImg （this.baseImg为base64编码的png图片数据） 2.jpeg格式：this.src &#x3D; ‘data:image&#x2F;jpeg;base64,’ + this.baseImg （this.baseImg为base64编码的jpeg图片数据） 3.gif格式 ： this.src &#x3D; ‘data:image&#x2F;gif;base64,’ + this.baseImg （this.baseImg为base64编码的gif图片数据） 4.pdf格式 ： this.src &#x3D; ‘data:application&#x2F;pdf;base64,${res}’ （res为base64编码的pdf图片数据） </p>
]]></content>
      <categories>
        <category>智能高并发审批流系统</category>
      </categories>
      <tags>
        <tag>智能高并发审批流系统</tag>
      </tags>
  </entry>
  <entry>
    <title>ip封禁</title>
    <url>/2020/11/19/ip%E5%B0%81%E7%A6%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><strong>封禁原因：</strong></p>
<p>有时候我们写的网站会因为有些不正常的用户(爬虫)请求过于频繁，导致服务器压力过大而崩溃。这时我们需要对请求过于频繁的IP实行限制。<br>1.获取IP，可将IP存入mysql，redis，session，中间件等进行保存<br>2.设置倒计时(ps：你想封多久就封多久，开心就好)</p>
<span id="more"></span>
<p><strong>思路</strong></p>
<p>1.因为要确定每个接口的token是否没有被篡改，所以我们在装饰器对token进行检测。</p>
<p>2.在装饰器中，获取token，因为又不需要携带的接口，所以当携带token的时候，判断是否能用自己的解密方式进行解密。</p>
<p>3.ip封禁是一种使用频繁的数据。为了提高用户体验设置IP与uid为联合唯一索引来排重。</p>
]]></content>
      <categories>
        <category>智能高并发审批流系统</category>
      </categories>
      <tags>
        <tag>智能高并发审批流系统</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb数据</title>
    <url>/2020/11/19/mongodb%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MySQL: 关系型数据库</span><br><span class="line">Redis: 非关系型数据库</span><br><span class="line">MongoDB: 非关系型数据库, NoSQL(Not only SQL)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-主线来啦-增删改查"><a href="#2-主线来啦-增删改查" class="headerlink" title="2.主线来啦: 增删改查"></a>2.主线来啦: 增删改查</h4><span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.查看数据库</span></span><br><span class="line">show dbs</span><br><span class="line"><span class="comment">// 2.创建并使用数据库</span></span><br><span class="line">use tst</span><br><span class="line"><span class="comment">// 3.查看当前工作的数据库</span></span><br><span class="line">db</span><br><span class="line"><span class="comment">// 4.创建表并插入一条数据</span></span><br><span class="line">db.<span class="property">score</span>.<span class="title function_">insert</span>(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;glf&quot;</span>, <span class="string">&quot;score&quot;</span>:<span class="number">89</span>&#125;)</span><br><span class="line"><span class="comment">// 5.查看所有表</span></span><br><span class="line">show tables</span><br><span class="line"><span class="comment">// 6.查询表中所有数据</span></span><br><span class="line">db.<span class="property">score</span>.<span class="title function_">find</span>()</span><br><span class="line"><span class="comment">// 7.删除表操作</span></span><br><span class="line">db.<span class="property">score</span>.<span class="title function_">drop</span>()</span><br><span class="line"><span class="comment">// 8.删除数据库</span></span><br><span class="line">db.<span class="title function_">dropDatabase</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据的增加: db.tablename.insert(&#123;.....&#125;)</span></span><br><span class="line"><span class="comment">// 创建一个货物的表</span></span><br><span class="line">db.<span class="property">goods</span>.<span class="title function_">insert</span>(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;辣条&#x27;</span>, <span class="string">&quot;price&quot;</span>:<span class="number">0.5</span>&#125;)</span><br><span class="line">db.<span class="property">goods</span>.<span class="title function_">insertOne</span>(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;雷霆嘎巴&#x27;</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">2.5</span>&#125;)</span><br><span class="line">db.<span class="property">goods</span>.<span class="title function_">insertMany</span>([&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;老八秘制小汉堡&#x27;</span>, <span class="string">&quot;price&quot;</span>:<span class="number">15</span>&#125;,&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;魔法师方便面&#x27;</span>, <span class="string">&quot;price&quot;</span>:<span class="number">0.5</span>&#125;,&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;大大泡泡糖&#x27;</span>, <span class="string">&quot;price&quot;</span>:<span class="number">0.25</span>&#125;])</span><br><span class="line">db.<span class="property">goods</span>.<span class="title function_">insert</span>([&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;上天小汽水&#x27;</span>, <span class="string">&quot;price&quot;</span>:<span class="number">0.1</span>&#125;,&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;无花果干&#x27;</span>, <span class="string">&quot;price&quot;</span>:<span class="number">0.2</span>&#125;])</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据查询: db.tablename.find(&#123;...&#125;)</span></span><br><span class="line"><span class="comment">// 等值查询</span></span><br><span class="line">db.<span class="property">goods</span>.<span class="title function_">find</span>(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;辣条&#x27;</span>&#125;)  <span class="comment">// 等值</span></span><br><span class="line">db.<span class="property">goods</span>.<span class="title function_">find</span>(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;辣条&#x27;</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">5</span>&#125;) <span class="comment">// and查询</span></span><br><span class="line">db.<span class="property">goods</span>.<span class="title function_">find</span>(&#123;<span class="string">&#x27;$or&#x27;</span>: [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;辣条&#x27;</span>&#125;, &#123;<span class="string">&#x27;price&#x27;</span>: <span class="number">2.5</span>&#125;]&#125;) <span class="comment">// or查询</span></span><br><span class="line"><span class="comment">// 非等值查询: 大于$gt, 小于$lt, 大于等于$gte, 小于等于$lte, 不等于$ne</span></span><br><span class="line"><span class="comment">// gt:great than  lt: little than, e:equal</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小于1块钱的零食</span></span><br><span class="line">db.<span class="property">goods</span>.<span class="title function_">find</span>(&#123;<span class="string">&#x27;price&#x27;</span>: &#123;<span class="string">&#x27;$lt&#x27;</span>: <span class="number">1</span>&#125;&#125;)</span><br><span class="line">db.<span class="property">goods</span>.<span class="title function_">find</span>(&#123;<span class="string">&#x27;price&#x27;</span>: &#123;<span class="string">&#x27;$gt&#x27;</span>: <span class="number">5</span>&#125;&#125;)</span><br><span class="line">db.<span class="property">goods</span>.<span class="title function_">find</span>(&#123;<span class="string">&#x27;$or&#x27;</span>: [&#123;<span class="string">&#x27;price&#x27;</span>: &#123;<span class="string">&#x27;$lt&#x27;</span>: <span class="number">1</span>&#125;&#125;,&#123;<span class="string">&#x27;price&#x27;</span>: &#123;<span class="string">&#x27;$gt&#x27;</span>: <span class="number">5</span>&#125;&#125;]&#125;)</span><br><span class="line">db.<span class="property">goods</span>.<span class="title function_">find</span>(&#123;<span class="string">&#x27;price&#x27;</span>: &#123;<span class="string">&#x27;$lt&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;$gt&#x27;</span>:<span class="number">2</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模糊查询</span></span><br><span class="line">db.<span class="property">goods</span>.<span class="title function_">find</span>(&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;$regex&#x27;</span>: <span class="string">&#x27;.*辣.*&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据的更新: db.tablename.update(&#123;定位数据&#125;, &#123;指定修改&#125;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>













]]></content>
  </entry>
  <entry>
    <title>redis主从模式,哨兵模式,cluster(集群)模式</title>
    <url>/2020/11/19/redis%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F-cluster-%E9%9B%86%E7%BE%A4-%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>详细可以参看<a href="https://redis.io/topics/cluster-tutorial">《redis官网文档》</a>或者<a href="http://www.redis.cn/topics/cluster-tutorial.html">《redis中文网》</a></p>
<p>Redis集群方式共有三种：主从模式，哨兵模式，cluster(集群)模式</p>
<span id="more"></span>

<p><strong>主从模式</strong>:</p>
<p>是三种集群方式里最简单的。它主要是基于Redis的主从复制特性架构的。通常我们会设置一个主节点，N个从节点;默认情况下，主节点负责处理使用者的IO操作，而从节点则会对主节点的数据进行备份，并且也会对外提供读操作的处理。主要的特点如下：</p>
<ol>
<li>主从模式下，当某一节点损坏时，因为其会将数据备份到其它Redis实例上，这样做在很大程度上可以恢复丢失的数据。</li>
<li>主从模式下，可以保证负载均衡，这里不再叙说了</li>
<li>主从模式下，主节点和从节点是读写分离的。使用者不仅可以从主节点上读取数据，还可以很方便的从从节点上读取到数据，这在一定程度上缓解了主机的压力。</li>
<li>从节点也是能够支持写入数据的，只不过从从节点写入的数据不会同步到主节点以及其它的从节点下。</li>
</ol>
<p>从以上，我们不难看出Redis在主从模式下，必须保证主节点不会宕机——一旦主节点宕机，其它节点不会竞争称为主节点，此时，Redis将丧失写的能力。这点在生产环境中，是致命的。</p>
<p><strong>哨兵模式：</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20201119223219469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0sxMTYzMzE3NTE1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>是基于主从模式做的一定变化，它能够为Redis提供了高可用性。在实际生产中，服务器难免不会遇到一些突发状况：服务器宕机，停电，硬件损坏等。这些情况一旦发生，其后果往往是不可估量的。而哨兵模式在一定程度上能够帮我们规避掉这些意外导致的灾难性后果。其实，哨兵模式的核心还是主从复制。只不过相对于主从模式在主节点宕机导致不可写的情况下，多了一个竞选机制——从所有的从节点竞选出新的主节点。竞选机制的实现，是依赖于在系统中启动一个sentinel进程。</p>
<p>sentinel特点：</p>
<ol>
<li>监控：它会监听主服务器和从服务器之间是否在正常工作。</li>
<li>通知：它能够通过API告诉系统管理员或者程序，集群中某个实例出了问题。</li>
<li>故障转移：它在主节点出了问题的情况下，会在所有的从节点中竞选出一个节点，并将其作为新的主节点。</li>
<li>提供主服务器地址：它还能够向使用者提供当前主节点的地址。这在故障转移后，使用者不用做任何修改就可以知道当前主节点地址。</li>
</ol>
<p>sentinel，也可以集群，部署多个哨兵，sentinel可以通过发布与订阅来自动发现Redis集群上的其它sentinel。sentinel在发现其它sentinel进程后，会将其放入一个列表中，这个列表存储了所有已被发现的sentinel。</p>
<p>集群中的所有sentinel不会并发着去对同一个主节点进行故障转移。故障转移只会从第一个sentinel开始，当第一个故障转移失败后，才会尝试下一个。当选择一个从节点作为新的主节点后，故障转移即成功了(而不会等到所有的从节点配置了新的主节点后)。这过程中，如果重启了旧的主节点，那么就会出现无主节点的情况，这种情况下，只能重启集群。</p>
<p>当竞选出新的主节点后，被选为新的主节点的从节点的配置信息会被sentinel改写为旧的主节点的配置信息。完成改写后，再将新主节点的配置广播给所有的从节点。</p>
<p><strong>Redis集群（cluster）</strong> Redis 集群是一个提供在多个Redis间节点间共享数据的程序集。</p>
<p>Redis集群并不支持处理多个keys的命令,因为这需要在不同的节点间移动数据,从而达不到像Redis那样的性能,在高负载的情况下可能会导致不可预料的错误.</p>
<p>Redis 集群通过分区来提供一定程度的可用性,在实际环境中当某个节点宕机或者不可达的情况下继续处理命令. Redis 集群的优势:</p>
<p>自动分割数据到不同的节点上。</p>
<p>整个集群的部分节点失败或者不可达的情况下能够继续处理命令。</p>
<p>Redis 集群的数据分片 Redis 集群没有使用一致性hash, 而是引入了 哈希槽的概念.</p>
<p>Redis 集群有16384个哈希槽,每个key通过CRC16校验后对16384取模来决定放置哪个槽.集群的每个节点负责一部分hash槽,举个例子,比如当前集群有3个节点,那么:</p>
<p>节点 A 包含 0 到 5500号哈希槽.</p>
<p>节点 B 包含5501 到 11000 号哈希槽.</p>
<p>节点 C 包含11001 到 16384号哈希槽.</p>
<p>这种结构很容易添加或者删除节点. 比如如果我想新添加个节点D, 我需要从节点 A, B, C中得部分槽到D上. 如果我想移除节点A,需要将A中的槽移到B和C节点上,然后将没有任何槽的A节点从集群中移除即可. 由于从一个节点将哈希槽移动到另一个节点并不会停止服务,所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态.</p>
<p>Redis 集群的主从复制模型 为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，所以集群使用了主从复制模型,每个节点都会有N-1个复制品.</p>
<p>在我们例子中具有A，B，C三个节点的集群,在没有复制模型的情况下,如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用.</p>
<p>然而如果在集群创建的时候（或者过一段时间）我们为每个节点添加一个从节点A1，B1，C1,那么整个集群便有三个master节点和三个slave节点组成，这样在节点B失败后，集群便会选举B1为新的主节点继续服务，整个集群便不会因为槽找不到而不可用了</p>
<p>不过当B和B1 都失败后，集群是不可用的.</p>
<p>Redis 一致性保证 Redis 并不能保证数据的强一致性. 这意味这在实际中集群在特定的条件下可能会丢失写操作.</p>
<p>第一个原因是因为集群是用了异步复制. 写操作过程:</p>
<p>客户端向主节点B写入一条命令.</p>
<p>主节点B向客户端回复命令状态.</p>
<p>主节点将写操作复制给他得从节点 B1, B2 和 B3.</p>
<p>主节点对命令的复制工作发生在返回命令回复之后， 因为如果每次处理命令请求都需要等待复制操作完成的话， 那么主节点处理命令请求的速度将极大地降低 —— 我们必须在性能和一致性之间做出权衡。 注意：Redis 集群可能会在将来提供同步写的方法。 Redis 集群另外一种可能会丢失命令的情况是集群出现了网络分区， 并且一个客户端与至少包括一个主节点在内的少数实例被孤立。</p>
<p>举个例子 假设集群包含 A 、 B 、 C 、 A1 、 B1 、 C1 六个节点， 其中 A 、B 、C 为主节点， A1 、B1 、C1 为A，B，C的从节点， 还有一个客户端 Z1 假设集群中发生网络分区，那么集群可能会分为两方，大部分的一方包含节点 A 、C 、A1 、B1 和 C1 ，小部分的一方则包含节点 B 和客户端 Z1 .</p>
<p>Z1仍然能够向主节点B中写入, 如果网络分区发生时间较短,那么集群将会继续正常运作,如果分区的时间足够让大部分的一方将B1选举为新的master，那么Z1写入B中得数据便丢失了.</p>
<p>注意， 在网络分裂出现期间， 客户端 Z1 可以向主节点 B 发送写命令的最大时间是有限制的， 这一时间限制称为节点超时时间（node timeout）， 是 Redis 集群的一个重要的配置选项：</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>python的进程、线程与多进程</title>
    <url>/2018/11/22/python%E7%9A%84%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="python大佬养成计划—-进程、线程与多进程"><a href="#python大佬养成计划—-进程、线程与多进程" class="headerlink" title="python大佬养成计划—-进程、线程与多进程"></a>python大佬养成计划—-进程、线程与多进程</h1><span id="more"></span>
<h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>很多同学都听说过，现代操作系统比如Mac OS X，UNIX，Linux，Windows等，都是支持“多任务”的操作系统。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么叫“多任务”呢？简单地说，就是操作系统可以同时运行多个任务。打个比方，你一边在用浏览器上网，一边在听MP3，一边在用Word赶作业，这就是多任务，至少同时有3个任务正在运行。还有很多任务悄悄地在后台同时运行着，只是桌面上没有显示而已。</span><br></pre></td></tr></table></figure>

<p>现在，多核CPU已经非常普及了，但是，即使过去的单核CPU，也可以执行多任务。由于CPU执行代码都是顺序执行的，那么，单核CPU是怎么执行多任务的呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答案就是操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……这样反复执行下去。表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。</span><br></pre></td></tr></table></figure>

<p>真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程，打开一个记事本就启动了一个记事本进程，打开两个记事本就启动了两个记事本进程，打开一个Word就启动了一个Word进程。</span><br><span class="line">有些进程还不止同时干一件事，比如Word，它可以同时进行打字、拼写检查、打印等事情。在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。</span><br><span class="line">由于每个进程至少要干一件事，所以，一个进程至少有一个线程。当然，像Word这种复杂的进程可以有多个线程，多个线程可以同时执行，多线程的执行方式和多进程是一样的，也是由操作系统在多个线程之间快速切换，让每个线程都短暂地交替运行，看起来就像同时执行一样。当然，真正地同时执行多线程需要多核CPU才可能实现。</span><br></pre></td></tr></table></figure>

<p>我们前面编写的所有的Python程序，都是执行单任务的进程，也就是只有一个线程。<br>如果我们要同时执行多个任务怎么办？<br>有两种解决方案：<br>一种是启动多个进程，每个进程虽然只有一个线程，但多个进程可以一块执行多个任务。<br>还有一种方法是启动一个进程，在一个进程内启动多个线程，这样，多个线程也可以一块执行多个任务。<br>当然还有第三种方法，就是启动多个进程，每个进程再启动多个线程，这样同时执行的任务就更多了，当然这种模型更复杂，实际很少采用。<br>总结一下，多任务的实现方式有三种：</p>
<ul>
<li>多进程模式</li>
<li>多线程模式</li>
<li>多进程+多线程模式</li>
</ul>
<p>线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。<br>多进程和多线程的程序涉及到同步、数据共享的问题，编写起来更复杂。</p>
<h2 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h2><p>无论是并行还是并发,在用户看来都是同时运行的，不管是进程还是线程，都只是一个任务而已，<br>真正干活的是CPU，CPU来做这些任务，而一个cpu（单核）同一时刻只能执行一个任务。<br>并行：多个任务同时运行，只有具备多个cpu才能实现并行，含有几个cpu，也就意味着在同一时刻可以执行几个任务。<br>并发：是伪并行，即看起来是同时运行的，实际上是单个CPU在多道程序之间来回的进行切换。</p>
<h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去。<br>异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进行处理，这样可以提高执行的效率。<br>打电话的过程就是同步通信，发短信时就是异步通信。</p>
<h2 id="父进程与子进程"><a href="#父进程与子进程" class="headerlink" title="父进程与子进程"></a>父进程与子进程</h2><p>子进程创建后，父进程和子进程有各自不同的地址空间，多道技术要求物理层面实现进程之间内存的<br>隔离，任何一个进程在其地址空间的修改都不会影响到另外一个进程。<br>注意：子进程和父进程之间是可以有只读的共享的内存区域的。<br>进程与进程之间数据（资源）是隔离的，两个进程之间可以基于管道这种方式进行通信。在Unix当中，是含有进程层次的概念的，但是在windows当中，是没有进程层次的概念的，所有的进程都是地位相同的。<br>在Linux当中，每启动一个命令，都会启动一个进程。</p>
<h2 id="python中线程特点"><a href="#python中线程特点" class="headerlink" title="python中线程特点"></a>python中线程特点</h2><p>在其他语言当中，一个进程里面开启多个线程，每个线程都可以给一个cpu去使用，但是在<br>python当中，在同一时刻，一个进程当中只能有一个线程处于运行状态。<br>eg:在其他语言当中，比如我现在开启了一个进程，这个进程当中含有几个线程，如果我现在有多个cpu，每一个线程是可以对应相应的CPU的。<br>但是在python当中，如果我们现在开启了一个进程，这个进程里面对应多个线程，同一时刻只有一个线程可以处于运行状态。<br>对于其他语言而言，在多CPU系统中，为了最大限度的利用多核，可以开启多个线程。<br>但是Python中的多线程是利用不了多核优势的。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>redis限流</title>
    <url>/2020/11/19/redis%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="redis限流"><a href="#redis限流" class="headerlink" title="redis限流"></a>redis限流</h1><p>限流是对系统的出入流量进行控制，防止大流量出入，导致资源不足，系统不稳定。</p>
<p>限流系统是对资源访问的控制组件，控制主要的两个功能：限流策略和熔断策略，对于熔断策略，不同的系统有不同的熔断策略诉求，有的系统希望直接拒绝、有的系统希望排队等待、有的系统希望服务降级、有的系统会定制自己的熔断策略，很难一一列举，所以本文只针对限流策略这个功能做详细的设计。</p>
<span id="more"></span>
<p>针对找出超出速率阈值的请求这个功能，限流系统中有两个基础概念：资源和策略。</p>
<p>资源 ：或者叫稀缺资源，被流量控制的对象；比如写接口、外部商户接口、大流量下的读接口 策略 ：限流策略由限流算法和可调节的参数两部分组成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">can_pass_fixed_window</span>(<span class="params">user, action, time_zone=<span class="number">60</span>, times=<span class="number">30</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param user: 用户唯一标识</span></span><br><span class="line"><span class="string">    :param action: 用户访问的接口标识(即用户在客户端进行的动作)</span></span><br><span class="line"><span class="string">    :param time_zone: 接口限制的时间段</span></span><br><span class="line"><span class="string">    :param time_zone: 限制的时间段内允许多少请求通过</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    key = <span class="string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(user, action)</span><br><span class="line">    <span class="comment"># redis_conn 表示redis连接对象</span></span><br><span class="line">    count = redis_conn.get(key)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> count:</span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        redis_conn.setex(key, time_zone, count)</span><br><span class="line">    <span class="keyword">if</span> count &lt; times:</span><br><span class="line">        redis_conn.incr(key)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>这个方法虽然简单，但有个大问题是无法应对两个时间边界内的突发流量。如上图所示，如果在计数器清零的前1秒以及清零的后1秒都进来了100个请求，那么在短时间内服务器就接收到了两倍的(200个)请求，这样就有可能压垮系统。会导致上面的问题是因为我们的统计精度还不够，为了将临界问题的影响降低，我们可以使用滑动窗口法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">can_pass_slide_window</span>(<span class="params">user, action, time_zone=<span class="number">60</span>, times=<span class="number">30</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param user: 用户唯一标识</span></span><br><span class="line"><span class="string">    :param action: 用户访问的接口标识(即用户在客户端进行的动作)</span></span><br><span class="line"><span class="string">    :param time_zone: 接口限制的时间段</span></span><br><span class="line"><span class="string">    :param time_zone: 限制的时间段内允许多少请求通过</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    key = <span class="string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(user, action)</span><br><span class="line">    now_ts = time.time() * <span class="number">1000</span></span><br><span class="line">    <span class="comment"># value是什么在这里并不重要，只要保证value的唯一性即可，这里使用毫秒时间戳作为唯一值</span></span><br><span class="line">    value = now_ts </span><br><span class="line">    <span class="comment"># 时间窗口左边界</span></span><br><span class="line">    old_ts = now_ts - (time_zone * <span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 记录行为</span></span><br><span class="line">    redis_conn.zadd(key, value, now_ts)</span><br><span class="line">    <span class="comment"># 删除时间窗口之前的数据</span></span><br><span class="line">    redis_conn.zremrangebyscore(key, <span class="number">0</span>, old_ts)</span><br><span class="line">    <span class="comment"># 获取窗口内的行为数量</span></span><br><span class="line">    count = redis_conn.zcard(key)</span><br><span class="line">    <span class="comment"># 设置一个过期时间免得占空间</span></span><br><span class="line">    redis_conn.expire(key, time_zone + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> count <span class="keyword">or</span> count &lt; times:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>sql语句对数据库表进行加锁和解锁</title>
    <url>/2019/08/19/sql%E8%AF%AD%E5%8F%A5%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%BF%9B%E8%A1%8C%E5%8A%A0%E9%94%81%E5%92%8C%E8%A7%A3%E9%94%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="如何处理大量数据并发操作"><a href="#如何处理大量数据并发操作" class="headerlink" title="如何处理大量数据并发操作"></a>如何处理大量数据并发操作</h1><p>文件缓存，数据库缓存，优化sql,数据分流,数据库表的横向和纵向划分，使用协程处理并发,优化代码结构,使用协程处理并发！</p>
<h1 id="锁的概概"><a href="#锁的概概" class="headerlink" title="锁的概概"></a>锁的概概</h1><span id="more"></span>
<h2 id="一-为什么要引入锁"><a href="#一-为什么要引入锁" class="headerlink" title="一. 为什么要引入锁"></a>一. 为什么要引入锁</h2><p>多个用户同时对数据库的并发操作时会带来以下数据不一致的问题:<br>丢失更新<br>A,B两个用户读同一数据并进行修改,其中一个用户的修改结果破坏了另一个修改的结果,比如订票系统<br>脏读<br>A用户修改了数据,随后B用户又读出该数据,但A用户因为某些原因取消了对数据的修改,数据恢复原值,此时B得到的数据就与数据库内的数据产生了不一致<br>不可重复读<br>A用户读取数据,随后B用户读出该数据并修改,此时A用户再读取数据时发现前后两次的值不一致<br>并发控制的主要方法是封锁,锁就是在一段时间内禁止用户做某些操作以避免产生数据不一致</p>
<h2 id="二-Mysql中的锁"><a href="#二-Mysql中的锁" class="headerlink" title="二. Mysql中的锁"></a>二. Mysql中的锁</h2><h3 id="1-锁分类"><a href="#1-锁分类" class="headerlink" title="1.锁分类"></a>1.锁分类</h3><ol>
<li>按操作划分：DML锁，DDL锁</li>
<li>按锁的粒度划分：表级锁、行级锁、页级锁</li>
<li>按锁级别划分：共享锁、排他锁</li>
<li>按加锁方式划分：自动锁、显示锁</li>
<li>按使用方式划分：乐观锁、悲观锁</li>
</ol>
<h3 id="2-乐观锁实现方法"><a href="#2-乐观锁实现方法" class="headerlink" title="2. 乐观锁实现方法"></a><strong>2. 乐观锁实现方法</strong></h3><ol>
<li>每次获取商品时，不对该商品加锁。</li>
<li>在更新数据的时候需要比较程序中的库存量与数据库中的库存量是否相等，如果相等则进行更新</li>
<li>反之程序重新获取库存量，再次进行比较，直到两个库存量的数值相等才进行数据更新。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 乐观锁实现加一操作代码</span></span><br><span class="line"><span class="comment"># 我们可以看到，只有当对数量-1操作时才会加锁，只有当程序中值和数据库中的值相等时才正真执行。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">//不加锁</span></span><br><span class="line"><span class="string">select id,name,stock where id=1;</span></span><br><span class="line"><span class="string">//业务处理</span></span><br><span class="line"><span class="string">begin;</span></span><br><span class="line"><span class="string">update shop set stock=stock-1 where id=1 and stock=stock;</span></span><br><span class="line"><span class="string">commit;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-悲观锁"><a href="#3-悲观锁" class="headerlink" title="3.悲观锁"></a>3.悲观锁</h3><ol>
<li>每次获取商品时，对该商品加排他锁。</li>
<li>也就是在用户A获取获取 id&#x3D;1 的商品信息时对该行记录加锁，期间其他用户阻塞等待访问该记录。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 悲观锁实现加一操作代码</span></span><br><span class="line"><span class="comment"># 我们可以看到，首先通过begin开启一个事物，在获得shop信息和修改数据的整个过程中都对数据加锁，保证了数据的一致性。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">begin;</span></span><br><span class="line"><span class="string">select id,name,stock as old_stock from shop  where id=1 for update;</span></span><br><span class="line"><span class="string">update shop set stock=stock-1 where id=1 and stock=old_stock;</span></span><br><span class="line"><span class="string">commit</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-排它锁"><a href="#4-排它锁" class="headerlink" title="4.排它锁"></a>4.排它锁</h3><ol>
<li>排它锁又叫写锁，如果事务T对A加上排它锁，则其它事务都不能对A加任何类型的锁。获准排它锁的事务既能读数据，又能写数据。</li>
<li>用法 ： SELECT _ FOR_UPDATE</li>
</ol>
<h3 id="5-共享锁-share-lock"><a href="#5-共享锁-share-lock" class="headerlink" title="5.共享锁(share lock)"></a>5.共享锁(share lock)</h3><ol>
<li>共享锁又叫读锁，如果事务T对A加上共享锁，则其它事务只能对A再加共享锁，不能加其它锁。</li>
<li>获准共享锁的事务只能读数据，不能写数据。</li>
<li>用法： SELECT … LOCK IN SHARE MODE;</li>
</ol>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>python调用钉钉机器人发送群消息</title>
    <url>/2020/11/19/python%E8%B0%83%E7%94%A8%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E9%80%81%E7%BE%A4%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="一、添加钉钉机器人"><a href="#一、添加钉钉机器人" class="headerlink" title="一、添加钉钉机器人"></a><strong>一、添加钉钉机器人</strong></h2><p>步骤一，登录钉钉，在机器人管理页面选择“自定义”机器人，输入机器人名字并选择要发送消息的群。如果需要的话，可以为机器人设置一个头像。点击“完成添加”，完成后会生成Webhook地址。</p>
<span id="more"></span>
<p>步骤二，点击“复制”按钮，即可获得这个机器人对应的Webhook地址，其格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxx</span><br></pre></td></tr></table></figure>

<h2 id="二、获取timestamp与sign参数"><a href="#二、获取timestamp与sign参数" class="headerlink" title="二、获取timestamp与sign参数"></a>二、获取timestamp与sign参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 获取timestamp参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">str</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取sign参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">secret = <span class="string">&#x27;this is secret&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">secret_enc = secret.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string_to_sign = <span class="string">&#x27;&#123;&#125;\n&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(timestamp, secret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string_to_sign_enc = string_to_sign.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hmac_code = hmac.new(secret_enc, string_to_sign_enc, digestmod=hashlib.sha256).digest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sign = urllib.parse.quote_plus(base64.b64encode(hmac_code))</span><br></pre></td></tr></table></figure>

<h2 id="三、推送消息完整代码"><a href="#三、推送消息完整代码" class="headerlink" title="三、推送消息完整代码"></a>三、推送消息完整代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> common.common_logger <span class="keyword">import</span> Logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对接钉钉消息通知</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己写的记录日志方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">basepagelog = Logger(<span class="string">&#x27;logger&#x27;</span>, <span class="string">r&#x27;D:\po_test\outputs\\&#x27;</span>).getlog()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dingding</span>(<span class="params">test_report</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    timestamp = <span class="built_in">str</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    secret = <span class="string">&#x27;this is secret&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    secret_enc = secret.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    string_to_sign = <span class="string">&#x27;&#123;&#125;\n&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(timestamp, secret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    string_to_sign_enc = string_to_sign.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    hmac_code = hmac.new(secret_enc, string_to_sign_enc, digestmod=hashlib.sha256).digest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sign = urllib.parse.quote_plus(base64.b64encode(hmac_code))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    access_token = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;https://oapi.dingtalk.com/robot/send?access_token=&#123;&#125;&amp;timestamp=&#123;&#125;&amp;sign=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(access_token,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                                                                             timestamp, sign)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取当前时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    str_time = time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送的消息格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    data = &#123;<span class="string">&quot;msgtype&quot;</span>: <span class="string">&quot;markdown&quot;</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;markdown&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;title&quot;</span>: <span class="string">&quot;测试已完成&quot;</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;text&quot;</span>: <span class="string">r&quot;#### &#123;&#125;测试报告生成成功 \n&gt; 存放地址：\\192.168.1.80\share\TestFolder\自动化分享\测试文件夹\n&gt; &quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="string">r&quot;![微信截图_20200817153548.png](https://i.loli.net/2020/08/17/gKVw2qTXYf3aPRG.png)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="string">r&quot;\n&gt; ###### &#123;&#125;生成成功\n&quot;</span>.<span class="built_in">format</span>(test_report, str_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;at&quot;</span>: &#123;<span class="string">&quot;atMobiles&quot;</span>: [<span class="string">&quot;15386174586&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    message = requests.post(url, json.dumps(data), headers=headers).json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将操作的状态记录到日志中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;errmsg&#x27;</span>] == <span class="string">&#x27;ok&#x27;</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> basepagelog.info(<span class="string">&#x27;钉钉消息推送成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> basepagelog.error(<span class="string">&#x27;钉钉消息推送失败&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第三方应用</category>
      </categories>
      <tags>
        <tag>第三方应用</tag>
      </tags>
  </entry>
  <entry>
    <title>主键约束和唯一性约束</title>
    <url>/2018/11/19/%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F%E5%92%8C%E5%94%AF%E4%B8%80%E6%80%A7%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-主键约束（PRIMARY-KEY）"><a href="#1-主键约束（PRIMARY-KEY）" class="headerlink" title="1.主键约束（PRIMARY KEY）"></a>1.主键约束（PRIMARY KEY）</h2><ol>
<li>主键用于唯一地标识表中的每一条记录，可以定义一列或多列为主键。</li>
<li>是不可能（或很难）更新．</li>
<li>主键列上没有任何两行具有相同值（即重复值），不允许空（NULL）．</li>
<li>主健可作外健，唯一索引不可；</li>
</ol>
<h3 id="2-唯一性约束（UNIQUE）"><a href="#2-唯一性约束（UNIQUE）" class="headerlink" title="2.唯一性约束（UNIQUE）"></a>2.唯一性约束（UNIQUE）</h3><span id="more"></span>
<ol>
<li>唯一性约束用来限制不受主键约束的列上的数据的唯一性，用于作为访问某行的可选手段，一个表上可以放置多个唯一性约束．</li>
<li>只要唯一就可以更新．</li>
<li>即表中任意两行在 指定列上都不允许有相同的值，允许空（NULL）．</li>
<li>一个表上可以放置多个唯一性约束</li>
</ol>
<h3 id="3-唯一索引（INDEX）"><a href="#3-唯一索引（INDEX）" class="headerlink" title="3.唯一索引（INDEX）"></a>3.唯一索引（INDEX）</h3><p>创建唯一索引可以确保任何生成重复键值的尝试都会失败。</p>
<p>唯一性约束和主键约束的区别<br>（1）.唯一性约束允许在该列上存在NULL值，而主键约束的限制更为严格，不但不允许有重复，而且也不允许有空值。<br>（2）.在创建唯一性约束和主键约束时可以创建聚集索引和非聚集索引，但在 默认情况下主键约束产生聚集索引，而唯一性约束产生非聚集索引<br>约束和索引， 前者是用来检查数据的正确性，后者用来实现数据查询的优化，目的不同。<br>唯一性约束与唯一索引有所不同：</p>
<p>（1）.创建唯一约束会在Oracle中创建一个Constraint，同时也会创建一个该约束对应的唯一索引。</p>
<p>（2）.创建唯一索引只会创建一个唯一索引，不会创建Constraint。</p>
<p>也就是说其实唯一约束是通过创建唯一索引来实现的。</p>
<p>在删除时这两者也有一定的区别：</p>
<p>删除唯一约束时可以只删除约束而不删除对应的索引，所以对应的列还是必须唯一的，</p>
<p>而删除了唯一索引的话就可以插入不唯一的值。</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/2021/11/15/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="给定一个整数数组-nums-和一个整数目标值-target，请你在该数组中找出-和为目标值-target-的那-两个-整数，并返回它们的数组下标。"><a href="#给定一个整数数组-nums-和一个整数目标值-target，请你在该数组中找出-和为目标值-target-的那-两个-整数，并返回它们的数组下标。" class="headerlink" title="给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。"></a>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</h3><h3 id="你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。"><a href="#你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。" class="headerlink" title="你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。"></a>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</h3><h3 id="参考了大神们的解法，通过哈希来求解，这里通过字典来模拟哈希查询的过程。"><a href="#参考了大神们的解法，通过哈希来求解，这里通过字典来模拟哈希查询的过程。" class="headerlink" title="参考了大神们的解法，通过哈希来求解，这里通过字典来模拟哈希查询的过程。"></a>参考了大神们的解法，通过哈希来求解，这里通过字典来模拟哈希查询的过程。</h3><h3 id="个人理解这种办法其实就是字典记录了-num1-和-num2-的值和位置，而省了再查找-num2-索引的步骤。"><a href="#个人理解这种办法其实就是字典记录了-num1-和-num2-的值和位置，而省了再查找-num2-索引的步骤。" class="headerlink" title="个人理解这种办法其实就是字典记录了 num1 和 num2 的值和位置，而省了再查找 num2 索引的步骤。"></a>个人理解这种办法其实就是字典记录了 num1 和 num2 的值和位置，而省了再查找 num2 索引的步骤。</h3><h3 id="不需要-mun2-不需要在整个-dict-中去查找。可以在-num1-之前的-dict-中查找，因此就只需要一次循环可解决。"><a href="#不需要-mun2-不需要在整个-dict-中去查找。可以在-num1-之前的-dict-中查找，因此就只需要一次循环可解决。" class="headerlink" title="不需要 mun2 不需要在整个 dict 中去查找。可以在 num1 之前的 dict 中查找，因此就只需要一次循环可解决。"></a>不需要 <code>mun2</code> 不需要在整个 <code>dict</code> 中去查找。可以在 <code>num1</code> 之前的 <code>dict</code> 中查找，因此就只需要一次循环可解决。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">nums, target</span>):</span><br><span class="line">    hashmap=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i,num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        <span class="keyword">if</span> hashmap.get(target - num) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> [i,hashmap.get(target - num)]</span><br><span class="line">        hashmap[num] = i <span class="comment">#这句不能放在if语句之前，解决list中有重复值或target-num=num的情况</span></span><br></pre></td></tr></table></figure>

<h3 id="通过字典的方法，查找效率快很多，执行速度大幅缩短，共-12ms。"><a href="#通过字典的方法，查找效率快很多，执行速度大幅缩短，共-12ms。" class="headerlink" title="通过字典的方法，查找效率快很多，执行速度大幅缩短，共 12ms。"></a>通过字典的方法，查找效率快很多，执行速度大幅缩短，共 12ms。</h3><p><img src="https://img-blog.csdnimg.cn/4e489f986f3c4ec2ae0600645026e783.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASzExNjMzMTc1MTU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>发布订阅模式与观察者模式</title>
    <url>/2020/11/16/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E4%B8%8E%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>设计模式并非是软件开发的专业术语，实际上，“模式”最早诞生于建筑学。</p>
<p>设计模式的定义是：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案。通俗一点说，设计模式是在某种场合下对某个问题的一种解决方案。如果再通俗一点说，设计模式就是给面向对象软件开发中的一些好的设计取个名字。</p>
<span id="more"></span>

<p>这些“好的设计”并不是谁发明的，而是早已存在于软件开发中。一个稍有经验的程序员也许在不知不觉中数次使用过这些设计模式。GoF（Gang of Four–四人组，《设计模式》几位作者）最大的功绩是把这些“好的设计”从浩瀚的面向对象世界中挑选出来，并且给予它们一个好听又好记的名字。</p>
<p>设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案，他不是一个死的机制，他是一种思想，一种写代码的形式。每种语言对于各种设计模式都有他们自己的实现方式，对于某些设计模式来说，可能在某些语言下并不适用，比如工厂方法模式对于javascript。模式应该用在正确的地方。而哪些才算正确的地方，只有在我们深刻理解了模式的意图之后，再结合项目的实际场景才会知道。。</p>
<p>模式的社区一直在发展。GoF在1995年提出了23种设计模式，但模式不仅仅局限于这23种，后面增加到了24种。在这20多年的时间里，也许有更多的模式已经被人发现并总结了出来，比如一些JavaScript 图书中会提到模块模式、沙箱模式等。这些“模式”能否被世人公认并流传下来，还有待时间验证。</p>
<h2 id="观察者模式（Observer-Pattern）"><a href="#观察者模式（Observer-Pattern）" class="headerlink" title="观察者模式（Observer Pattern）"></a>观察者模式（Observer Pattern）</h2><p>观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新。观察者模式属于行为型模式，行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯。</p>
<p>观察者模式有一个别名叫“发布-订阅模式”，或者说是“订阅-发布模式”，订阅者和订阅目标是联系在一起的，当订阅目标发生改变时，逐个通知订阅者。我们可以用报纸期刊的订阅来形象的说明，当你订阅了一份报纸，每天都会有一份最新的报纸送到你手上，有多少人订阅报纸，报社就会发多少份报纸，报社和订报纸的客户就是上面文章开头所说的“一对多”的依赖关系。</p>
<h2 id="发布订阅模式（Pub-Sub-Pattern）"><a href="#发布订阅模式（Pub-Sub-Pattern）" class="headerlink" title="发布订阅模式（Pub-Sub Pattern）"></a>发布订阅模式（Pub-Sub Pattern）</h2><p>其实24种基本的设计模式中并没有发布订阅模式，上面也说了，他只是观察者模式的一个别称。</p>
<p>但是经过时间的沉淀，似乎他已经强大了起来，已经独立于观察者模式，成为另外一种不同的设计模式。</p>
<p>在现在的发布订阅模式中，称为发布者的消息发送者不会将消息直接发送给订阅者，这意味着发布者和订阅者不知道彼此的存在。在发布者和订阅者之间存在第三个组件，称为消息代理或调度中心或中间件，它维持着发布者和订阅者之间的联系，过滤所有发布者传入的消息并相应地分发它们给订阅者。</p>
<p>举一个例子，你在微博上关注了A，同时其他很多人也关注了A，那么当A发布动态的时候，微博就会为你们推送这条动态。A就是发布者，你是订阅者，微博就是调度中心，你和A是没有直接的消息往来的，全是通过微博来协调的（你的关注，A的发布动态）。</p>
<h2 id="观察者模式和发布订阅模式有什么区别？"><a href="#观察者模式和发布订阅模式有什么区别？" class="headerlink" title="观察者模式和发布订阅模式有什么区别？"></a>观察者模式和发布订阅模式有什么区别？</h2><p>我们先来看下这两个模式的实现结构：<br><img src="https://img-blog.csdnimg.cn/20190329182209470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hmODcyOTE0MzM0,size_16,color_FFFFFF,t_70" alt="模式结构"></p>
<p><strong>观察者模式：</strong> 观察者（Observer）直接订阅（Subscribe）主题（Subject），而当主题被激活的时候，会触发（Fire Event）观察者里的事件。</p>
<p><strong>发布订阅模式：</strong> 订阅者（Subscriber）把自己想订阅的事件注册（Subscribe）到调度中心（Topic），当发布者（Publisher）发布该事件（Publish topic）到调度中心，也就是该事件触发时，由调度中心统一调度（Fire Event）订阅者注册到调度中心的处理代码。</p>
<p>我们再来看下这两个模式的代码案例：（猎人发布与订阅任务）</p>
<p><strong>观察者模式：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//有一家猎人工会，其中每个猎人都具有发布任务(publish)，订阅任务(subscribe)的功能</span></span><br><span class="line"><span class="comment">//他们都有一个订阅列表来记录谁订阅了自己</span></span><br><span class="line"><span class="comment">//定义一个猎人类</span></span><br><span class="line"><span class="comment">//包括姓名，级别，订阅列表</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Hunter</span>(<span class="params">name, level</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">level</span> = level</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">list</span> = []</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Hunter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">publish</span> = <span class="keyword">function</span> (<span class="params">money</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">level</span> + <span class="string">&#x27;猎人&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;寻求帮助&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index</span>)&#123;</span><br><span class="line">    	<span class="title function_">item</span>(money)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Hunter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">subscribe</span> = <span class="keyword">function</span> (<span class="params">targrt, fn</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">level</span> + <span class="string">&#x27;猎人&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;订阅了&#x27;</span> + targrt.<span class="property">name</span>)</span><br><span class="line">    targrt.<span class="property">list</span>.<span class="title function_">push</span>(fn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//猎人工会走来了几个猎人</span></span><br><span class="line"><span class="keyword">let</span> hunterMing = <span class="keyword">new</span> <span class="title class_">Hunter</span>(<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;黄金&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> hunterJin = <span class="keyword">new</span> <span class="title class_">Hunter</span>(<span class="string">&#x27;小金&#x27;</span>, <span class="string">&#x27;白银&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> hunterZhang = <span class="keyword">new</span> <span class="title class_">Hunter</span>(<span class="string">&#x27;小张&#x27;</span>, <span class="string">&#x27;黄金&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> hunterPeter = <span class="keyword">new</span> <span class="title class_">Hunter</span>(<span class="string">&#x27;Peter&#x27;</span>, <span class="string">&#x27;青铜&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Peter等级较低，可能需要帮助，所以小明，小金，小张都订阅了Peter</span></span><br><span class="line">hunterMing.<span class="title function_">subscribe</span>(hunterPeter, <span class="keyword">function</span>(<span class="params">money</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;小明表示：&#x27;</span> + (money &gt; <span class="number">200</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;暂时很忙，不能&#x27;</span>) + <span class="string">&#x27;给予帮助&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">hunterJin.<span class="title function_">subscribe</span>(hunterPeter, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;小金表示：给予帮助&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">hunterZhang.<span class="title function_">subscribe</span>(hunterPeter, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;小金表示：给予帮助&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Peter遇到困难，赏金198寻求帮助</span></span><br><span class="line">hunterPeter.<span class="title function_">publish</span>(<span class="number">198</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//猎人们(观察者)关联他们感兴趣的猎人(目标对象)，如Peter，当Peter有困难时，会自动通知给他们（观察者）</span></span><br></pre></td></tr></table></figure>

<p><strong>发布订阅模式：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//定义一家猎人工会</span></span><br><span class="line"><span class="comment">//主要功能包括任务发布大厅(topics)，以及订阅任务(subscribe)，发布任务(publish)</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">HunterUnion</span> = &#123;</span><br><span class="line">	<span class="attr">type</span>: <span class="string">&#x27;hunt&#x27;</span>,</span><br><span class="line">	<span class="attr">topics</span>: <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>),</span><br><span class="line">	<span class="attr">subscribe</span>: <span class="keyword">function</span> (<span class="params">topic, fn</span>)&#123;</span><br><span class="line">	    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">topics</span>[topic])&#123;</span><br><span class="line">	      	<span class="variable language_">this</span>.<span class="property">topics</span>[topic] = [];  </span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="variable language_">this</span>.<span class="property">topics</span>[topic].<span class="title function_">push</span>(fn);</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">publish</span>: <span class="keyword">function</span> (<span class="params">topic, money</span>)&#123;</span><br><span class="line">	    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">topics</span>[topic])</span><br><span class="line">	      	<span class="keyword">return</span>;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">let</span> fn <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">topics</span>[topic])&#123;</span><br><span class="line">	    	<span class="title function_">fn</span>(money)</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个猎人类</span></span><br><span class="line"><span class="comment">//包括姓名，级别</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Hunter</span>(<span class="params">name, level</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">level</span> = level</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//猎人可在猎人工会发布订阅任务</span></span><br><span class="line"><span class="title class_">Hunter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">subscribe</span> = <span class="keyword">function</span> (<span class="params">topic, fn</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">level</span> + <span class="string">&#x27;猎人&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;订阅了狩猎&#x27;</span> + topic + <span class="string">&#x27;的任务&#x27;</span>)</span><br><span class="line">    <span class="title class_">HunterUnion</span>.<span class="title function_">subscribe</span>(topic, fn)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Hunter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">publish</span> = <span class="keyword">function</span> (<span class="params">topic, money</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">level</span> + <span class="string">&#x27;猎人&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;发布了狩猎&#x27;</span> + topic + <span class="string">&#x27;的任务&#x27;</span>)</span><br><span class="line">    <span class="title class_">HunterUnion</span>.<span class="title function_">publish</span>(topic, money)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//猎人工会走来了几个猎人</span></span><br><span class="line"><span class="keyword">let</span> hunterMing = <span class="keyword">new</span> <span class="title class_">Hunter</span>(<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;黄金&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> hunterJin = <span class="keyword">new</span> <span class="title class_">Hunter</span>(<span class="string">&#x27;小金&#x27;</span>, <span class="string">&#x27;白银&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> hunterZhang = <span class="keyword">new</span> <span class="title class_">Hunter</span>(<span class="string">&#x27;小张&#x27;</span>, <span class="string">&#x27;黄金&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> hunterPeter = <span class="keyword">new</span> <span class="title class_">Hunter</span>(<span class="string">&#x27;Peter&#x27;</span>, <span class="string">&#x27;青铜&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//小明，小金，小张分别订阅了狩猎tiger的任务</span></span><br><span class="line">hunterMing.<span class="title function_">subscribe</span>(<span class="string">&#x27;tiger&#x27;</span>, <span class="keyword">function</span>(<span class="params">money</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;小明表示：&#x27;</span> + (money &gt; <span class="number">200</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;不&#x27;</span>) + <span class="string">&#x27;接取任务&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">hunterJin.<span class="title function_">subscribe</span>(<span class="string">&#x27;tiger&#x27;</span>, <span class="keyword">function</span>(<span class="params">money</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;小金表示：接取任务&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">hunterZhang.<span class="title function_">subscribe</span>(<span class="string">&#x27;tiger&#x27;</span>, <span class="keyword">function</span>(<span class="params">money</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;小张表示：接取任务&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Peter订阅了狩猎sheep的任务</span></span><br><span class="line">hunterPeter.<span class="title function_">subscribe</span>(<span class="string">&#x27;sheep&#x27;</span>, <span class="keyword">function</span>(<span class="params">money</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Peter表示：接取任务&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Peter发布了狩猎tiger的任务</span></span><br><span class="line">hunterPeter.<span class="title function_">publish</span>(<span class="string">&#x27;tiger&#x27;</span>, <span class="number">198</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//猎人们发布(发布者)或订阅(观察者/订阅者)任务都是通过猎人工会(调度中心)关联起来的，他们没有直接的交流。</span></span><br></pre></td></tr></table></figure>

<p>观察者模式和发布订阅模式最大的区别就是发布订阅模式有个事件调度中心。</p>
<p>观察者模式由具体目标调度，每个被订阅的目标里面都需要有对观察者的处理，这种处理方式比较直接粗暴，但是会造成代码的冗余。</p>
<p>而发布订阅模式中统一由调度中心进行处理，订阅者和发布者互不干扰，消除了发布者和订阅者之间的依赖。这样一方面实现了解耦，还有就是可以实现更细粒度的一些控制。比如发布者发布了很多消息，但是不想所有的订阅者都接收到，就可以在调度中心做一些处理，类似于权限控制之类的。还可以做一些节流操作。</p>
<h2 id="观察者模式是不是发布订阅模式"><a href="#观察者模式是不是发布订阅模式" class="headerlink" title="观察者模式是不是发布订阅模式"></a>观察者模式是不是发布订阅模式</h2><p>网上关于这个问题的回答，出现了两极分化，有认为发布订阅模式就是观察者模式的，也有认为观察者模式和发布订阅模式是真不一样的。</p>
<p>其实我不知道发布订阅模式是不是观察者模式，就像我不知道辨别模式的关键是设计意图还是设计结构（理念），虽然《JavaScript设计模式与开发实践》一书中说了<code>分辨模式的关键是意图而不是结构</code>。</p>
<p>如果以结构来分辨模式，发布订阅模式相比观察者模式多了一个中间件订阅器，所以发布订阅模式是不同于观察者模式的；如果以意图来分辨模式，他们都是<code>实现了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新</code>，那么他们就是同一种模式，发布订阅模式是在观察者模式的基础上做的优化升级。</p>
<p>不过，不管他们是不是同一个设计模式，他们的实现方式确实有差别，我们在使用的时候应该根据场景来判断选择哪个。</p>
]]></content>
      <categories>
        <category>智能高并发审批流系统</category>
      </categories>
      <tags>
        <tag>智能高并发审批流系统</tag>
      </tags>
  </entry>
  <entry>
    <title>周末时光</title>
    <url>/2023/05/21/%E5%91%A8%E6%9C%AB%E6%97%B6%E5%85%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="北京房山高尔夫球场"><a href="#北京房山高尔夫球场" class="headerlink" title="北京房山高尔夫球场"></a>北京房山高尔夫球场</h2><p><a href="https://postimg.cc/T5PwPYZt"><img src="https://i.postimg.cc/T1VWCKQv/Wechat-IMG164.jpg" alt="Wechat-IMG164.jpg"></a><br><a href="https://postimg.cc/RNkMkRVs"><img src="https://i.postimg.cc/x1Ccbpr2/Wechat-IMG165.jpg" alt="Wechat-IMG165.jpg"></a><br><a href="https://postimg.cc/68XkV1QX"><img src="https://i.postimg.cc/t4Z9jKQY/Wechat-IMG166.jpg" alt="Wechat-IMG166.jpg"></a></p>
<h2 id="废弃铁路"><a href="#废弃铁路" class="headerlink" title="废弃铁路"></a>废弃铁路</h2><p><a href="https://postimg.cc/yWTp4Y1w"><img src="https://i.postimg.cc/T2zzbpZY/Wechat-IMG167.jpg" alt="Wechat-IMG167.jpg"></a><br><a href="https://postimg.cc/mtfLqjrd"><img src="https://i.postimg.cc/VL5JJHPc/Wechat-IMG168.jpg" alt="Wechat-IMG168.jpg"></a><br><a href="https://postimg.cc/KRGGxznL"><img src="https://i.postimg.cc/vH9c7xTP/Wechat-IMG169.jpg" alt="Wechat-IMG169.jpg"></a><br><a href="https://postimg.cc/kB0TWVfR"><img src="https://i.postimg.cc/Bn6R9HFp/Wechat-IMG170.jpg" alt="Wechat-IMG170.jpg"></a><br><a href="https://postimg.cc/hh9vK6NF"><img src="https://i.postimg.cc/4409QT53/Wechat-IMG171.jpg" alt="Wechat-IMG171.jpg"></a><br><a href="https://postimg.cc/GBwh0jz3"><img src="https://i.postimg.cc/XvXZCHC5/Wechat-IMG172.jpg" alt="Wechat-IMG172.jpg"></a></p>
<h2 id="麦当劳"><a href="#麦当劳" class="headerlink" title="麦当劳"></a>麦当劳</h2><p><a href="https://postimg.cc/06PRdXcS"><img src="https://i.postimg.cc/XvyjWT5s/Wechat-IMG173.jpg" alt="Wechat-IMG173.jpg"></a></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>周末时光</tag>
      </tags>
  </entry>
  <entry>
    <title>利用docker实现Elasticsearch全文检索部署</title>
    <url>/2020/12/01/%E5%88%A9%E7%94%A8docker%E5%AE%9E%E7%8E%B0Elasticsearch%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="Elasticsearch是什么？"><a href="#Elasticsearch是什么？" class="headerlink" title="Elasticsearch是什么？"></a>Elasticsearch是什么？</h1><p>Elasticsearch 是一个分布式可扩展的实时搜索和分析引擎,一个建立在全文搜索引擎 Apache Lucene(TM) 基础上的搜索引擎.当然 Elasticsearch 并不仅仅是 Lucene 那么简单，它不仅包括了全文搜索功能，还可以进行以下工作:</p>
<ul>
<li>分布式实时文件存储，并将每一个字段都编入索引，使其可以被搜索。</li>
<li>实时分析的分布式搜索引擎。</li>
<li>可以扩展到上百台服务器，处理PB级别的结构化或非结构化数据。<span id="more"></span></li>
</ul>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>先说Elasticsearch的文件存储，Elasticsearch是面向文档型数据库，一条数据在这里就是一个文档，用JSON作为文档序列化的格式，比如下面这条用户数据：</p>
<p>{ “name” : “John”, “sex” : “Male”, “age” : 25, “birthDate”: “1990&#x2F;05&#x2F;01”, “about” : “I love to go rock climbing”, “interests”: [ “sports”, “music” ] }</p>
<p>用Mysql这样的数据库存储就会容易想到建立一张User表，有balabala的字段等，在Elasticsearch里这就是一个文档，当然这个文档会属于一个User的类型，各种各样的类型存在于一个索引当中。这里有一份简易的将Elasticsearch和关系型数据术语对照表:</p>
<p>关系数据库 ⇒ 数据库 ⇒ 表 ⇒ 行 ⇒ 列(Columns)</p>
<p>Elasticsearch ⇒ 索引(Index) ⇒ 类型(type) ⇒ 文档(Docments) ⇒ 字段(Fields)</p>
<h1 id="介绍如何使用docker来部署-Elasticsearch"><a href="#介绍如何使用docker来部署-Elasticsearch" class="headerlink" title="介绍如何使用docker来部署 Elasticsearch"></a>介绍如何使用docker来部署 Elasticsearch</h1><p>首先使用docker 下载 Elasticsearch镜像 这里我使用的是7.0以上的版本，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.2.0</span><br></pre></td></tr></table></figure>

<p>随后运行Elasticsearch镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name es -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=singl</span><br></pre></td></tr></table></figure>

<p>容器别名我们就用缩写es来替代，通过 9200 端口并使用 Elasticsearch 的原生 传输 协议和集群交互。集群中的节点通过端口 9300 彼此通信。如果这个端口没有打开，节点将无法形成一个集群，运行模式先走单节点模式。</p>
<p>启动成功之后可以使用浏览器访问一下 <code>localhost:9200</code></p>
<p><img src="https://www.alfred-alan.online/assets/img/Elasticsearch/es.png" alt="es"></p>
<p>然后将配置复制到主机内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 容器id:/usr/share/elasticsearch/config/elasticsearch.yml ./elasticsearch.yml</span><br></pre></td></tr></table></figure>

<p>打开elasticsearch.yml，可以自己加一些配置，比如允许跨域访问，这样你这台Elasticsearch就可以被别的服务器访问了，这是微服务全文检索系统架构的第一步。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim elasticsearch.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cluster.name: &quot;docker-cluster&quot;</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>

<p>然后停止容器 并且删除他</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop es</span><br><span class="line">docker rm es</span><br></pre></td></tr></table></figure>

<p>再次启动 Elasticsearch 服务器，而这次需要 使用 -v 挂载命令 将我们配置好的设置文件 挂载到容器中去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name es -v home/bywlop/file/es/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -d elasticsearch:7.2.0</span><br></pre></td></tr></table></figure>

<p>挂载这个地方需要注意 <code>/es/elasticsearch.yml</code></p>
<p>我使用相对路径挂载启动会报错</p>
<p>建议使用绝对路径来挂载启动</p>
<p>另外还有一个需要注意的点，就是Elasticsearch存储数据也可以通过-v命令挂载出来，如果不对数据进行挂载，当容器被停止或者删除，数据也会不复存在，所以挂载后存储在宿主机会比较好一点，命令是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name es -v home/bywlop/file/es/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v home/bywlop/file/es/data:/usr/share/elasticsearch/data -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -d elasticsearch:7.2.0</span><br></pre></td></tr></table></figure>

<p>而仅仅启动还不够</p>
<p>我们需要使用它</p>
<p>这里我使用Python 来进行操作</p>
<p>安装依赖的库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install elasticsearch</span><br></pre></td></tr></table></figure>

<p>新建es_test.py测试脚本</p>
<p>建立Elasticsearch的检索实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from elasticsearch import Elasticsearch es = Elasticsearch(hosts=[&#123;&quot;host&quot;:&#x27;Docker容器所在的ip&#x27;, &quot;port&quot;: 9200&#125;])</span><br></pre></td></tr></table></figure>

<p>这里的host指容器ip，因为可以扩展集群，所以是一个list，需要注意一点，如果是Win10就是系统分配的那个ip,Centos或者Mac os直接写127.0.0.1即可。</p>
<p>建立索引(Index)，这里我们创建一个名为 article 的索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result = es.indices.create(index=&#x27;article&#x27;, ignore=400)</span><br><span class="line">print(result) </span><br><span class="line">&#123;&#x27;acknowledged&#x27;: True, &#x27;shards_acknowledged&#x27;: True, &#x27;index&#x27;: &#x27;article&#x27;&#125; </span><br></pre></td></tr></table></figure>

<p>其中的 acknowledged 字段表示创建操作执行成功。</p>
<p>删除索引也是类似的，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result = es.indices.delete(index=&#x27;article&#x27;, ignore=[400, 404])</span><br><span class="line">print(result)</span><br><span class="line">&#123;&#x27;acknowledged&#x27;: True&#125;</span><br></pre></td></tr></table></figure>

<p>插入数据，Elasticsearch 就像 MongoDB 一样，在插入数据的时候可以直接插入结构化字典数据，插入数据可以调用 index() 方法，这里索引和数据是强关联的，所以插入时需要指定之前建立好的索引。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data = &#123;&#x27;title&#x27;: &#x27;我在北京学习人工智能&#x27;, &#x27;url&#x27;: &#x27;http://123.com&#x27;,&#x27;content&#x27;:&quot;在北京学习&quot;&#125;</span><br><span class="line">result = es.index(index=&#x27;article&#x27;,body=data)</span><br><span class="line">print(result)</span><br><span class="line">&#123;&#x27;_index&#x27;: &#x27;article&#x27;, &#x27;_type&#x27;: &#x27;_doc&#x27;, &#x27;_id&#x27;: &#x27;GyJgb3MBuQaE6wYOApTh&#x27;, &#x27;_version&#x27;: 1, &#x27;result&#x27;: &#x27;created&#x27;, &#x27;_shards&#x27;: &#123;&#x27;total&#x27;: 2, &#x27;successful&#x27;: 1, &#x27;failed&#x27;: 0&#125;, &#x27;_seq_no&#x27;: 5, &#x27;_primary_term&#x27;: 1&#125; </span><br></pre></td></tr></table></figure>

<p>可以看到index()方法会自动生成一个唯一id，当然我们也可以使用create()方法创建数据，不同的是create()需要手动指定一个id。</p>
<p>修改数据也非常简单，我们同样需要指定数据的 id 和内容，调用 index() 方法即可，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data = &#123;&#x27;content&#x27;:&quot;在北京学习python&quot;&#125;</span><br><span class="line">#修改</span><br><span class="line">result = es.index(index=&#x27;article&#x27;,body=data, id=&#x27;GyJgb3MBuQaE6wYOApTh&#x27;)</span><br><span class="line">&#123;&#x27;_index&#x27;: &#x27;article&#x27;, &#x27;_type&#x27;: &#x27;_doc&#x27;, &#x27;_id&#x27;: &#x27;GyJgb3MBuQaE6wYOApTh&#x27;, &#x27;_version&#x27;: 2, &#x27;result&#x27;: &#x27;updated&#x27;, &#x27;_shards&#x27;: &#123;&#x27;total&#x27;: 2, &#x27;successful&#x27;: 1, &#x27;failed&#x27;: 0&#125;, &#x27;_seq_no&#x27;: 6, &#x27;_primary_term&#x27;: 1&#125; </span><br></pre></td></tr></table></figure>

<p>删除数据，可以调用 delete() 方法，指定需要删除的数据 id 即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除</span><br><span class="line">result = es.delete(index=&#x27;article&#x27;,id=&#x27;GyJgb3MBuQaE6wYOApTh&#x27;)</span><br><span class="line">print(result)</span><br><span class="line">&#123;&#x27;_index&#x27;: &#x27;article&#x27;, &#x27;_type&#x27;: &#x27;_doc&#x27;, &#x27;_id&#x27;: &#x27;GyJgb3MBuQaE6wYOApTh&#x27;, &#x27;_version&#x27;: 3, &#x27;result&#x27;: &#x27;deleted&#x27;, &#x27;_shards&#x27;: &#123;&#x27;total&#x27;: 2, &#x27;successful&#x27;: 1, &#x27;failed&#x27;: 0&#125;, &#x27;_seq_no&#x27;: 7, &#x27;_primary_term&#x27;: 1&#125; </span><br></pre></td></tr></table></figure>

<p>查询数据，这里可以简单的查询全量数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询</span><br><span class="line">result = es.search(index=&#x27;article&#x27;)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">&#123;&#x27;took&#x27;: 1079, &#x27;timed_out&#x27;: False, &#x27;_shards&#x27;: &#123;&#x27;total&#x27;: 1, &#x27;successful&#x27;: 1, &#x27;skipped&#x27;: 0, &#x27;failed&#x27;: 0&#125;, &#x27;hits&#x27;: &#123;&#x27;total&#x27;: &#123;&#x27;value&#x27;: 5, &#x27;relation&#x27;: &#x27;eq&#x27;&#125;, &#x27;max_score&#x27;: 1.0, &#x27;hits&#x27;: [&#123;&#x27;_index&#x27;: &#x27;article&#x27;, &#x27;_type&#x27;: &#x27;blog&#x27;, &#x27;_id&#x27;: &#x27;1&#x27;, &#x27;_score&#x27;: 1.0, &#x27;_source&#x27;: &#123;&#x27;title&#x27;: &#x27;我在北京学习人工智能&#x27;, &#x27;url&#x27;: &#x27;http://123.com&#x27;, &#x27;content&#x27;: &#x27;在北京学习&#x27;&#125;&#125;, &#123;&#x27;_index&#x27;: &#x27;article&#x27;, &#x27;_type&#x27;: &#x27;blog&#x27;, &#x27;_id&#x27;: &#x27;FyIdb3MBuQaE6wYO8JQR&#x27;, &#x27;_score&#x27;: 1.0, &#x27;_source&#x27;: &#123;&#x27;title&#x27;: &#x27;你好&#x27;, &#x27;content&#x27;: &#x27;你好123&#x27;&#125;&#125;, &#123;&#x27;_index&#x27;: &#x27;article&#x27;, &#x27;_type&#x27;: &#x27;blog&#x27;, &#x27;_id&#x27;: &#x27;GCIeb3MBuQaE6wYOnpSv&#x27;, &#x27;_score&#x27;: 1.0, &#x27;_source&#x27;: &#123;&#x27;title&#x27;: &#x27;你好&#x27;, &#x27;url&#x27;: &#x27;http://123.com&#x27;, &#x27;content&#x27;: &#x27;你好123&#x27;&#125;&#125;, &#123;&#x27;_index&#x27;: &#x27;article&#x27;, &#x27;_type&#x27;: &#x27;blog&#x27;, &#x27;_id&#x27;: &#x27;GSJfb3MBuQaE6wYOu5RD&#x27;, &#x27;_score&#x27;: 1.0, &#x27;_source&#x27;: &#123;&#x27;title&#x27;: &#x27;你好&#x27;, &#x27;url&#x27;: &#x27;http://123.com&#x27;, &#x27;content&#x27;: &#x27;你好123&#x27;&#125;&#125;, &#123;&#x27;_index&#x27;: &#x27;article&#x27;, &#x27;_type&#x27;: &#x27;blog&#x27;, &#x27;_id&#x27;: &#x27;GiJfb3MBuQaE6wYO5pR4&#x27;, &#x27;_score&#x27;: 1.0, &#x27;_source&#x27;: &#123;&#x27;title&#x27;: &#x27;你好&#x27;, &#x27;url&#x27;: &#x27;http://123.com&#x27;, &#x27;content&#x27;: &#x27;你好123&#x27;&#125;&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>还可以进行全文检索，这才是体现 Elasticsearch 搜索引擎特性的地方。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mapping = &#123;</span><br><span class="line">    &#x27;query&#x27;: &#123;</span><br><span class="line">        &#x27;match&#x27;: &#123;</span><br><span class="line">            &#x27;content&#x27;: &#x27;学习 北京&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = es.search(index=&#x27;article&#x27;,body=mapping)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">&#123;&#x27;took&#x27;: 4, &#x27;timed_out&#x27;: False, &#x27;_shards&#x27;: &#123;&#x27;total&#x27;: 1, &#x27;successful&#x27;: 1, &#x27;skipped&#x27;: 0, &#x27;failed&#x27;: 0&#125;, &#x27;hits&#x27;: &#123;&#x27;total&#x27;: &#123;&#x27;value&#x27;: 1, &#x27;relation&#x27;: &#x27;eq&#x27;&#125;, &#x27;max_score&#x27;: 4.075481, &#x27;hits&#x27;: [&#123;&#x27;_index&#x27;: &#x27;article&#x27;, &#x27;_type&#x27;: &#x27;blog&#x27;, &#x27;_id&#x27;: &#x27;1&#x27;, &#x27;_score&#x27;: 4.075481, &#x27;_source&#x27;: &#123;&#x27;title&#x27;: &#x27;我在北京学习人工智能&#x27;, &#x27;url&#x27;: &#x27;http://123.com&#x27;, &#x27;content&#x27;: &#x27;在北京学习&#x27;&#125;&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，检索时会对对应的字段全文检索，结果还会按照检索关键词的相关性进行排序，这就是一个基本的搜索引擎雏形。</p>
<p>除了这些最基本的操作，Elasticsearch还支持很多复杂的查询，可以参照最新的7.2版本文档：</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.2/query-dsl.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.2/query-dsl.html</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>在Python中是如何管理内存的</title>
    <url>/2020/11/29/%E5%9C%A8Python%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98%E7%9A%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>Python有一个私有堆空间来保存所有的对象和数据结构。作为开发者，我们无法访问它，是解释器在管理它。但是有了核心API后，我们可以访问一些工具。Python内存管理器控制内存分配。<br>另外，内置垃圾回收器会回收使用所有的未使用内存，所以使其适用于堆空间。</p>
<span id="more"></span>
<h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>Python采用了类似Windows内核对象一样的方式来对内存进行管理。每一个对象，都维护这一个对指向该对对象的引用的计数。当变量被绑定在一个对象上的时候，该变量的引用计数就是1，(还有另外一些情况也会导致变量引用计数的增加),系统会自动维护这些标签，并定时扫描，当某标签的引用计数变为0的时候，该对就会被回收。</p>
<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>python不像C++，Java等语言一样，他们可以不用事先声明变量类型而直接对变量进行赋值。对Python语言来讲，对象的类型和内存都是在运行时确定的。这也是为什么我们称Python语言为动态类型的原因(这里我们把动态类型可以简单的归结为对变量内存地址的分配是在运行时自动判断变量类型并对变量进行赋值)。</p>
<h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><ol>
<li>分代回收是建立在标记清除技术基础之上的，是一种以空间换时间的操作方式。</li>
<li>Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代）</li>
<li>他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。</li>
<li>新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发</li>
<li>把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推</li>
<li>老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。</li>
</ol>
<h2 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h2><p>在Python中万物皆对象</p>
<p>不存在基本数据类型，<code>0, 1.2, True, False, &quot;abc&quot;</code>等，这些全都是对象</p>
<p>所有对象, 都会在内存中开辟一块空间进行存储</p>
<p>2.1 会根据不同的类型以及内容, 开辟不同的空间大小进行存储 2.2 返回该空间的地址给外界接收(称为”引用”), 用于后续对这个对象的操作 2.3 可通过 id() 函数获取内存地址(10进制) 2.4 通过 hex() 函数可以查看对应的16进制地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">p = Person()</span><br><span class="line">print(p)</span><br><span class="line">print(id(p))</span><br><span class="line">print(hex(id(p)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; 打印结果</span><br><span class="line"></span><br><span class="line">&lt;__main__.Person object at 0x107030470&gt;</span><br><span class="line">4412605552</span><br><span class="line">0x107030470</span><br></pre></td></tr></table></figure>

<p>对于整数和短小的字符, Python会进行缓存; 不会创建多个相同对象</p>
<p>此时, 被多次赋值, 只会有多份引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num1 = 2</span><br><span class="line">num2 = 2</span><br><span class="line">print(id(num1), id(num2))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; 打印结果</span><br><span class="line"></span><br><span class="line">4366584464 4366584464</span><br></pre></td></tr></table></figure>

<p>容器对象, 存储的其他对象, 仅仅是其他对象的引用, 并不是其他对象本身</p>
<p>4.1 比如字典, 列表, 元组这些”容器对象” 4.2 全局变量是由一个大字典进行引用 4.3 可通过 global() 查看</p>
<p>2 对象回收 2.1 引用计数器 2.1.1概念</p>
<p>一个对象, 会记录着自身被引用的个数 每增加一个引用, 这个对象的引用计数会自动+1 每减少一个引用, 这个对象的引用计数会自动-1</p>
<p>引用计数+1场景</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、对象被创建</span><br><span class="line">    p1 = Person()</span><br><span class="line">2、对象被引用</span><br><span class="line">    p2 = p1</span><br><span class="line">3、对象被作为参数，传入到一个函数中</span><br><span class="line">    log(p1)</span><br><span class="line">    这里注意会+2, 因为内部有两个属性引用着这个参数</span><br><span class="line">4、对象作为一个元素，存储在容器中</span><br><span class="line">    l = [p1]</span><br></pre></td></tr></table></figure>

<p>引用计数-1场景</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、对象的别名被显式销毁</span><br><span class="line">    del p1</span><br><span class="line">2、对象的别名被赋予新的对象</span><br><span class="line">    p1 = 123</span><br><span class="line">3、一个对象离开它的作用域</span><br><span class="line">    一个函数执行完毕时</span><br><span class="line">    内部的局部变量关联的对象, 它的引用计数就会-1</span><br><span class="line">4、对象所在的容器被销毁，或从容器中删除对象</span><br></pre></td></tr></table></figure>

<p>查看引用计数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">class Person:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">p1 = Person() # 1</span><br><span class="line"></span><br><span class="line">print(sys.getrefcount(p1)) # 2</span><br><span class="line"></span><br><span class="line">p2 = p1 # 2</span><br><span class="line"></span><br><span class="line">print(sys.getrefcount(p1)) # 3</span><br><span class="line"></span><br><span class="line">del p2 # 1</span><br><span class="line">print(sys.getrefcount(p1)) # 2</span><br><span class="line"></span><br><span class="line">del p1</span><br><span class="line"># print(sys.getrefcount(p1)) #error，因为上一行代码执行类p1对象已经销毁</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; 打印结果</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>循环引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 循环引用</span><br><span class="line">class Person:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Dog:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">p = Person() </span><br><span class="line">d = Dog()   </span><br><span class="line"></span><br><span class="line">p.pet = d </span><br><span class="line">d.master = p</span><br></pre></td></tr></table></figure>

<p>对象间互相引用，导致对象不能通过引用计数器进行销毁</p>
<p>手动触发垃圾回收，挥手循环引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import objgraph</span><br><span class="line">import gc</span><br><span class="line"></span><br><span class="line">class Person:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Dog:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">p = Person()</span><br><span class="line">d = Dog()</span><br><span class="line"></span><br><span class="line">p.pet = d</span><br><span class="line">d.master = p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">del p</span><br><span class="line">del d</span><br><span class="line"></span><br><span class="line">gc.collect() #手动触发垃圾回收</span><br><span class="line"></span><br><span class="line">print(objgraph.count(&quot;Person&quot;))</span><br><span class="line">print(objgraph.count(&quot;Dog&quot;))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; 打印结果</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>在线人数</title>
    <url>/2020/11/19/%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="在线人数"><a href="#在线人数" class="headerlink" title="在线人数"></a>在线人数</h1><p>实现逻辑是，当一个用户访问，把用户的ip作为key放到cache中，然后设置online_ips 作为key来存放所有的ip,每次请求会先取出online_ips 的所有值，任何在根据这个list 来从cache中取出依然存在的ip，再次存入online_ips。</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个过程要放到中间层中的 </span></span><br><span class="line"><span class="comment"># PV_middleware.py</span></span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="comment"># EXLCLE_URL 这个是排除一些路由不进行统计的 比如</span></span><br><span class="line"><span class="comment"># EXLCLE_URL = [&#x27;/admin/&#x27;]</span></span><br><span class="line"><span class="keyword">from</span> HuberyBlog.settings <span class="keyword">import</span> EXCLUDE_URL </span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要在settings 中添加这个中间件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PvVisitViewMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;统计在线人数和用户访问&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">if</span> request.path <span class="keyword">not</span> <span class="keyword">in</span> EXCLUDE_URL:</span><br><span class="line">            ip = get_ip(request)</span><br><span class="line">            online_ips = cache.get(<span class="string">&quot;online_ips&quot;</span>, [])</span><br><span class="line">            <span class="keyword">if</span> online_ips:</span><br><span class="line">              <span class="comment"># 根据取出的ip list获取缓存中仍然存在的ip</span></span><br><span class="line">              <span class="comment"># 这里要加个list py2 中是直接获取的list python3中获取的是一个对象 网上很多都没加</span></span><br><span class="line">                online_ips = <span class="built_in">list</span>(cache.get_many(online_ips).keys())</span><br><span class="line">            cache.<span class="built_in">set</span>(ip, <span class="number">0</span>, <span class="number">1</span> * <span class="number">60</span>)</span><br><span class="line">            <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> online_ips:</span><br><span class="line">                online_ips.append(ip)</span><br><span class="line">            cache.<span class="built_in">set</span>(<span class="string">&quot;online_ips&quot;</span>, online_ips)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ip</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取ip</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span> <span class="keyword">in</span> request.META:</span><br><span class="line">        ip = request.META.get(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ip = request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> ip</span><br></pre></td></tr></table></figure>

<h1 id="什么是-utf8mb4"><a href="#什么是-utf8mb4" class="headerlink" title="什么是 utf8mb4"></a>什么是 utf8mb4</h1><p>utf8mb4 是 utf8 的超集，理论上原来使用 utf8，然后将字符集修改为 utf8mb4，也不会对已有的utf8 编码读取产生任何问题。</p>
]]></content>
      <categories>
        <category>智能高并发审批流系统</category>
      </categories>
      <tags>
        <tag>智能高并发审批流系统</tag>
      </tags>
  </entry>
  <entry>
    <title>在北京郊区的时光</title>
    <url>/2022/11/05/%E5%9C%A8%E5%8C%97%E4%BA%AC%E9%83%8A%E5%8C%BA%E7%9A%84%E6%97%B6%E5%85%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><a href="https://postimg.cc/SJPCNjRW"><img src="https://i.postimg.cc/pLWZCFt1/Wechat-IMG201.jpg" alt="Wechat-IMG201.jpg"></a><br><a href="https://postimg.cc/94BSPvX7"><img src="https://i.postimg.cc/Y9cH7HJb/Wechat-IMG202.jpg" alt="Wechat-IMG202.jpg"></a><br><a href="https://postimg.cc/FYynm2LB"><img src="https://i.postimg.cc/Sx30L4Nk/Wechat-IMG203.jpg" alt="Wechat-IMG203.jpg"></a><br><a href="https://postimg.cc/kVMwCD92"><img src="https://i.postimg.cc/KYBWngHD/Wechat-IMG204.jpg" alt="Wechat-IMG204.jpg"></a><br><a href="https://postimg.cc/WdTwmtd5"><img src="https://i.postimg.cc/cL8kSn0G/Wechat-IMG205.jpg" alt="Wechat-IMG205.jpg"></a><br><a href="https://postimg.cc/K4TPdtL9"><img src="https://i.postimg.cc/rynfRJpL/Wechat-IMG206.jpg" alt="Wechat-IMG206.jpg"></a><br><a href="https://postimg.cc/nMqmdpbg"><img src="https://i.postimg.cc/L4bV88y9/Wechat-IMG207.jpg" alt="Wechat-IMG207.jpg"></a></p>
]]></content>
      <categories>
        <category>周末</category>
      </categories>
      <tags>
        <tag>郊区</tag>
      </tags>
  </entry>
  <entry>
    <title>工单处理逻辑</title>
    <url>/2020/11/19/%E5%B7%A5%E5%8D%95%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>1、在新建工单的页面中，用户选择工单类型，后台根据“工单类型与工作流关联”的表来确定使用的工作流</p>
<p>2、根据确定的工作流弹出工单信息输入界面（内容包括标题、详细信息、附件等等，具体表单字段通过改工作流的初始状态来确定），根据工作流的初始状态查找状态表来确定可以执行的操作（提交、保存，修改，审批等），将这些操作作为该界面的按钮，用户填写完工单基本信息后点击相应的操作按钮，来实现状态的流转。后台结合前端提交的数据并生成工单必备的字段信息（工单创建时间、创建人、工单类型、自定义字段等），将这些信息写到工单表里。其中当前状态、当前处理人通过工单流转表和状态表来确定 用户执行相应操作后导致的属性变化</p>
<span id="more"></span>
<p>3、通过创建工单页面插入到工单表中的数据“审批人”、“当前审批人”来确定哪些人有权限处理这些工单。 如果处理人类型不是“个人”,那就根据这条数据中的“当前状态“来确定接单方式，主动接单（有权限的人先执行接单操作将当前处理人变更为自己再处理），系统随机分配（后台在执行状态流转时随机设置工单当前处理人为符合条件的某一个人）</p>
<p>4、查看工单的界面通过 “工单查看页面表单的展现表”来确定 显示哪些字段</p>
<p>5、处理工单的界面通过“工单处理页面表单的展现表” 来确定显示哪些字段，以及哪些字段可以在处理过程中再次修改</p>
<p>6、工单在流转过程中会变更工单的状态。 系统根据流转表来确定当前状态可以执行的操作(同意、拒绝、等等)。 工单新建的时候需要有个初始状态， 这样工单新建时，系统才能判断新建页面用户可以执行的操作(如 提交、保存 等等)。 </p>
]]></content>
      <categories>
        <category>智能高并发审批流系统</category>
      </categories>
      <tags>
        <tag>智能高并发审批流系统</tag>
      </tags>
  </entry>
  <entry>
    <title>回文数</title>
    <url>/2021/11/17/%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="给你一个整数-x-，如果-x-是一个回文整数，返回-true-；否则，返回-false-。"><a href="#给你一个整数-x-，如果-x-是一个回文整数，返回-true-；否则，返回-false-。" class="headerlink" title="给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。"></a>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</h3><h3 id="回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121-是回文，而-123-不是。"><a href="#回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121-是回文，而-123-不是。" class="headerlink" title="回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。"></a>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</h3><h3 id="python两种解法"><a href="#python两种解法" class="headerlink" title="python两种解法:"></a>python两种解法:</h3><h3 id="第一种执行用时64ms。"><a href="#第一种执行用时64ms。" class="headerlink" title="第一种执行用时64ms。"></a>第一种执行用时64ms。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def reverse(x):</span><br><span class="line">    if str(x)[::-1] == str(x):</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure>

<h3 id="第二种执行用时108ms"><a href="#第二种执行用时108ms" class="headerlink" title="第二种执行用时108ms."></a>第二种执行用时108ms.</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(x)[::-<span class="number">1</span>] == <span class="built_in">str</span>(x)</span><br><span class="line"><span class="built_in">print</span>(reverse(<span class="number">121</span>))</span><br></pre></td></tr></table></figure>

<h3 id="实现-strStr-函数。"><a href="#实现-strStr-函数。" class="headerlink" title="实现 strStr() 函数。"></a>实现 strStr() 函数。</h3><h3 id="给你两个字符串-haystack-和-needle-，请你在-haystack-字符串中找出-needle-字符串出现的第一个位置（下标从-0-开始）。如果不存在，则返回-1-。"><a href="#给你两个字符串-haystack-和-needle-，请你在-haystack-字符串中找出-needle-字符串出现的第一个位置（下标从-0-开始）。如果不存在，则返回-1-。" class="headerlink" title="给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  -1 。"></a>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  -1 。</h3><h3 id="python执行用时20ms。"><a href="#python执行用时20ms。" class="headerlink" title="python执行用时20ms。"></a>python执行用时20ms。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">strStr</span>(<span class="params">haystack, needle</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> needle == <span class="string">&#x27;&#x27;</span> <span class="keyword">else</span> haystack.find(needle)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>大规格文件的上传优化</title>
    <url>/2020/12/03/%E5%A4%A7%E8%A7%84%E6%A0%BC%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>工作流项目上线的时候，我们采用容器式部署，先打包成镜像，因为镜像太大，所以我们使用分片上传，今天我们来使用Vue.js+Element-ui结合后端FastApi实现大型文件分片上传。</p>
<p>分片上传并不是什么新概念，尤其是大文件传输的处理中经常会被使用，其实原理很简单，原则就是化整为零，将大文件进行分片处理，切割成若干小文件，随后为每个分片创建一个新的临时文件来保存其内容，待全部分片上传完毕后，后端再按顺序读取所有临时文件的内容，将数据写入新文件中，最后将临时文件再删掉。大体流程请见下图：</p>
<span id="more"></span>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20200910230933_27047.png" alt="img"></p>
<p>​    其实现在市面上有很多前端的三方库都集成了分片上传的功能，比如百度的WebUploader，遗憾的是它已经淡出历史舞台，无人维护了。现在比较推荐主流的库是vue-simple-uploader，不过饿了么公司开源的elementUI市场占有率还是非常高的，但其实大家所不知道的是，这个非常著名的前端UI库也已经许久没人维护了，Vue3.0版本出来这么久了，也没有做适配，由此可见大公司的开源产品还是需要给业务让步。本次我们利用elementUI的自定义上传结合后端的网红框架FastAPI来实现分片上传。</p>
<p>​    首先前端需要安装需要的库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install element-ui --save</span><br><span class="line">npm install spark-md5 --save</span><br><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure>

<p>​    随后在入口文件main.js中进行配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Axios</span> <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">axios</span> = <span class="title class_">Axios</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">QS</span> <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">qs</span> = <span class="variable constant_">QS</span>;</span><br></pre></td></tr></table></figure>

<p>​    配置好之后，设计方案，前端通过elementUI上传时，通过分片大小的阈值对文件进行切割，并且记录每一片文件的切割顺序(chunk)，在这个过程中，通过SparkMD5来计算文件的唯一标识(防止多个文件同时上传的覆盖问题identifier)，当然也可以用hash加盐，sha256;在每一次分片文件的上传中，会将分片文件实体，切割顺序（chunk）以及唯一标识（identifier）异步发送到后端接口(fastapi)，后端将chunk和identifier结合在一起作为临时文件写入服务器磁盘中，当前端将所有的分片文件都发送完毕后，最后请求一次后端另外一个接口，后端将所有文件合并。</p>
<p>​    根据方案，前端建立chunkupload.js文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">SparkMD5</span> <span class="keyword">from</span> <span class="string">&#x27;spark-md5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//错误信息</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getError</span>(<span class="params">action, option, xhr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> msg</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">response</span>) &#123;</span><br><span class="line">        msg = <span class="string">`<span class="subst">$&#123;xhr.response.error || xhr.response&#125;</span>`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.<span class="property">responseText</span>) &#123;</span><br><span class="line">        msg = <span class="string">`<span class="subst">$&#123;xhr.responseText&#125;</span>`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        msg = <span class="string">`fail to post <span class="subst">$&#123;action&#125;</span> <span class="subst">$&#123;xhr.status&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(msg)</span><br><span class="line">    err.<span class="property">status</span> = xhr.<span class="property">status</span></span><br><span class="line">    err.<span class="property">method</span> = <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    err.<span class="property">url</span> = action</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上传成功完成合并之后，获取服务器返回的json</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBody</span>(<span class="params">xhr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> text = xhr.<span class="property">responseText</span> || xhr.<span class="property">response</span></span><br><span class="line">    <span class="keyword">if</span> (!text) &#123;</span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分片上传的自定义请求，以下请求会覆盖element的默认上传行为</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">upload</span>(<span class="params">option</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">XMLHttpRequest</span> === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> spark = <span class="keyword">new</span> <span class="title class_">SparkMD5</span>.<span class="title class_">ArrayBuffer</span>()<span class="comment">// md5的ArrayBuffer加密类</span></span><br><span class="line">    <span class="keyword">const</span> fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>()<span class="comment">// 文件读取类</span></span><br><span class="line">    <span class="keyword">const</span> action = option.<span class="property">action</span> <span class="comment">// 文件上传上传路径</span></span><br><span class="line">    <span class="keyword">const</span> chunkSize = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1</span> <span class="comment">// 单个分片大小，这里测试用1m</span></span><br><span class="line">    <span class="keyword">let</span> md5 = <span class="string">&#x27;&#x27;</span><span class="comment">// 文件的唯一标识</span></span><br><span class="line">    <span class="keyword">const</span> optionFile = option.<span class="property">file</span> <span class="comment">// 需要分片的文件</span></span><br><span class="line">    <span class="keyword">let</span> fileChunkedList = [] <span class="comment">// 文件分片完成之后的数组</span></span><br><span class="line">    <span class="keyword">const</span> percentage = [] <span class="comment">// 文件上传进度的数组，单项就是一个分片的进度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件开始分片，push到fileChunkedList数组中， 并用第一个分片去计算文件的md5</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; optionFile.<span class="property">size</span>; i = i + chunkSize) &#123;</span><br><span class="line">        <span class="keyword">const</span> tmp = optionFile.<span class="title function_">slice</span>(i, <span class="title class_">Math</span>.<span class="title function_">min</span>((i + chunkSize), optionFile.<span class="property">size</span>))</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">            fileReader.<span class="title function_">readAsArrayBuffer</span>(tmp)</span><br><span class="line">        &#125;</span><br><span class="line">        fileChunkedList.<span class="title function_">push</span>(tmp)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在文件读取完毕之后，开始计算文件md5，作为文件唯一标识</span></span><br><span class="line">    fileReader.<span class="property">onload</span> = <span class="keyword">async</span> (e) =&gt; &#123;</span><br><span class="line">        spark.<span class="title function_">append</span>(e.<span class="property">target</span>.<span class="property">result</span>)</span><br><span class="line">        md5 = spark.<span class="title function_">end</span>() + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件唯一标识--------&#x27;</span>, md5)</span><br><span class="line">        <span class="comment">// 将fileChunkedList转成FormData对象，并加入上传时需要的数据</span></span><br><span class="line">        fileChunkedList = fileChunkedList.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">            <span class="keyword">if</span> (option.<span class="property">data</span>) &#123;</span><br><span class="line">                <span class="comment">// 额外加入外面传入的data数据</span></span><br><span class="line">                <span class="title class_">Object</span>.<span class="title function_">keys</span>(option.<span class="property">data</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">                    formData.<span class="title function_">append</span>(key, option.<span class="property">data</span>[key])</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 这些字段看后端需要哪些，就传哪些，也可以自己追加额外参数</span></span><br><span class="line">                formData.<span class="title function_">append</span>(option.<span class="property">filename</span>, item, option.<span class="property">file</span>.<span class="property">name</span>)<span class="comment">// 文件</span></span><br><span class="line">                formData.<span class="title function_">append</span>(<span class="string">&#x27;chunkNumber&#x27;</span>, index + <span class="number">1</span>)<span class="comment">// 当前文件块</span></span><br><span class="line">                formData.<span class="title function_">append</span>(<span class="string">&#x27;chunkSize&#x27;</span>, chunkSize)<span class="comment">// 单个分块大小</span></span><br><span class="line">                formData.<span class="title function_">append</span>(<span class="string">&#x27;currentChunkSize&#x27;</span>, item.<span class="property">size</span>)<span class="comment">// 当前分块大小</span></span><br><span class="line">                formData.<span class="title function_">append</span>(<span class="string">&#x27;totalSize&#x27;</span>, optionFile.<span class="property">size</span>)<span class="comment">// 文件总大小</span></span><br><span class="line">                formData.<span class="title function_">append</span>(<span class="string">&#x27;identifier&#x27;</span>, md5)<span class="comment">// 文件标识</span></span><br><span class="line">                formData.<span class="title function_">append</span>(<span class="string">&#x27;filename&#x27;</span>, option.<span class="property">file</span>.<span class="property">name</span>)<span class="comment">// 文件名</span></span><br><span class="line">                formData.<span class="title function_">append</span>(<span class="string">&#x27;totalChunks&#x27;</span>, fileChunkedList.<span class="property">length</span>)<span class="comment">// 总块数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">formData</span>: formData, <span class="attr">index</span>: index &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新上传进度条百分比的方法</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">updataPercentage</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> loaded = <span class="number">0</span><span class="comment">// 当前已经上传文件的总大小</span></span><br><span class="line">            percentage.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                loaded += item</span><br><span class="line">            &#125;)</span><br><span class="line">            e.<span class="property">percent</span> = loaded / optionFile.<span class="property">size</span> * <span class="number">100</span></span><br><span class="line">            option.<span class="title function_">onProgress</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建队列上传任务，limit是上传并发数，默认会用两个并发</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">sendRequest</span>(<span class="params">chunks, limit = <span class="number">2</span></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> len = chunks.<span class="property">length</span></span><br><span class="line">                <span class="keyword">let</span> counter = <span class="number">0</span></span><br><span class="line">                <span class="keyword">let</span> isStop = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">const</span> <span class="title function_">start</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isStop) &#123;</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">const</span> item = chunks.<span class="title function_">shift</span>()</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>()</span><br><span class="line">                    <span class="keyword">if</span> (item) &#123;</span><br><span class="line">                        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">                        <span class="keyword">const</span> index = item.<span class="property">index</span></span><br><span class="line">                        <span class="comment">// 分片上传失败回调</span></span><br><span class="line">                        xhr.<span class="property">onerror</span> = <span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">e</span>) &#123;</span><br><span class="line">                            isStop = <span class="literal">true</span></span><br><span class="line">                            <span class="title function_">reject</span>(e)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 分片上传成功回调</span></span><br><span class="line">                        xhr.<span class="property">onload</span> = <span class="keyword">function</span> <span class="title function_">onload</span>(<span class="params"></span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (xhr.<span class="property">status</span> &lt; <span class="number">200</span> || xhr.<span class="property">status</span> &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">                                isStop = <span class="literal">true</span></span><br><span class="line">                                <span class="title function_">reject</span>(<span class="title function_">getError</span>(action, option, xhr))</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (counter === len - <span class="number">1</span>) &#123;</span><br><span class="line">                                <span class="comment">// 最后一个上传完成</span></span><br><span class="line">                                <span class="title function_">resolve</span>()</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                counter++</span><br><span class="line">                                <span class="title function_">start</span>()</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 分片上传中回调</span></span><br><span class="line">                        <span class="keyword">if</span> (xhr.<span class="property">upload</span>) &#123;</span><br><span class="line">                            xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span> <span class="title function_">progress</span>(<span class="params">e</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (e.<span class="property">total</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                    e.<span class="property">percent</span> = e.<span class="property">loaded</span> / e.<span class="property">total</span> * <span class="number">100</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                percentage[index] = e.<span class="property">loaded</span></span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">                                <span class="title function_">updataPercentage</span>(e)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, action, <span class="literal">true</span>)</span><br><span class="line">                        <span class="keyword">if</span> (option.<span class="property">withCredentials</span> &amp;&amp; <span class="string">&#x27;withCredentials&#x27;</span> <span class="keyword">in</span> xhr) &#123;</span><br><span class="line">                            xhr.<span class="property">withCredentials</span> = <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">const</span> headers = option.<span class="property">headers</span> || &#123;&#125;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> headers) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (headers.<span class="title function_">hasOwnProperty</span>(item) &amp;&amp; headers[item] !== <span class="literal">null</span>) &#123;</span><br><span class="line">                                xhr.<span class="title function_">setRequestHeader</span>(item, headers[item])</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 文件开始上传</span></span><br><span class="line">                        xhr.<span class="title function_">send</span>(item.<span class="property">formData</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (limit &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">start</span>()</span><br><span class="line">                    &#125;, <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>)</span><br><span class="line">                    limit -= <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用上传队列方法 等待所有文件上传完成</span></span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">sendRequest</span>(fileChunkedList,<span class="number">2</span>)</span><br><span class="line">            <span class="comment">// 这里的参数根据自己实际情况写</span></span><br><span class="line">            <span class="keyword">const</span> data = &#123;</span><br><span class="line">                <span class="attr">identifier</span>: md5,</span><br><span class="line">                <span class="attr">filename</span>: option.<span class="property">file</span>.<span class="property">name</span>,</span><br><span class="line">                <span class="attr">totalSize</span>: optionFile.<span class="property">size</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 给后端发送文件合并请求</span></span><br><span class="line">            <span class="keyword">const</span> fileInfo = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">axios</span>(&#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8000/mergefile/&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">qs</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                 <span class="attr">headers</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ERRRR:: &quot;</span>, error.<span class="property">response</span>.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(fileInfo);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fileInfo.<span class="property">data</span>.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> success = <span class="title function_">getBody</span>(fileInfo.<span class="property">request</span>)</span><br><span class="line">                option.<span class="title function_">onSuccess</span>(success)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            option.<span class="title function_">onError</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    之后建立upload.vue模板文件，并且引入自定义上传控件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-upload</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:http-request</span>=<span class="string">&quot;chunkUpload&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:ref</span>=<span class="string">&quot;chunkUpload&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:action</span>=<span class="string">&quot;uploadUrl&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:data</span>=<span class="string">&quot;uploadData&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:on-error</span>=<span class="string">&quot;onError&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:before-remove</span>=<span class="string">&quot;beforeRemove&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//js部分</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> chunkUpload <span class="keyword">from</span> <span class="string">&#x27;./chunkUpload&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">uploadData</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//这里面放额外携带的参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//文件上传的路径</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">uploadUrl</span>: <span class="string">&#x27;http://localhost:8000/uploadfile/&#x27;</span>, <span class="comment">//文件上传的路径</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">chunkUpload</span>: chunkUpload <span class="comment">// 分片上传自定义方法，在头部引入了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onError</span>(<span class="params">err, file, fileList</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">chunkUploadXhr</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        item.<span class="title function_">abort</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$alert(<span class="string">&#x27;文件上传失败，请重试&#x27;</span>, <span class="string">&#x27;错误&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">beforeRemove</span>(<span class="params">file</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 如果正在分片上传，则取消分片上传</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (file.<span class="property">percentage</span> !== <span class="number">100</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">chunkUploadXhr</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          item.<span class="title function_">abort</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>​    这里定义的后端上传接口是：<a href="http://localhost:8000/uploadfile/">http://localhost:8000/uploadfile/</a> 合并文件接口是：<a href="http://localhost:8000/mergefile/">http://localhost:8000/mergefile/</a></p>
<p>​    此时启动前端的vue.js服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>​    页面效果见下图：</p>
<p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20200910230925_85281.png" alt="img"></p>
<p>​    前端搞定了，下面我们来编写接口，后端的任务相对简单，利用FastAPI接收分片文件、分片顺序以及唯一标识，并且将文件临时写入到服务器中，当最后一个分片文件完成上传后，第二个接口负责按照分片顺序合并所有文件，合并成功后再删除临时文件，用来节约空间，先安装依赖的三方库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install python-multipart</span><br></pre></td></tr></table></figure>

<p>​    当然了，由于是前后端分离项目，别忘了设置一下跨域，编写main.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> uploadfile <span class="keyword">import</span> router</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> HTMLResponse</span><br><span class="line"><span class="keyword">from</span> fastapi.staticfiles <span class="keyword">import</span> StaticFiles</span><br><span class="line"><span class="keyword">from</span> fastapi.templating <span class="keyword">import</span> Jinja2Templates</span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> database</span><br><span class="line"><span class="keyword">from</span> fastapi.middleware.cors <span class="keyword">import</span> CORSMiddleware</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">origins = [</span><br><span class="line">    <span class="string">&quot;*&quot;</span></span><br><span class="line">]</span><br><span class="line">app.add_middleware(</span><br><span class="line">    CORSMiddleware,</span><br><span class="line">    allow_origins=origins,</span><br><span class="line">    allow_credentials=<span class="literal">True</span>,</span><br><span class="line">    allow_methods=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">    allow_headers=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&quot;/static&quot;</span>, StaticFiles(directory=<span class="string">&quot;static&quot;</span>), name=<span class="string">&quot;static&quot;</span>)</span><br><span class="line"></span><br><span class="line">templates = Jinja2Templates(directory=<span class="string">&quot;templates&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.include_router(router)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.on_event(<span class="params"><span class="string">&quot;startup&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">startup</span>():</span><br><span class="line">    <span class="keyword">await</span> database.connect()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.on_event(<span class="params"><span class="string">&quot;shutdown&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">shutdown</span>():</span><br><span class="line">    <span class="keyword">await</span> database.disconnect()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>​    然后编写uploadfile.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@router.post(<span class="params"><span class="string">&quot;/uploadfile/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">uploadfile</span>(<span class="params">file: UploadFile = File(<span class="params">...</span>), chunkNumber: <span class="built_in">str</span> = Form(<span class="params">...</span>), identifier: <span class="built_in">str</span> = Form(<span class="params">...</span>)</span>):</span><br><span class="line"></span><br><span class="line">    task = identifier          <span class="comment"># 获取文件唯一标识符</span></span><br><span class="line">    chunk = chunkNumber        <span class="comment"># 获取该分片在所有分片中的序号</span></span><br><span class="line">    filename = <span class="string">&#x27;%s%s&#x27;</span> % (task,chunk)           <span class="comment"># 构成该分片唯一标识符</span></span><br><span class="line">    contents = <span class="keyword">await</span> file.read() <span class="comment">#异步读取文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./static/upload/%s&#x27;</span> % filename, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(contents)</span><br><span class="line">    <span class="built_in">print</span>(file.filename)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;filename&quot;</span>: file.filename&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@router.post(<span class="params"><span class="string">&quot;/mergefile/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">uploadfile</span>(<span class="params">identifier: <span class="built_in">str</span> = Form(<span class="params">...</span>), filename: <span class="built_in">str</span> = Form(<span class="params">...</span>)</span>):</span><br><span class="line"></span><br><span class="line">    target_filename = filename  <span class="comment"># 获取上传文件的文件名</span></span><br><span class="line">    task = identifier              <span class="comment"># 获取文件的唯一标识符</span></span><br><span class="line">    chunk = <span class="number">1</span>                                       <span class="comment"># 分片序号</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./static/upload/%s&#x27;</span> % target_filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> target_file:  <span class="comment"># 创建新文件</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                filename = <span class="string">&#x27;./static/upload/%s%d&#x27;</span> % (task,chunk)</span><br><span class="line">                <span class="comment"># 按序打开每个分片</span></span><br><span class="line">                source_file = <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">                <span class="comment"># 读取分片内容写入新文件</span></span><br><span class="line">                target_file.write(source_file.read())</span><br><span class="line">                source_file.close()</span><br><span class="line">            <span class="keyword">except</span> IOError:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            chunk += <span class="number">1</span></span><br><span class="line">            os.remove(filename)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;code&quot;</span>:<span class="number">200</span>&#125;</span><br></pre></td></tr></table></figure>

<p>​    值得一提的是这里我们使用UploadFile来定义文件参数，它的优势在于在接收存储文件过程中如果文件过大超过了内存限制就会存储在硬盘中，相当灵活，同时配合await关键字异步读取文件内容，提高了性能和效率。</p>
<p>​    启动后端服务测试一下效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uvicorn main:app --reload</span><br></pre></td></tr></table></figure>

<p>​    <img src="https://v3u.cn/v3u/Public/js/editor/attached/20200910230901_89291.png" alt="img"></p>
<p>​    可以看到，当我们上传一张2.9m的图片时，前端会根据设置好的的分片阈值将该图片切割为四份，传递给后端接口uploadfile后，后端在根据参数用接口mergefile将其合并，就完美的复原到了原始文件。</p>
]]></content>
      <categories>
        <category>运维开发</category>
      </categories>
      <tags>
        <tag>运维开发</tag>
      </tags>
  </entry>
  <entry>
    <title>更新日志</title>
    <url>/2023/11/02/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>以后更新日志将会单独文章发布, 请查看 <a href="https://cc1204.cn/2023/11/02/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/">更新日志</a></p>
</div>

<div class="note orange icon-padding flat"><i class="note-icon fas fa-pen"></i><p>你可以通过右下角的 简 按钮切换为简体显示</p>
</div>


<hr>
<h3 id="2023-10-25～2023-11-02"><a href="#2023-10-25～2023-11-02" class="headerlink" title="2023-10-25～2023-11-02"></a>2023-10-25～2023-11-02</h3><ul>
<li>项目初始化</li>
<li>博客基础美化工作</li>
<li>添加访客地球</li>
<li>将项目文件迁移到github上, 并绑定阿里云域</li>
<li>搭建waline评论系统, 并绑定国内域名</li>
<li>注册评论管理系统, 并对评论功能进行测试并验证</li>
<li>导航栏添加照片、读书、电影等模块, 接入豆瓣个人主页的数据 </li>
<li>新增音乐模块, 部分css文件增补、配置并接入网易云数据</li>
<li>增加全局吸底aplayer </li>
<li>新增百度统计功能</li>
<li>使用hexo douban命令，试图解决豆瓣读书页面书单显示不全的bug</li>
</ul>
<h3 id="2023-11-02-11-33-13"><a href="#2023-11-02-11-33-13" class="headerlink" title="2023-11-02 11:33:13"></a>2023-11-02 11:33:13</h3><p>更换博客封面及顶部默认封面</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_img:</span> <span class="string">http://qzs.qq.com/qzone/v6/v6_config/upload/upfile_2040396_1352170450.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">http://qzs.qq.com/qzone/v6/v6_config/upload/upfile_2040396_1352170450.jpg</span></span><br></pre></td></tr></table></figure>


<h3 id="2023-11-02-17-02-47"><a href="#2023-11-02-17-02-47" class="headerlink" title="2023-11-02 17:02:47"></a>2023-11-02 17:02:47</h3><p>添加右下角简繁体转换按钮，修改配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>


<h3 id="2023-11-02-17-16-03"><a href="#2023-11-02-17-16-03" class="headerlink" title="2023-11-02 17:16:03"></a>2023-11-02 17:16:03</h3><p>修改配置文件使首页显示标签</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span> <span class="comment"># Home Page</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 主頁文章日期是創建日或者更新日或都顯示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span> <span class="comment"># date/relative 顯示日期還是相對日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主頁是否顯示分類</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主頁是否顯示標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 顯示描述性文字</span></span><br></pre></td></tr></table></figure>


<h3 id="2023-11-03-14-48-02"><a href="#2023-11-03-14-48-02" class="headerlink" title="2023-11-03 14:48:02"></a>2023-11-03 14:48:02</h3><p>文字添加标签外挂并自定义icon, 图标在这里 <a href="https://fontawesome.com.cn/v5">Fontawesome中文网</a><br>修改 <font color="orange"><code>主题配置文件</code></font>, 这个只是通用设置，其他个性化配置以及具体用法请参考 <a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">标签外挂</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2024年快到了….</p>
</div>
<div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p>
</div>
<div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p>
</div>
<div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p>
</div>
<div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p>
</div>
<div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p>
</div>


<h3 id="2023-11-03-15-30-45"><a href="#2023-11-03-15-30-45" class="headerlink" title="2023-11-03 15:30:45"></a>2023-11-03 15:30:45</h3><p>打赏二维码图片损坏问题修复，原因是之前图片存在public下面的文件夹里，部署的时候，使用hexo clean清理缓存，导致图片损坏。<br>解决办法是: 直接使用图床生成的链接，替换掉原来的图片。安利一下目前正在使用的 <a href="https://postimages.org/">图床软件</a>，个人觉得非常好用。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sponsor/reward</span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">https://i.postimg.cc/V64YJr5T/Wechat-IMG98.jpg</span></span><br><span class="line">       <span class="attr">link:</span></span><br><span class="line">       <span class="attr">text:</span> <span class="string">wechat</span></span><br><span class="line"><span class="comment">#     - img: /img/alipay.jpg</span></span><br><span class="line"><span class="comment">#       link:</span></span><br><span class="line"><span class="comment">#       text: alipay</span></span><br></pre></td></tr></table></figure>

<h3 id="2023-11-03-16-57-02"><a href="#2023-11-03-16-57-02" class="headerlink" title="2023-11-03 16:57:02"></a>2023-11-03 16:57:02</h3><p>更换博客封面</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">https://i.postimg.cc/G2rVBYd5/00b9429a6e618ff3eca9e66d399e4762bf737417.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">https://i.postimg.cc/G2rVBYd5/00b9429a6e618ff3eca9e66d399e4762bf737417.jpg</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>版本内容更新</category>
      </categories>
      <tags>
        <tag>更新日志</tag>
      </tags>
  </entry>
  <entry>
    <title>整数反转</title>
    <url>/2021/11/23/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="给你一个-32-位的有符号整数-x-，返回将-x-中的数字部分反转后的结果。"><a href="#给你一个-32-位的有符号整数-x-，返回将-x-中的数字部分反转后的结果。" class="headerlink" title="给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。"></a>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</h3><h3 id="如果反转后整数超过-32-位的有符号整数的范围-−231-231-−-1-，就返回-0。"><a href="#如果反转后整数超过-32-位的有符号整数的范围-−231-231-−-1-，就返回-0。" class="headerlink" title="如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。"></a>如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。</h3><h3 id="假设环境不允许存储-64-位整数（有符号或无符号）。"><a href="#假设环境不允许存储-64-位整数（有符号或无符号）。" class="headerlink" title="假设环境不允许存储 64 位整数（有符号或无符号）。"></a>假设环境不允许存储 64 位整数（有符号或无符号）。</h3><h3 id="Python3-两行代码解决，28ms。"><a href="#Python3-两行代码解决，28ms。" class="headerlink" title="Python3 两行代码解决，28ms。"></a>Python3 两行代码解决，28ms。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        y = [<span class="number">1</span>,-<span class="number">1</span>][x&lt;<span class="number">0</span>] * <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">abs</span>(x))[::-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> y <span class="keyword">if</span> y.bit_length() &lt; <span class="number">32</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>带你弄懂Jwt</title>
    <url>/2020/11/19/%E5%B8%A6%E4%BD%A0%E5%BC%84%E6%87%82Jwt/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-JWT介绍"><a href="#1-JWT介绍" class="headerlink" title="1.JWT介绍"></a>1.JWT介绍</h2><h3 id="2-1-jwt原则"><a href="#2-1-jwt原则" class="headerlink" title="2.1 jwt原则"></a>2.1 jwt原则</h3><ul>
<li>最简单理解：jwt本质就是， <font color="orange"><code>把用户信息通过加密后生成的一个字符串</code></font> <span id="more"></span>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">JWT</span>的原则是在服务器身份验证之后，将生成一个<span class="title class_">JSON</span>对象并将其发送回用户</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="string">&quot;UserName&quot;</span>: <span class="string">&quot;Chongchong&quot;</span>, </span><br><span class="line"> <span class="string">&quot;Role&quot;</span>: <span class="string">&quot;Admin&quot;</span>, </span><br><span class="line"> <span class="string">&quot;Expire&quot;</span>: <span class="string">&quot;2018-08-08 20:15:56&quot;</span> </span><br><span class="line"> &#125;</span><br><span class="line"> 之后，当用户与服务器通信时，客户在请求中发回<span class="title class_">JSON</span>对象，服务器仅依赖于这个<span class="title class_">JSON</span>对象来标识用户。 </span><br><span class="line"> 为了防止用户篡改数据，服务器将在生成对象时添加签名（有关详细信息，请参阅下文）。 </span><br><span class="line"> 服务器不保存任何会话数据，即服务器变为无状态，使其更容易扩展</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2-JWT的数据结构"><a href="#2-2-JWT的数据结构" class="headerlink" title="2.2 JWT的数据结构"></a>2.2 JWT的数据结构</h3><ul>
<li>1）jwt头：JWT头部分是一个描述JWT元数据的JSON对象</li>
<li>2）有效载荷：七个默认字段+自定义私有字段</li>
<li>3）签名&#x3D;HMACSHA256( base64UrlEncode(header) +”.”+base64UrlEncode(payload) ,secret)<br> <img src="https://img-blog.csdnimg.cn/img_convert/a8107fbe9dffb1995927f2628755557d.png"><blockquote>
<p>第一部分： <font color="orange"><code>JWT头</code></font></p>
</blockquote>
</li>
<li><font color="orange"><code>base64UrlEncode(header)</code></font> —&gt;字符串 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JWT头部分是一个描述JWT元数据的JSON对象，通常如下所示。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line"><span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 1）alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）；</span></span><br><span class="line"><span class="comment"># 2）typ属性表示令牌的类型，JWT令牌统一写为JWT。</span></span><br><span class="line"><span class="comment"># 3）最后，使用Base64 URL算法将上述JSON对象转换为字符串保存。</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>第二部分： <font color="orange"><code>有效载荷</code></font> 没有敏感数据的用户信息</p>
</blockquote>
</li>
<li><font color="orange"><code>base64UrlEncode(payload)</code></font> —&gt;字符串 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。 JWT指定七个默认</span></span><br><span class="line">字段供选择。</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">iss：发行人</span></span><br><span class="line"><span class="string">exp：到期时间</span></span><br><span class="line"><span class="string">aud：用户 </span></span><br><span class="line"><span class="string">nbf：在此之前不可用 </span></span><br><span class="line"><span class="string">iat：发布时间 </span></span><br><span class="line"><span class="string">jti：JWT ID用于标识该JWT </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、除以上默认字段外，我们还可以自定义私有字段，如下例：</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>, </span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;chongchong&quot;</span>, </span><br><span class="line"><span class="string">&quot;admin&quot;</span>: true </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、注意</span></span><br><span class="line">默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防 止信息泄露。 </span><br><span class="line">JSON对象也使用Base64 URL算法转换为字符串保存。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第三部分： <font color="orange"><code>签名哈希</code></font></p>
</blockquote>
</li>
<li>签名&#x3D;HMACSHA256<font color="orange"><code>( base64UrlEncode(header)</code></font> + “.” + <font color="orange"><code>base64UrlEncode(payload)</code></font> ,secret) <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。 </span></span><br><span class="line"><span class="comment"># 2.首先，需要指定一个密码（secret），该密码仅仅为保存在服务器中，并且不能向用户公开。 </span></span><br><span class="line"><span class="comment"># 3.然后，使用标头中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名。 </span></span><br><span class="line"><span class="comment"># 4.HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),secret) </span></span><br><span class="line"><span class="comment"># 5.在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用&quot;.&quot;分 隔，就构成整个JWT对象。</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3-jwt核心"><a href="#2-3-jwt核心" class="headerlink" title="2.3 jwt核心"></a>2.3 jwt核心</h3><ul>
<li>1）给用户颁发的token值相当于一把锁，服务器端的秘钥相当于一把钥匙</li>
<li>2）每次客户端请求都会携带这把锁，服务器端用秘钥去开这把锁，若果无法打开就证明是伪造的</li>
</ul>
<h3 id="2-4-jwt特点分析"><a href="#2-4-jwt特点分析" class="headerlink" title="2.4 jwt特点分析"></a>2.4 jwt特点分析</h3><ul>
<li>1、JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限，一旦JWT签发，在有效期内将会一直有效。</li>
<li>2、JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。</li>
<li>3、为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。</li>
<li>4、JWT不仅可用于认证，还可用于信息交换，善用JWT有助于减少服务器请求数据库的次数。</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>注册以及邮箱发送邮件</title>
    <url>/2020/11/19/%E6%B3%A8%E5%86%8C%E4%BB%A5%E5%8F%8A%E9%82%AE%E7%AE%B1%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>今天要完成注册逻辑流程图,注册接口以及前端页面，手机号和邮箱用正则校验，密码使用md5加密。</p>
<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><p>首先我们在Navicat for mysql建一张用户表user,字段有用户名、密码、邮箱、手机号，另外我们需要给username添加一个索引un,这个的索引类型是Unique，意思就是唯一的,因为我们要做的项目是一个工作流平台,所以用户必须给它设成唯一。Unique它的作用是在后端可以自动对用户进行唯一性验证,同时也减少了访问数据库次数，节省了类视图的资源空间。</p>
<span id="more"></span>
<p>在以往的注册登陆中，大多使用django自带的make_password()来对用户密码进行加密,而md5,它是不能解密的，所以在登陆的时候就遇到一个难题，怎么将密码进行比对然后判断登录呢,这个问题先放一放,后面用户登录中,我们会详细介绍。</p>
<h3 id="注册流程图"><a href="#注册流程图" class="headerlink" title="注册流程图"></a>注册流程图</h3><p>注册逻辑很简单,就是说你是用户，然后在表单中输入信息,在注册按钮上面写一个点击事件，在methods里定义这个方法,向后端发送一个post请求,将表单内容发给django端,在后端进行用户和密码的复杂度验证、手机号和邮箱正则匹配等等,如果成功,就写入数据库,并提示信息；如果失败，提示信息，打印错误。</p>
<p><img src="https://img-blog.csdnimg.cn/20201119213320144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0sxMTYzMzE3NTE1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><p>这里附上md5加密的方式:</p>
<blockquote>
<p>导包:<code>from hashlib import sha256</code></p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(password.encode())</span><br><span class="line">password = md5.hexdigest()</span><br></pre></td></tr></table></figure>
</blockquote>
<p>手机号的正则匹配方法:</p>
<blockquote>
<p><code>re.match(r&quot;^1[356789]\d&#123;9&#125;$&quot;, phone)</code></p>
</blockquote>
<p>邮箱正则匹配:</p>
<blockquote>
<p><code>re.search(r&quot;[0-9a-zA-Z_]&#123;0,19&#125;@[0-9a-zA-Z]&#123;1,13&#125;\.[com,cn,net]&#123;1,3&#125;&quot;, email)</code></p>
</blockquote>
<p>以上内容如果完全会,注册接口就很简单啦。</p>
<p>这是我自己写的接口:</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Register</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 接收参数</span></span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line">        md5.update(password.encode())</span><br><span class="line">        password = md5.hexdigest()</span><br><span class="line">        phone = request.POST.get(<span class="string">&#x27;phone&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        email = request.POST.get(<span class="string">&#x27;email&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([username, password, phone, email]):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;参数不全&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&quot;^1[356789]\d&#123;9&#125;$&quot;</span>, phone):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;手机号不合法&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">r&quot;[0-9a-zA-Z_]&#123;0,19&#125;@[0-9a-zA-Z]&#123;1,13&#125;\.[com,cn,net]&#123;1,3&#125;&quot;</span>, email):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;邮箱不正确&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 唯一性验证</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = User(username=username, password=password, phone=phone, email=email)</span><br><span class="line">            user.save()</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;注册成功&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;错误信息为:&#x27;</span>, e)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;注册失败&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<p>可以看到,上面的password使用了md5加密,None是当获取的值为空的时候，默认给它设为空值，避免获取不到值而报错。</p>
<p>这里最主要的问题就是怎么使用md5加密,如图的加密方式是我在百度上面找的,写得很好,我根据它写了一个脚本,用它来生成密文,用做登录时与数据库里的密文进行比对。</p>
<p>####脚本如下:</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_password</span>(<span class="params">mypass</span>):</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义加密对象</span></span><br><span class="line">    sign_str = mypass</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转码</span></span><br><span class="line">    sign_utf8 = <span class="built_in">str</span>(sign_str).encode(encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#加密</span></span><br><span class="line">    md5.update(sign_utf8)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#生成密文</span></span><br><span class="line">    md5_server = md5.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> md5_server</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(make_password(<span class="string">&#x27;1234&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<p>这个脚本的作用不言而喻。可以加密并生成密文，就可以用它来比对密码。</p>
<h3 id="邮箱发送邮件"><a href="#邮箱发送邮件" class="headerlink" title="邮箱发送邮件"></a>邮箱发送邮件</h3><h4 id="我们写一个发送邮箱的脚本"><a href="#我们写一个发送邮箱的脚本" class="headerlink" title="我们写一个发送邮箱的脚本"></a>我们写一个发送邮箱的脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> formataddr</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义参数</span></span><br><span class="line">my_mail = <span class="string">&quot;2438702658@qq.com&quot;</span></span><br><span class="line"><span class="comment">#授权码</span></span><br><span class="line">my_pass = <span class="string">&quot;feympxnumtwmdicj&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义发送邮件的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mail</span>(<span class="params">subject,content,mailaddr</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#声明邮件对象</span></span><br><span class="line">    msg = MIMEText(content,<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置发送方对象</span></span><br><span class="line">    msg[<span class="string">&#x27;From&#x27;</span>] = formataddr([<span class="string">&#x27;在线教育平台&#x27;</span>,my_mail])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置收件方对象</span></span><br><span class="line">    msg[<span class="string">&#x27;To&#x27;</span>] = formataddr([<span class="string">&#x27;尊敬的客户&#x27;</span>,mailaddr])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置标题</span></span><br><span class="line">    msg[<span class="string">&#x27;Subject&#x27;</span>] = subject</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置smtp服务器</span></span><br><span class="line">    server = smtplib.SMTP_SSL(<span class="string">&quot;smtp.qq.com&quot;</span>,<span class="number">465</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#登录邮箱</span></span><br><span class="line">    server.login(my_mail,my_pass)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#发送邮件</span></span><br><span class="line">    server.sendmail(my_mail,[mailaddr],msg.as_string())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#关闭smtp链接</span></span><br><span class="line">    server.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mail(&#x27;验证码验证服务&#x27;,&#x27;您的验证码是6666，有限期为2分钟&#x27;,&#x27;2438702658@qq.com&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>我们用函数进行封装，传入三个参数，分别是:</p>
<p>subject:标题，就是你所接收到的邮件的标题</p>
<p>content:邮件的内容</p>
<p>mailaddr:邮箱地址，就是收件方对象</p>
<p>脚本测试完成之后，我们就要写接口了，逻辑很简单,就是获取表单的邮箱，给这个邮箱发送验证码，然后将发送的验证码和表单中输入的验证码进行比对，成功之后将用户信息写入数据库,将邮箱写入redis数据库。</p>
<p>redis 在setting里导入.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">redis = redis.Redis(host=<span class="string">&quot;127.0.0.1&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>因为存入redis里的数据有时效性,这时我们就可以判断邮件是否发送频繁,因为这个数据有时效性，只要可以获取到用户邮箱,就说明发送频繁。否则再将邮箱写入数据库中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Send_mail</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        code = random.randint(<span class="number">10000</span>, <span class="number">99999</span>)</span><br><span class="line">        email = request.POST.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">r&quot;[0-9a-zA-Z_]&#123;0,19&#125;@[0-9a-zA-Z]&#123;1,13&#125;\.[com,cn,net]&#123;1,3&#125;&quot;</span>, email):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;邮箱不正确&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> redis.get(email):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&quot;发送频繁&quot;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            redis.<span class="built_in">set</span>(email, code)</span><br><span class="line">            redis.expire(email, <span class="number">300</span>)</span><br><span class="line">            mail(<span class="string">&#x27;验证码验证服务&#x27;</span>, <span class="string">&#x27;您的验证码是%s，有限期为2分钟&#x27;</span> % code, email)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&quot;发送成功&quot;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;data&#x27;</span>: code&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以前写注册接口，总在想一个问题，经过这次的深入学习,真正了解了注册功能，md5加密方式，加上邮箱验证码后，对它的印象又深刻啦，编程加油!生活加油!</p>
]]></content>
      <categories>
        <category>智能高并发审批流系统</category>
      </categories>
      <tags>
        <tag>智能高并发审批流系统</tag>
      </tags>
  </entry>
  <entry>
    <title>最长公共前缀</title>
    <url>/2021/09/03/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="leetcode原题-编写一个函数来查找字符串数组中的最长公共前缀。"><a href="#leetcode原题-编写一个函数来查找字符串数组中的最长公共前缀。" class="headerlink" title="leetcode原题,编写一个函数来查找字符串数组中的最长公共前缀。"></a>leetcode原题,编写一个函数来查找字符串数组中的最长公共前缀。</h3><h3 id="如果不存在公共前缀，返回空字符串-。"><a href="#如果不存在公共前缀，返回空字符串-。" class="headerlink" title="如果不存在公共前缀，返回空字符串 &quot;&quot;。"></a>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</h3><h3 id="利用python的max-和min-，在Python里字符串是可以比较的，按照ascII值排，举例abb，-aba，abac，最大为abb，最小为aba。所以只需要比较最大最小的公共前缀就是整个数组的公共前缀"><a href="#利用python的max-和min-，在Python里字符串是可以比较的，按照ascII值排，举例abb，-aba，abac，最大为abb，最小为aba。所以只需要比较最大最小的公共前缀就是整个数组的公共前缀" class="headerlink" title="利用python的max()和min()，在Python里字符串是可以比较的，按照ascII值排，举例abb， aba，abac，最大为abb，最小为aba。所以只需要比较最大最小的公共前缀就是整个数组的公共前缀"></a>利用python的max()和min()，在Python里字符串是可以比较的，按照ascII值排，举例abb， aba，abac，最大为abb，最小为aba。所以只需要比较最大最小的公共前缀就是整个数组的公共前缀</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def longestCommonPrefix(self, strs):</span><br><span class="line">    if not strs: return &quot;&quot;</span><br><span class="line">    s1 = min(strs)</span><br><span class="line">    s2 = max(strs)</span><br><span class="line">    for i,x in enumerate(s1):</span><br><span class="line">        if x != s2[i]:</span><br><span class="line">            return s2[:i]</span><br><span class="line">    return s1</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/3d5c6f3527a242e89a405db305928c9a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASzExNjMzMTc1MTU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket实时推送通知</title>
    <url>/2020/10/19/websocket%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在解释 WebSocket 之前，先来看个生活中的小例子。</p>
<p>比如外汇股票，由多人组成的公司,上市就有股份，每人一个股份10块钱，随着公司盈利,股票升值，如果亏损，股票贬值,  股市中只能买张不能买跌,在股票交易时间内，股票的价格变化十分迅速，股票网站需要向正在浏览页面的用户实时更新股价 ,所以k线图每分钟都要绘制,用户可以根据k线图预测是涨还是跌，如果张就买入，跌就不买，我们要把每分钟的点连起来。</p>
<span id="more"></span>
<p>还有心电图,心电图每秒都要绘制,把每个点连起来，就形成了曲线图。</p>
<p>websocket的特点是持久化链接，实时化，一次强链接，实时，主动推送数据,websocket前后端可以同时推送,而http是一次请求。websocket长连接不是一对一的。</p>
<p>在我们发送请求时，要监控newtwork，网页newtwork中websocket304 200 意味着这次链接结束 500在这里表示成功，也意味着结束。websocket 101 表示链接成功。</p>
<p>下面我们来完成一个websocket测试。</p>
<h2 id="写一个websocket接口"><a href="#写一个websocket接口" class="headerlink" title="写一个websocket接口"></a>写一个websocket接口</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#webscoket接口</span></span><br><span class="line"></span><br><span class="line">clients = &#123;&#125;</span><br><span class="line"><span class="meta">@accept_websocket</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">webscoketlink</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.is_websocket():</span><br><span class="line">        token = request.GET.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        userid = jwt.decode(token,settings.SECRET_KEY,algorithms=[<span class="string">&#x27;HS256&#x27;</span>]).get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----------------------------------------------------------------------userid&#x27;</span>,userid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">            message = request.websocket.wait()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> message:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;webscoket链接成功&#x27;</span> + <span class="built_in">str</span>(message))   <span class="comment"># 也可以用format</span></span><br><span class="line"></span><br><span class="line">                clients[userid] = request.websocket</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> redis.get(userid):</span><br><span class="line">                    msg = redis.get(userid).decode()</span><br><span class="line">                    request.is_websocket.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                    redis.delete(userid)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送消息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendmessage</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取消息</span></span><br><span class="line">    msg = request.GET.get(<span class="string">&quot;msg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> client <span class="keyword">in</span> clients:</span><br><span class="line">        clients[client].send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(&#123;<span class="string">&#x27;OK&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这里不需要return,我们平时写接口return表示结束返回数据,断开连接,而websocket不用断开连接，但是没有网也不行，偶尔网络波动,连上网之后，它可以立刻连上，有持久化可能性，继续回去找userid,而http断开之后，回去不找userid。</p>
<h2 id="前端如何操作"><a href="#前端如何操作" class="headerlink" title="前端如何操作"></a>前端如何操作</h2><p>在home首页实现长连接，可以实时通知用户，每个网页写入组件，在页面加载之前连接websocket,判断浏览器是否支持websocket。为什么有的响应在前端打印，有的在后端打印,我们的链接的请求或关闭，不需要让客户知道，只要在后台默默的操作就好了，可是如果审核通过或者拒绝就需要让客户知道。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">mounted</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    判断浏览器是否支持webscoket</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;WebSocket&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>)&#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;支持&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8000/webscoketlink/&quot;</span>)</span><br><span class="line"></span><br><span class="line">      ws.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        ws.<span class="title function_">send</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">              </span><br><span class="line">          <span class="comment">//发送消息</span></span><br><span class="line">          ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">evt</span>)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//将获取信息打印 那个是提示 通知提醒</span></span><br><span class="line">      <span class="keyword">var</span> received_msg = evt.<span class="property">data</span></span><br><span class="line"></span><br><span class="line">      <span class="title function_">alert</span>(received_msg);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//捕获关闭链接</span></span><br><span class="line">        ws.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;链接已经关闭&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所有的实时通信都是基于websocket。</p>
<p>这块我们为什么用http协议，因为这是一个接收消息的接口，请求这个接口，然后去调用websocket然后返回给前端。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;webscoketlink/&#x27;</span>, webscoketlink),</span><br><span class="line">  path(<span class="string">&#x27;sendmessage/&#x27;</span>, sendmessage),</span><br></pre></td></tr></table></figure>

<p>然后重启项目，状态码101 请求连接成功。</p>
<h4 id="我们要写一个需求-就是用户如果不在线，怎么让他上线后收到推送消息，就是向指定用户发送websocket消息并处理对方不在线的情况。"><a href="#我们要写一个需求-就是用户如果不在线，怎么让他上线后收到推送消息，就是向指定用户发送websocket消息并处理对方不在线的情况。" class="headerlink" title="我们要写一个需求,就是用户如果不在线，怎么让他上线后收到推送消息，就是向指定用户发送websocket消息并处理对方不在线的情况。"></a>我们要写一个需求,就是用户如果不在线，怎么让他上线后收到推送消息，就是向指定用户发送websocket消息并处理对方不在线的情况。</h4><ul>
<li>如果申请人在线（客户端与服务器正常链接）直接将消息推送即可。如果不在线（客户端与服务端没有链接）将数据在redis中以集合类型储存</li>
</ul>
<ul>
<li><p>当每个用户首次与服务端链接时首先判断该用户在redis中有没有数据，如果有数据，直接遍历发送，客户端以弹窗形式提醒用户</p>
<blockquote>
<p>使用redis时需要注意：用这种消息推送，只需要用户作为键，不需要别的数据作为标识。</p>
</blockquote>
</li>
</ul>
<h2 id="十种方式拼接Python字符串"><a href="#十种方式拼接Python字符串" class="headerlink" title="十种方式拼接Python字符串"></a>十种方式拼接Python字符串</h2><p>字符串是所有编程语言中都有的基本变量的类型，程序员基本每天都在和字符串打交道。 </p>
<p>本篇文章的最后我们一起细数Python中的各种字符串拼接方法。每种字符串拼接方式的使用场景各不相同，我们可以在开发过程中灵活运用。</p>
<p><strong>一、用逗号，拼接</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_a = <span class="string">&#x27;python&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, str_a, <span class="string">&#x27;!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello python !</span><br></pre></td></tr></table></figure>

<p>用逗号拼接的结果中，相邻的两个字符串之间会有空格。</p>
<p><strong>二、空格自动拼接</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_b = <span class="string">&#x27;It is summer &#x27;</span> <span class="string">&#x27;of 2019!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_b)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">It <span class="keyword">is</span> summer of <span class="number">2019</span>!</span><br></pre></td></tr></table></figure>

<p>空格自动拼接后，两个字符串之间的空格不会保留，两个字符串会直接连在一起，不能通过多个变量名来拼接。</p>
<p><strong>三、多行字符串自动拼接</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_c = <span class="string">&#x27;Love makes &#x27;</span> \</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;man grow up &#x27;</span> \</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;or sink down!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_c)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Love makes man grow up <span class="keyword">or</span> sink down!</span><br></pre></td></tr></table></figure>

<p>多行字符串之间会有反斜杠\作为连接，自动拼接后，多行字符串会直接连在一起，中间没有空格，不能通过多个变量名来拼接。</p>
<p>所以我们在编程中，一行写不完的字符串可以换行，最后的结果是一样的。</p>
<p><strong>四、通过加号+拼接</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_d = <span class="string">&#x27;string&#x27;</span></span><br><span class="line"></span><br><span class="line">str_e = <span class="string">&#x27;demo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_d + str_e)</span><br><span class="line"></span><br><span class="line">str_e += str_d</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_e)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stringdemo</span><br><span class="line"></span><br><span class="line">demostring</span><br></pre></td></tr></table></figure>

<p>加号拼接的结果也是两个字符串直接拼接在一起，中间没有空格。</p>
<p><strong>五、通过乘法*进行拼接</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_f = <span class="string">&#x27;a-&#x27;</span> * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_f)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a-a-a-a-a-a-a-a-a-a-</span><br></pre></td></tr></table></figure>

<p>Python中一个字符串与整数相乘的结果为字符串拼接整数次。</p>
<p><strong>六、字符串格式化操作符%拼接</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_g = <span class="string">&#x27;aaaaaaaaaaaa%saaaaaaaaa&#x27;</span> % <span class="string">&#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_g)</span><br><span class="line"></span><br><span class="line">str_h = <span class="string">&#x27;aaaaaaaaaaaa%06daaaaaaaaa&#x27;</span> % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_h)</span><br><span class="line"></span><br><span class="line">str_i = <span class="string">&#x27;aaaaaaaaaaaa%.03faaaaaaaaa&#x27;</span> % <span class="number">0.77</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_i)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aaaaaaaaaaaaAaaaaaaaaa</span><br><span class="line"></span><br><span class="line">aaaaaaaaaaaa000010aaaaaaaaa</span><br><span class="line"></span><br><span class="line">aaaaaaaaaaaa0<span class="number">.770</span>aaaaaaaaa</span><br></pre></td></tr></table></figure>

<p>%s,%d,%f的作用是占位作用，然后在字符串后面跟一个%，再在后面写拼到占位位置的内容。</p>
<p>%s:将一个字符串拼接到前面的字符串中</p>
<p>%d:将一个整型数字转换成字符串拼接到前面的字符串中，可以设置整数的位数，前面补0</p>
<p>%f:将一个浮点型数字转换成字符串拼接到前面的字符串中，可以设置小数点后的位数，后面补0</p>
<p><strong>七、通过str.format()方法拼接</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_j = <span class="string">&#x27;python &#123;&#125;! format &#123;&#125;!&#x27;</span>.<span class="built_in">format</span>(<span class="number">666</span>, <span class="number">999</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_j)</span><br><span class="line"></span><br><span class="line">str_k = <span class="string">&#x27;生如夏花之&#123;a&#125;，死如秋叶之&#123;b&#125;！&#x27;</span>.<span class="built_in">format</span>(b=<span class="string">&#x27;静美&#x27;</span>, a=<span class="string">&#x27;绚烂&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_k)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python <span class="number">666</span>! <span class="built_in">format</span> <span class="number">999</span>!</span><br><span class="line"></span><br><span class="line">生如夏花之绚烂，死如秋叶之静美！</span><br></pre></td></tr></table></figure>

<p><strong>format()方法可以说是最通用（基本是万能的）的拼接方法了，不管后面拼接的数据是字符串还是数字，甚至元组、列表、字典、集合等数据类型，format统统都可以拼接到字符串中。</strong></p>
<p>在要拼接的字符串中使用大括号{}来给拼接内容占位，后面按顺序依次传入对应的内容即可，也可以给每个占位的{}起一个变量名，然后通过关键字参数传递给format().</p>
<p><strong>八、通过str.join()方法拼接</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_l = [<span class="string">&#x27;生&#x27;</span>, <span class="string">&#x27;如&#x27;</span>, <span class="string">&#x27;夏&#x27;</span>, <span class="string">&#x27;花&#x27;</span>, <span class="string">&#x27;之&#x27;</span>, <span class="string">&#x27;绚&#x27;</span>, <span class="string">&#x27;烂&#x27;</span>, <span class="string">&#x27;，&#x27;</span>, <span class="string">&#x27;死&#x27;</span>, <span class="string">&#x27;如&#x27;</span>, <span class="string">&#x27;秋&#x27;</span>, <span class="string">&#x27;叶&#x27;</span>, <span class="string">&#x27;之&#x27;</span>, <span class="string">&#x27;静&#x27;</span>, <span class="string">&#x27;美&#x27;</span>, <span class="string">&#x27;！&#x27;</span>]</span><br><span class="line"></span><br><span class="line">str_l = <span class="string">&#x27;&#x27;</span>.join(list_l)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_l)</span><br><span class="line"></span><br><span class="line">tuple_m = (<span class="string">&#x27;生&#x27;</span>, <span class="string">&#x27;如&#x27;</span>, <span class="string">&#x27;夏&#x27;</span>, <span class="string">&#x27;花&#x27;</span>, <span class="string">&#x27;之&#x27;</span>, <span class="string">&#x27;绚&#x27;</span>, <span class="string">&#x27;烂&#x27;</span>, <span class="string">&#x27;，&#x27;</span>, <span class="string">&#x27;死&#x27;</span>, <span class="string">&#x27;如&#x27;</span>, <span class="string">&#x27;秋&#x27;</span>, <span class="string">&#x27;叶&#x27;</span>, <span class="string">&#x27;之&#x27;</span>, <span class="string">&#x27;静&#x27;</span>, <span class="string">&#x27;美&#x27;</span>, <span class="string">&#x27;！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">str_m = <span class="string">&#x27;-&#x27;</span>.join(tuple_m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_m)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">生如夏花之绚烂，死如秋叶之静美！</span><br><span class="line"></span><br><span class="line">生-如-夏-花-之-绚-烂-，-死-如-秋-叶-之-静-美-！</span><br></pre></td></tr></table></figure>

<p>str.join()最常用来将一个列表内的字符串拼接成一个大的字符串，列表中的每个元素都需要是字符串类型。</p>
<p>前面的str是拼接时用于连接的字符串，列表的每两个元素之间使用str来连接。</p>
<p><strong>九、通过string模块中的Template对象拼接</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">t = Template(<span class="string">&#x27;$&#123;s1&#125; $&#123;s2&#125;!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">str_n = t.safe_substitute(s1=<span class="string">&#x27;Hello&#x27;</span>, s2=<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_n)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hello Python!</span><br></pre></td></tr></table></figure>

<p>Template的实现方式是首先通过Template初始化一个字符串对象t，在创建对象t时，在字符串中使用 <strong>${变量名}</strong> 的方式来给拼接内容占位。</p>
<p>也可以省略{}，直接 <strong>$变量名，</strong>只是没有{}时变量名后面一定要有空格，且可读性不如有{}的好。</p>
<p>通过调用t对象的substitute或safe_subsititute方法，将拼接内容通过关键字参数的方式依次传递进去，实现在指定的位置拼接字符串。</p>
<p>这种方法与上面的format()方法一样，不管传入的拼接内容是什么数据类型，统统都可以拼接。</p>
<p><strong>十、通过F-strings拼接</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">o = <span class="number">6666666666</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">7777777777</span></span><br><span class="line"></span><br><span class="line">str_o = <span class="string">f&#x27;Python <span class="subst">&#123;o&#125;</span> hello <span class="subst">&#123;p&#125;</span> !&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_o)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python <span class="number">6666666666</span> hello <span class="number">7777777777</span> !</span><br></pre></td></tr></table></figure>

<p>在Python3.6版本中，提出了一种新型字符串格式化机制，被称为“字符串插值”或者<strong>F-strings，</strong>F-strings提供了一种明确且方便的方式将python表达式嵌入到字符串中来进行格式化。而且F-strings的运行速度很快，比%和format()这两种格式化方法都快得多。</p>
<p>上面的代码中直接在f后面跟字符串，然后在字符串中用{}传入拼接内容。</p>
<p>厉害的是，在F-strings中我们可以执行函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_string</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>.upper()</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;a k q j 10&#x27;</span></span><br><span class="line"></span><br><span class="line">str_p = <span class="string">f&#x27;顺子! <span class="subst">&#123;add_string(<span class="built_in">str</span>)&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_p)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">顺子! A K Q J 10</span><br></pre></td></tr></table></figure>

<p>将函数传入{}中，最后拼接到字符串中的内容是函数执行的结果！</p>
<p>现在我们已经细数了十种Python字符串的拼接方式，希望您可以在使用中融会贯通，灵活运用。</p>
]]></content>
      <categories>
        <category>智能高并发审批流系统</category>
      </categories>
      <tags>
        <tag>智能高并发审批流系统</tag>
      </tags>
  </entry>
  <entry>
    <title>移除元素</title>
    <url>/2021/11/21/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="给你一个数组-nums-和一个值-val，你需要-原地-移除所有数值等于-val-的元素，并返回移除后数组的新长度。"><a href="#给你一个数组-nums-和一个值-val，你需要-原地-移除所有数值等于-val-的元素，并返回移除后数组的新长度。" class="headerlink" title="给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。"></a>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</h3><h3 id="不要使用额外的数组空间，你必须仅使用-O-1-额外空间并-原地-修改输入数组。"><a href="#不要使用额外的数组空间，你必须仅使用-O-1-额外空间并-原地-修改输入数组。" class="headerlink" title="不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。"></a>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</h3><h3 id="元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。"><a href="#元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。" class="headerlink" title="元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。"></a>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</h3><h3 id="如下解法-执行时间12ms。"><a href="#如下解法-执行时间12ms。" class="headerlink" title="如下解法,执行时间12ms。"></a>如下解法,执行时间12ms。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums, val</span>):</span><br><span class="line">        <span class="keyword">while</span> (val <span class="keyword">in</span> nums):</span><br><span class="line">            nums.remove(val)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>洪水过后</title>
    <url>/2023/08/19/%E6%B4%AA%E6%B0%B4%E8%BF%87%E5%90%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="北京十渡风景区附近"><a href="#北京十渡风景区附近" class="headerlink" title="北京十渡风景区附近"></a>北京十渡风景区附近</h2><p><a href="https://postimg.cc/zbSfFPmH"><img src="https://i.postimg.cc/Y9TmkJbR/Wechat-IMG191.jpg" alt="Wechat-IMG191.jpg"></a><br><a href="https://postimg.cc/JG8N897v"><img src="https://i.postimg.cc/WbFXGvBN/Wechat-IMG192.jpg" alt="Wechat-IMG192.jpg"></a><br><a href="https://postimg.cc/8js6TNQy"><img src="https://i.postimg.cc/7YnMMZBy/Wechat-IMG193.jpg" alt="Wechat-IMG193.jpg"></a><br><a href="https://postimg.cc/XBB4D2mg"><img src="https://i.postimg.cc/qqjqqSGW/Wechat-IMG194.jpg" alt="Wechat-IMG194.jpg"></a><br><a href="https://postimg.cc/xcH9v4Kf"><img src="https://i.postimg.cc/CLrdgy5q/Wechat-IMG195.jpg" alt="Wechat-IMG195.jpg"></a><br><a href="https://postimg.cc/RJK2H222"><img src="https://i.postimg.cc/RhDmjBdC/Wechat-IMG196.jpg" alt="Wechat-IMG196.jpg"></a><br><a href="https://postimg.cc/5HyG3XZB"><img src="https://i.postimg.cc/5tSVfvgR/Wechat-IMG197.jpg" alt="Wechat-IMG197.jpg"></a><br><a href="https://postimg.cc/682b2kRc"><img src="https://i.postimg.cc/YC85VkC5/Wechat-IMG198.jpg" alt="Wechat-IMG198.jpg"></a><br><a href="https://postimg.cc/2VvB1Tyv"><img src="https://i.postimg.cc/J4Y3d2WT/Wechat-IMG199.jpg" alt="Wechat-IMG199.jpg"></a><br><a href="https://postimg.cc/wRMZW7y8"><img src="https://i.postimg.cc/1XrS3Fyt/Wechat-IMG200.jpg" alt="Wechat-IMG200.jpg"></a></p>
]]></content>
      <categories>
        <category>考察</category>
      </categories>
      <tags>
        <tag>洪水</tag>
      </tags>
  </entry>
  <entry>
    <title>罗马数字转整数</title>
    <url>/2021/11/19/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="罗马数字包含以下七种字符-I，-V，-X，-L，C，D-和-M。"><a href="#罗马数字包含以下七种字符-I，-V，-X，-L，C，D-和-M。" class="headerlink" title="罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。"></a>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</h3><h3 id="字符-数值"><a href="#字符-数值" class="headerlink" title="字符          数值"></a>字符          数值</h3><h3 id="I-1"><a href="#I-1" class="headerlink" title="I             1"></a>I             1</h3><h3 id="V-5"><a href="#V-5" class="headerlink" title="V             5"></a>V             5</h3><h3 id="X-10"><a href="#X-10" class="headerlink" title="X             10"></a>X             10</h3><h3 id="L-50"><a href="#L-50" class="headerlink" title="L             50"></a>L             50</h3><h3 id="C-100"><a href="#C-100" class="headerlink" title="C             100"></a>C             100</h3><h3 id="D-500"><a href="#D-500" class="headerlink" title="D             500"></a>D             500</h3><h3 id="M-1000"><a href="#M-1000" class="headerlink" title="M             1000"></a>M             1000</h3><h3 id="例如，-罗马数字-2-写做-II-，即为两个并列的-1。12-写做-XII-，即为-X-II-。-27-写做-XXVII-即为-XX-V-II-。"><a href="#例如，-罗马数字-2-写做-II-，即为两个并列的-1。12-写做-XII-，即为-X-II-。-27-写做-XXVII-即为-XX-V-II-。" class="headerlink" title="例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。"></a>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</h3><h3 id="通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如-4-不写做-IIII，而是-IV。数字-1-在数字-5-的左边，所表示的数等于大数-5-减小数-1-得到的数值-4-。同样地，数字-9-表示为-IX。这个特殊的规则只适用于以下六种情况："><a href="#通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如-4-不写做-IIII，而是-IV。数字-1-在数字-5-的左边，所表示的数等于大数-5-减小数-1-得到的数值-4-。同样地，数字-9-表示为-IX。这个特殊的规则只适用于以下六种情况：" class="headerlink" title="通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况："></a>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</h3><h3 id="I-可以放在-V-5-和-X-10-的左边，来表示-4-和-9。"><a href="#I-可以放在-V-5-和-X-10-的左边，来表示-4-和-9。" class="headerlink" title="I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。"></a>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</h3><h3 id="X-可以放在-L-50-和-C-100-的左边，来表示-40-和-90。"><a href="#X-可以放在-L-50-和-C-100-的左边，来表示-40-和-90。" class="headerlink" title="X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。"></a>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</h3><h3 id="C-可以放在-D-500-和-M-1000-的左边，来表示-400-和-900。"><a href="#C-可以放在-D-500-和-M-1000-的左边，来表示-400-和-900。" class="headerlink" title="C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。"></a>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</h3><h3 id="给定一个罗马数字，将其转换成整数。输入确保在-1-到-3999-的范围内。"><a href="#给定一个罗马数字，将其转换成整数。输入确保在-1-到-3999-的范围内。" class="headerlink" title="给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。"></a>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</h3><h3 id="python解法-执行用时44ms。"><a href="#python解法-执行用时44ms。" class="headerlink" title="python解法,执行用时44ms。"></a>python解法,执行用时44ms。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">romanToInt</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        s = s.replace(<span class="string">&#x27;IV&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        s = s.replace(<span class="string">&#x27;IX&#x27;</span>,<span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">        s = s.replace(<span class="string">&#x27;XL&#x27;</span>,<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">        s = s.replace(<span class="string">&#x27;XC&#x27;</span>,<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">        s = s.replace(<span class="string">&#x27;CM&#x27;</span>,<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line">        s = s.replace(<span class="string">&#x27;CD&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        keys = &#123;</span><br><span class="line">            <span class="string">&#x27;Q&#x27;</span>:<span class="number">4</span>,</span><br><span class="line">            <span class="string">&#x27;W&#x27;</span>:<span class="number">9</span>,</span><br><span class="line">            <span class="string">&#x27;E&#x27;</span>:<span class="number">40</span>,</span><br><span class="line">            <span class="string">&#x27;R&#x27;</span>:<span class="number">90</span>,</span><br><span class="line">            <span class="string">&#x27;T&#x27;</span>:<span class="number">900</span>,</span><br><span class="line">            <span class="string">&#x27;Y&#x27;</span>:<span class="number">400</span>,</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;V&#x27;</span>:<span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;X&#x27;</span>:<span class="number">10</span>,</span><br><span class="line">            <span class="string">&#x27;L&#x27;</span>:<span class="number">50</span>,</span><br><span class="line">            <span class="string">&#x27;C&#x27;</span>:<span class="number">100</span>,</span><br><span class="line">            <span class="string">&#x27;D&#x27;</span>:<span class="number">500</span>,</span><br><span class="line">            <span class="string">&#x27;M&#x27;</span>:<span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            ans += keys[ch]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>聊天窗emjoi表情</title>
    <url>/2020/11/19/%E8%81%8A%E5%A4%A9%E7%AA%97emjoi%E8%A1%A8%E6%83%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><ul>
<li>安装与下载</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install emoji-vue --save</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ul>
<li>全局配置：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 引入表情</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue2Emoji</span> <span class="keyword">from</span> <span class="string">&#x27;vuejs-emoji&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vue2Emoji</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>使用方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 模板中 /&gt; --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">VueEmoji</span> <span class="attr">ref</span>=<span class="string">&quot;emoji&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 导包 /&gt; --&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueEmoji</span> <span class="keyword">from</span> <span class="string">&quot;emoji-vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//methods里</span></span><br><span class="line"><span class="title function_">onInput</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">//事件。数据包含文本区域的值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">msg</span> = event.<span class="property">data</span>;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="title function_">clearTextarea</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">emoji</span>.<span class="title function_">clear</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="comment">// 注册组件</span></span><br><span class="line">        <span class="attr">components</span>: &#123;</span><br><span class="line">            <span class="title class_">VueEmoji</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>聊天机器人</title>
    <url>/2021/11/05/%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="Keras"><a href="#Keras" class="headerlink" title="Keras"></a>Keras</h1><p>Keras tf.keras 是用于构建和训练深度学习模型的 TensorFlow 高阶 API。利用此 API，可实现快速原型设计、先进的研究和生产，它具有以下三大优势：</p>
<p>方便用户使用 Keras 具有针对常见用例做出优化的简单而一致的界面。它可针对用户错误提供切实可行的清晰反馈。 模块化和可组合 将可配置的构造块组合在一起就可以构建 Keras 模型，并且几乎不受限制。 易于扩展 可以编写自定义构造块，表达新的研究创意；并且可以创建新层、指标、损失函数并开发先进的模型。</p>
<span id="more"></span>
<h1 id="聊天机器人"><a href="#聊天机器人" class="headerlink" title="聊天机器人"></a>聊天机器人</h1><p>将数据传递到模型的内置训练循环时，应当使用 NumPy 数组（如果数据很小且适合装入内存）或 tf.data Dataset 对象。在接下来的段落中，我们将 MNIST 数据集用作 NumPy 数组，以演示如何使用优化器、损失和指标。</p>
<p>我们考虑以下模型（在这里，我们使用函数式 API 构建了此模型，但它也可以是序贯模型或子类化模型）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inputs = keras.Input(shape=(<span class="number">784</span>,), name=<span class="string">&quot;digits&quot;</span>)</span><br><span class="line">x = layers.Dense(<span class="number">64</span>, activation=<span class="string">&quot;relu&quot;</span>, name=<span class="string">&quot;dense_1&quot;</span>)(inputs)</span><br><span class="line">x = layers.Dense(<span class="number">64</span>, activation=<span class="string">&quot;relu&quot;</span>, name=<span class="string">&quot;dense_2&quot;</span>)(x)</span><br><span class="line">outputs = layers.Dense(<span class="number">10</span>, activation=<span class="string">&quot;softmax&quot;</span>, name=<span class="string">&quot;predictions&quot;</span>)(x)</span><br><span class="line"></span><br><span class="line">model = keras.Model(inputs=inputs, outputs=outputs)</span><br></pre></td></tr></table></figure>

<h1 id="所需依赖"><a href="#所需依赖" class="headerlink" title="所需依赖"></a>所需依赖</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">from</span> nltk.stem.lancaster <span class="keyword">import</span> LancasterStemmer</span><br><span class="line">stemmer = LancasterStemmer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Activation, Dropout</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> SGD</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>重新搭建博客过程中遇到的一些问题记录</title>
    <url>/2023/11/01/%E9%87%8D%E6%96%B0%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="之前博客一直是使用Gitee托管的，可最近才知道Gitee-Pages停止服务了，这对于广大的开源开发者来说是一次不小的打击。于是就重新搭建博客，迁移到Github，并绑定了阿里云域名，以下是在搭建过程中遇到的一些问题记录。"><a href="#之前博客一直是使用Gitee托管的，可最近才知道Gitee-Pages停止服务了，这对于广大的开源开发者来说是一次不小的打击。于是就重新搭建博客，迁移到Github，并绑定了阿里云域名，以下是在搭建过程中遇到的一些问题记录。" class="headerlink" title="之前博客一直是使用Gitee托管的，可最近才知道Gitee Pages停止服务了，这对于广大的开源开发者来说是一次不小的打击。于是就重新搭建博客，迁移到Github，并绑定了阿里云域名，以下是在搭建过程中遇到的一些问题记录。"></a>之前博客一直是使用Gitee托管的，可最近才知道Gitee Pages停止服务了，这对于广大的开源开发者来说是一次不小的打击。于是就重新搭建博客，迁移到Github，并绑定了阿里云域名，以下是在搭建过程中遇到的一些问题记录。</h1><h2 id="阿里云域名注册流程"><a href="#阿里云域名注册流程" class="headerlink" title="阿里云域名注册流程"></a>阿里云域名注册流程</h2><p><a href="https://baijiahao.baidu.com/s?id=1765615721998421361&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1765615721998421361&amp;wfr=spider&amp;for=pc</a></p>
<h2 id="博客美化"><a href="#博客美化" class="headerlink" title="博客美化"></a>博客美化</h2><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p>
<h2 id="评论系统搭建"><a href="#评论系统搭建" class="headerlink" title="评论系统搭建"></a>评论系统搭建</h2><p><a href="https://vercel.com/chechuan/waline-test/settings/domains">https://vercel.com/chechuan/waline-test/settings/domains</a></p>
<h2 id="github部署报错问题"><a href="#github部署报错问题" class="headerlink" title="github部署报错问题"></a>github部署报错问题</h2><p><a href="https://blog.csdn.net/weixin_48927364/article/details/123405585">https://blog.csdn.net/weixin_48927364/article/details/123405585</a></p>
<h2 id="阿里云ssl证书"><a href="#阿里云ssl证书" class="headerlink" title="阿里云ssl证书"></a>阿里云ssl证书</h2><p><a href="https://yundunnext.console.aliyun.com/?spm=a2c4g.11186623.0.0.b2eade53LPbv2g&p=cas#/overview/cn-hangzhou">https://yundunnext.console.aliyun.com/?spm=a2c4g.11186623.0.0.b2eade53LPbv2g&amp;p=cas#/overview/cn-hangzhou</a></p>
<h2 id="Github绑定自定义域名"><a href="#Github绑定自定义域名" class="headerlink" title="Github绑定自定义域名"></a>Github绑定自定义域名</h2><p><a href="https://codeantenna.com/a/BFBUro6Zkx#google_vignette">https://codeantenna.com/a/BFBUro6Zkx#google_vignette</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>报错收集</tag>
      </tags>
  </entry>
  <entry>
    <title>银山塔林</title>
    <url>/2022/11/06/%E9%93%B6%E5%B1%B1%E5%A1%94%E6%9E%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="银山塔林"><a href="#银山塔林" class="headerlink" title="银山塔林"></a>银山塔林</h2><p><a href="https://postimg.cc/30Mq7y3x"><img src="https://i.postimg.cc/rsz21Wbx/Wechat-IMG153.jpg" alt="Wechat-IMG153.jpg"></a><br><a href="https://postimg.cc/tZF53BH9"><img src="https://i.postimg.cc/3RccHqS0/Wechat-IMG155.jpg" alt="Wechat-IMG155.jpg"></a><br><a href="https://postimg.cc/6yMD4p0Y"><img src="https://i.postimg.cc/4xGZMKhk/Wechat-IMG156.jpg" alt="Wechat-IMG156.jpg"></a><br><a href="https://postimg.cc/xq0xGSq7"><img src="https://i.postimg.cc/59zhV4Jx/Wechat-IMG157.jpg" alt="Wechat-IMG157.jpg"></a><br><a href="https://postimg.cc/ctRtkzDL"><img src="https://i.postimg.cc/XqhKqSdd/Wechat-IMG154.jpg" alt="Wechat-IMG154.jpg"></a></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>辽金时期古塔</tag>
      </tags>
  </entry>
  <entry>
    <title>皮肤知识</title>
    <url>/2021/10/14/%E7%9A%AE%E8%82%A4%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="皮肤知识"><a href="#皮肤知识" class="headerlink" title="皮肤知识"></a>皮肤知识</h1><h4 id="皮肤结构由外到内："><a href="#皮肤结构由外到内：" class="headerlink" title="皮肤结构由外到内："></a>皮肤结构由外到内：</h4><p>表皮层、真皮层、皮下组织层，以及皮肤附属器：毛发、汗腺、皮脂腺</p>
<h4 id="表皮层分为："><a href="#表皮层分为：" class="headerlink" title="表皮层分为："></a>表皮层分为：</h4><p>角质层、透明层、颗粒层、棘层、基底层</p>
<h4 id="真皮层分为："><a href="#真皮层分为：" class="headerlink" title="真皮层分为："></a>真皮层分为：</h4><p>真皮浅层、真皮深层</p>
<h2 id="表皮层"><a href="#表皮层" class="headerlink" title="表皮层"></a>表皮层</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>是最外层皮肤，也被称为皮肤屏障</p>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>表皮细胞构成</p>
<h3 id="表皮受损"><a href="#表皮受损" class="headerlink" title="表皮受损"></a>表皮受损</h3><p>会引起皮肤泛红、不耐受、易干燥粗糙，长期持续下去会引起皮肤炎症和疾病的发生</p>
<h2 id="真皮层"><a href="#真皮层" class="headerlink" title="真皮层"></a>真皮层</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>柔韧性、弹性</p>
<h3 id="组成-1"><a href="#组成-1" class="headerlink" title="组成"></a>组成</h3><p>细胞、胶原纤维（胶原蛋白）、弹性纤维、基质</p>
<h4 id="细胞作用"><a href="#细胞作用" class="headerlink" title="细胞作用"></a>细胞作用</h4><p>主要是成纤维细胞，负责生产胶原纤维、弹性纤维和基质</p>
<h4 id="基质作用"><a href="#基质作用" class="headerlink" title="基质作用"></a>基质作用</h4><p>是皮肤的营养剂，一种无形胶状物，主要是透明质酸等，基质成分减少，皮肤失水，易出现干燥、皱纹。</p>
<h2 id="皮下组织"><a href="#皮下组织" class="headerlink" title="皮下组织"></a>皮下组织</h2><h3 id="组成-2"><a href="#组成-2" class="headerlink" title="组成"></a>组成</h3><p>皮下脂肪、纤维网</p>
<h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><p>皮下脂肪：具有保暖、缓冲、保持皮肤轮廓和容量的作用</p>
<p>纤维网：具有支撑皮肤连接，保持皮肤紧致的作用</p>
<h3 id="皮下脂肪存在着"><a href="#皮下脂肪存在着" class="headerlink" title="皮下脂肪存在着"></a>皮下脂肪存在着</h3><p>SMAS筋膜层，这也是保持皮肤紧致的重要层次</p>
<h2 id="皮肤附属器"><a href="#皮肤附属器" class="headerlink" title="皮肤附属器"></a>皮肤附属器</h2><h3 id="汗腺作用"><a href="#汗腺作用" class="headerlink" title="汗腺作用"></a>汗腺作用</h3><p>1、分泌汗液</p>
<p>2、排泄废物</p>
<p>3、调节体温</p>
<h3 id="毛发分为几个周期？"><a href="#毛发分为几个周期？" class="headerlink" title="毛发分为几个周期？"></a>毛发分为几个周期？</h3><p>生长期、退行期、休止期</p>
<h3 id="皮肤分型"><a href="#皮肤分型" class="headerlink" title="皮肤分型"></a>皮肤分型</h3><p>根据角质层含水量和油脂分泌把皮肤分为五种类型</p>
<h4 id="中性皮肤"><a href="#中性皮肤" class="headerlink" title="中性皮肤"></a>中性皮肤</h4><p>标准健康皮肤</p>
<h4 id="油性皮肤"><a href="#油性皮肤" class="headerlink" title="油性皮肤"></a>油性皮肤</h4><p>皮脂分泌旺盛</p>
<h3 id="皮肤敏感和过敏的区别"><a href="#皮肤敏感和过敏的区别" class="headerlink" title="皮肤敏感和过敏的区别"></a>皮肤敏感和过敏的区别</h3><p>敏感：一种皮肤状态</p>
<p>过敏：一种病症</p>
<hr>
<h1 id="三大皮肤问题"><a href="#三大皮肤问题" class="headerlink" title="三大皮肤问题"></a>三大皮肤问题</h1><p>损容性皮肤、亚健康皮肤、皮肤年轻化</p>
<h2 id="色素-色斑"><a href="#色素-色斑" class="headerlink" title="色素-色斑"></a>色素-色斑</h2><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>紫外线照射、遗传因素、作息紊乱、内分泌不稳定</p>
<h3 id="主要发生在皮肤的："><a href="#主要发生在皮肤的：" class="headerlink" title="主要发生在皮肤的："></a>主要发生在皮肤的：</h3><p>表皮和真皮</p>
<h3 id="晒斑"><a href="#晒斑" class="headerlink" title="晒斑"></a>晒斑</h3><p>浅黄色，分布于颧骨、鼻梁、两颊</p>
<h3 id="雀斑"><a href="#雀斑" class="headerlink" title="雀斑"></a>雀斑</h3><p>黄褐色，分布于前额、颧骨、鼻梁、两颊</p>
<h3 id="黄褐斑"><a href="#黄褐斑" class="headerlink" title="黄褐斑"></a>黄褐斑</h3><p>黄褐色，对称分布如蝴蝶状</p>
<h3 id="褐青色斑"><a href="#褐青色斑" class="headerlink" title="褐青色斑"></a>褐青色斑</h3><p>褐青色，分布于颧部</p>
<h3 id="治疗方式"><a href="#治疗方式" class="headerlink" title="治疗方式"></a>治疗方式</h3><p>激光：超皮秒、调Q激光、光子嫩肤</p>
<p>注射：搭配中胚层治疗方式</p>
<h2 id="痤疮"><a href="#痤疮" class="headerlink" title="痤疮"></a>痤疮</h2><h3 id="轻度治疗"><a href="#轻度治疗" class="headerlink" title="轻度治疗"></a>轻度治疗</h3><p>超微小气泡、果酸、针清</p>
<h3 id="中度治疗"><a href="#中度治疗" class="headerlink" title="中度治疗"></a>中度治疗</h3><p>光子嫩肤、红蓝光、消炎针</p>
<h3 id="重度治疗"><a href="#重度治疗" class="headerlink" title="重度治疗"></a>重度治疗</h3><p>消炎针，涂抹、口服药物</p>
<h3 id="痤疮-痘坑"><a href="#痤疮-痘坑" class="headerlink" title="痤疮-痘坑"></a>痤疮-痘坑</h3><h4 id="轻度："><a href="#轻度：" class="headerlink" title="轻度："></a>轻度：</h4><p>皮肤微针，非剥脱点阵激光</p>
<h4 id="中重度"><a href="#中重度" class="headerlink" title="中重度"></a>中重度</h4><p>黄金微针、剥脱性点阵激光</p>
<h3 id="亚健康皮肤状态分为"><a href="#亚健康皮肤状态分为" class="headerlink" title="亚健康皮肤状态分为"></a>亚健康皮肤状态分为</h3><p>皮肤干燥、皮肤敏感、肤色不均、黑眼圈</p>
<h3 id="皮肤粗糙（毛孔粗大）产生原因："><a href="#皮肤粗糙（毛孔粗大）产生原因：" class="headerlink" title="皮肤粗糙（毛孔粗大）产生原因："></a>皮肤粗糙（毛孔粗大）产生原因：</h3><p>1、皮脂过度分泌油脂</p>
<p>2、皮肤老化失去弹性（衰老型毛孔粗大）</p>
<p>3、皮肤干燥</p>
<h3 id="干性毛孔粗大治疗"><a href="#干性毛孔粗大治疗" class="headerlink" title="干性毛孔粗大治疗"></a>干性毛孔粗大治疗</h3><p>补水类导入、水光针、微针、光子嫩肤</p>
<h3 id="油性毛孔粗大治疗"><a href="#油性毛孔粗大治疗" class="headerlink" title="油性毛孔粗大治疗"></a>油性毛孔粗大治疗</h3><p>果酸、点阵激光</p>
<h3 id="衰老型毛孔粗大治疗"><a href="#衰老型毛孔粗大治疗" class="headerlink" title="衰老型毛孔粗大治疗"></a>衰老型毛孔粗大治疗</h3><p>黄金微针、超声刀、热玛吉</p>
<h3 id="皮肤敏感"><a href="#皮肤敏感" class="headerlink" title="皮肤敏感"></a>皮肤敏感</h3><p>一种皮肤状态、并非疾病</p>
<h4 id="急性期治疗"><a href="#急性期治疗" class="headerlink" title="急性期治疗"></a>急性期治疗</h4><p>舒敏之星、红蓝光</p>
<h4 id="稳定期治疗"><a href="#稳定期治疗" class="headerlink" title="稳定期治疗"></a>稳定期治疗</h4><p>舒敏之星、光子嫩肤</p>
<h3 id="肤色不均"><a href="#肤色不均" class="headerlink" title="肤色不均"></a>肤色不均</h3><p>黑色、红色、黄色的混合颜色</p>
<h5 id="产生原因-1"><a href="#产生原因-1" class="headerlink" title="产生原因"></a>产生原因</h5><p>紫外线照射、遗传因素、作息紊乱、内分泌不稳定</p>
<h3 id="黑眼圈分为四种类型"><a href="#黑眼圈分为四种类型" class="headerlink" title="黑眼圈分为四种类型"></a>黑眼圈分为四种类型</h3><p>色素型、血管型、结构型、混合型</p>
<h4 id="色素型"><a href="#色素型" class="headerlink" title="色素型"></a>色素型</h4><p>灰棕色，劳累时加重</p>
<h4 id="血管型"><a href="#血管型" class="headerlink" title="血管型"></a>血管型</h4><p>呈蓝色、粉色、紫色的外观，可见部分血管</p>
<h4 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h4><p>皮肤表面凸起或凹凸不平，光照阴影加重呈现黑眼圈</p>
<h3 id="皮肤年轻化"><a href="#皮肤年轻化" class="headerlink" title="皮肤年轻化"></a>皮肤年轻化</h3><h4 id="粗糙干燥治疗："><a href="#粗糙干燥治疗：" class="headerlink" title="粗糙干燥治疗："></a>粗糙干燥治疗：</h4><p>水光针、果酸</p>
<h4 id="凹陷、皱纹治疗："><a href="#凹陷、皱纹治疗：" class="headerlink" title="凹陷、皱纹治疗："></a>凹陷、皱纹治疗：</h4><p>注射胶原、透明质酸，肉毒素</p>
<h4 id="松弛下垂治疗："><a href="#松弛下垂治疗：" class="headerlink" title="松弛下垂治疗："></a>松弛下垂治疗：</h4><p>热玛吉、Fotona4D、黄金热拉提，线雕、拉皮手术</p>
<hr>
<h1 id="中胚层"><a href="#中胚层" class="headerlink" title="中胚层"></a>中胚层</h1><h3 id="水光针"><a href="#水光针" class="headerlink" title="水光针"></a>水光针</h3><p>优势：直接将药物注射到需要的皮肤层次，精准、快速</p>
<p>劣势：破皮有创，需要恢复期</p>
<h3 id="无针水光"><a href="#无针水光" class="headerlink" title="无针水光"></a>无针水光</h3><p>一种无创类喷射方式</p>
<p>优势：不破皮，无恢复期，舒适度强</p>
<p>劣势：无法到达真皮层深层，效果维持时间短（3-7天）</p>
<h3 id="微针技术"><a href="#微针技术" class="headerlink" title="微针技术"></a>微针技术</h3><p>伴有药液或有效成分同导入，刺激皮肤，激活胶原蛋白再生</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>1、打开皮肤通道，使药品进入皮肤深层</p>
<p>2、通过针刺损伤，刺激自身胶原蛋白的修复新生</p>
<h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>补充皮肤营养的同时有效改善肤质问题（毛孔痘坑）</p>
<h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><p>有创，皮肤反应重，恢复期稍长</p>
<h3 id="基础水光"><a href="#基础水光" class="headerlink" title="基础水光"></a>基础水光</h3><p>补水、锁水</p>
<h3 id="长效水光"><a href="#长效水光" class="headerlink" title="长效水光"></a>长效水光</h3><p>延长效果的维持时间和轻微填充的作用</p>
<h3 id="复合水光"><a href="#复合水光" class="headerlink" title="复合水光"></a>复合水光</h3><p>营养皮肤</p>
<h3 id="治疗后"><a href="#治疗后" class="headerlink" title="治疗后"></a>治疗后</h3><p>红肿、反干、反黑</p>
<hr>
<h1 id="医美基础-注射"><a href="#医美基础-注射" class="headerlink" title="医美基础-注射"></a>医美基础-注射</h1><h3 id="轻医美中的注射项目，常指？"><a href="#轻医美中的注射项目，常指？" class="headerlink" title="轻医美中的注射项目，常指？"></a>轻医美中的注射项目，常指？</h3><p>填充剂注射和肉毒素注射</p>
<h3 id="肉毒素成分"><a href="#肉毒素成分" class="headerlink" title="肉毒素成分"></a>肉毒素成分</h3><p>特殊的蛋白质</p>
<h3 id="肉毒素原理"><a href="#肉毒素原理" class="headerlink" title="肉毒素原理"></a>肉毒素原理</h3><p>麻痹肌肉、使肌肉放松、运动能力下降</p>
<p>去除动态皱纹，瘦脸（咬肌）、瘦肩（斜方肌）、瘦腿（腓肠肌）</p>
<h4 id="作用是："><a href="#作用是：" class="headerlink" title="作用是："></a>作用是：</h4><p>暂时的、可逆的</p>
<h4 id="安全用量"><a href="#安全用量" class="headerlink" title="安全用量"></a>安全用量</h4><p>不超过500个单位</p>
<h3 id="肉毒素的作用"><a href="#肉毒素的作用" class="headerlink" title="肉毒素的作用"></a>肉毒素的作用</h3><p>1、除皱</p>
<p>2、轮廓美容</p>
<p>3、提升紧致</p>
<h5 id="维持时间"><a href="#维持时间" class="headerlink" title="维持时间"></a>维持时间</h5><p>4-6个月</p>
<h5 id="见效时间"><a href="#见效时间" class="headerlink" title="见效时间"></a>见效时间</h5><p>2-7天 1-2个月后效果更佳</p>
<h3 id="肉毒素品牌"><a href="#肉毒素品牌" class="headerlink" title="肉毒素品牌"></a>肉毒素品牌</h3><p>进口：保妥适、吉适、乐提葆</p>
<p>国产：衡力</p>
<h3 id="皮肤填充剂"><a href="#皮肤填充剂" class="headerlink" title="皮肤填充剂"></a>皮肤填充剂</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><h4 id="主要应用于："><a href="#主要应用于：" class="headerlink" title="主要应用于："></a>主要应用于：</h4><p>填补面部凹陷和静态皱纹、还可以用于美化面部五官、调整面部和身体轮廓</p>
<h4 id="除了增加体积外："><a href="#除了增加体积外：" class="headerlink" title="除了增加体积外："></a>除了增加体积外：</h4><p>通过刺激自身产生的胶原蛋白生长而增加局部容积</p>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><h3 id="一、破尿酸"><a href="#一、破尿酸" class="headerlink" title="一、破尿酸"></a>一、破尿酸</h3><p>又名透明质酸：经过交联的透明质酸可以作为填充剂注射</p>
<h4 id="起到什么作用："><a href="#起到什么作用：" class="headerlink" title="起到什么作用："></a>起到什么作用：</h4><p>支撑填充的作用</p>
<h4 id="维持时间分为三种："><a href="#维持时间分为三种：" class="headerlink" title="维持时间分为三种："></a>维持时间分为三种：</h4><p>短效、中长效、长效</p>
<h4 id="破尿酸常见品牌"><a href="#破尿酸常见品牌" class="headerlink" title="破尿酸常见品牌"></a>破尿酸常见品牌</h4><p>进口：乔雅登、艾莉薇、瑞蓝、伊婉</p>
<p>国产：润百颜、海薇、爱芙莱</p>
<h3 id="二、胶原蛋白"><a href="#二、胶原蛋白" class="headerlink" title="二、胶原蛋白"></a>二、胶原蛋白</h3><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><p>1、去除黑眼圈，美白润肤、改善肤质</p>
<p>2、减少深皱纹、平复细纹、改善松弛</p>
<p>3、填补泪沟、太阳穴、苹果肌、下巴、鼻子、法令纹、唇部、私密处</p>
<h3 id="三、聚合物填充剂（童颜针、少女针）"><a href="#三、聚合物填充剂（童颜针、少女针）" class="headerlink" title="三、聚合物填充剂（童颜针、少女针）"></a>三、聚合物填充剂（童颜针、少女针）</h3><h4 id="也称为？"><a href="#也称为？" class="headerlink" title="也称为？"></a>也称为？</h4><p>再生类填充剂</p>
<h4 id="主要成分"><a href="#主要成分" class="headerlink" title="主要成分"></a>主要成分</h4><p>缓慢降解的各类微球</p>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>聚合物填充物通过刺激胶原蛋白再生而达到长期填充的效果</p>
<h4 id="维持时间-1"><a href="#维持时间-1" class="headerlink" title="维持时间"></a>维持时间</h4><p>长达2-3年</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>1、填充塑性</p>
<p>2、减少皱纹</p>
<p>3、改善肤质</p>
<hr>
<h1 id="医美基础-光电"><a href="#医美基础-光电" class="headerlink" title="医美基础-光电"></a>医美基础-光电</h1><h3 id="超声"><a href="#超声" class="headerlink" title="超声"></a>超声</h3><p>一种高能量的聚集超声，是目前抗衰仪器中对皮肤穿透深度最深的能量</p>
<h4 id="仪器品牌"><a href="#仪器品牌" class="headerlink" title="仪器品牌"></a>仪器品牌</h4><p>半岛公司的超声炮仪器（中国）</p>
<h3 id="激光"><a href="#激光" class="headerlink" title="激光"></a>激光</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>选择性光热作用</p>
<h4 id="作用部位"><a href="#作用部位" class="headerlink" title="作用部位"></a>作用部位</h4><p>光热作用于黑色素，能达到去斑 ；</p>
<p>作用于毛细血管，就能达到去红血丝的作用</p>
<p>通过特定波长的光，刺激真皮层胶原的再生，达到嫩肤的作用。 </p>
<h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>①去色素</p>
<p>②去血管</p>
<p>③去疤痕</p>
<p>④改善肤质</p>
<p>⑤去毛发</p>
<h3 id="常见激光仪器"><a href="#常见激光仪器" class="headerlink" title="常见激光仪器"></a>常见激光仪器</h3><h4 id="皮秒和超皮秒激光"><a href="#皮秒和超皮秒激光" class="headerlink" title="皮秒和超皮秒激光"></a>皮秒和超皮秒激光</h4><p>技术最先进，可覆盖皮肤全层色素问题，治疗舒适更高的激光仪器</p>
<h4 id="点阵激光"><a href="#点阵激光" class="headerlink" title="点阵激光"></a>点阵激光</h4><p>促使新的胶原蛋白合成、胶原重塑、表皮更新</p>
<p>分为剥脱型点阵激光和非剥脱型点阵激光 </p>
<h4 id="剥脱型点阵激光："><a href="#剥脱型点阵激光：" class="headerlink" title="剥脱型点阵激光："></a>剥脱型点阵激光：</h4><p>治疗后结痂，适用于严重痘坑、疤痕 </p>
<h4 id="非剥脱型点阵激光："><a href="#非剥脱型点阵激光：" class="headerlink" title="非剥脱型点阵激光："></a>非剥脱型点阵激光：</h4><p>治疗后无结痂，适用于毛孔粗大、细纹、浅表、瘢痕</p>
<h3 id="强脉冲光"><a href="#强脉冲光" class="headerlink" title="强脉冲光"></a>强脉冲光</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>又称光子</p>
<h4 id="常见仪器"><a href="#常见仪器" class="headerlink" title="常见仪器"></a>常见仪器</h4><p>美国科医人M22 （新一代金版超光子）</p>
<h3 id="射频"><a href="#射频" class="headerlink" title="射频"></a>射频</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>主要通过热效应发挥作用 </p>
<h4 id="单级射频"><a href="#单级射频" class="headerlink" title="单级射频"></a>单级射频</h4><p>穿透深度最深，热玛吉就是单极射频 </p>
<h3 id="热拉提和热玛吉有什么区别"><a href="#热拉提和热玛吉有什么区别" class="headerlink" title="热拉提和热玛吉有什么区别"></a>热拉提和热玛吉有什么区别</h3><p>相同点都属于射频 </p>
]]></content>
      <categories>
        <category>医美</category>
      </categories>
      <tags>
        <tag>医美</tag>
      </tags>
  </entry>
  <entry>
    <title>野三坡</title>
    <url>/2023/03/25/%E9%87%8E%E4%B8%89%E5%9D%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="野三坡"><a href="#野三坡" class="headerlink" title="野三坡"></a>野三坡</h2><p><a href="https://postimg.cc/Mv9tnMVS"><img src="https://i.postimg.cc/FH46n0K7/Wechat-IMG158.jpg" alt="Wechat-IMG158.jpg"></a><br><a href="https://postimg.cc/dkJTRncS"><img src="https://i.postimg.cc/qR3XTZb0/Wechat-IMG159.jpg" alt="Wechat-IMG159.jpg"></a><br><a href="https://postimg.cc/7GcwPY9M"><img src="https://i.postimg.cc/J07nqsBg/Wechat-IMG160.jpg" alt="Wechat-IMG160.jpg"></a><br><a href="https://postimg.cc/grZPqp4Q"><img src="https://i.postimg.cc/v8PHyHnY/Wechat-IMG161.jpg" alt="Wechat-IMG161.jpg"></a><br><a href="https://postimg.cc/7ftcpQB0"><img src="https://i.postimg.cc/Z5JSvGp7/Wechat-IMG162.jpg" alt="Wechat-IMG162.jpg"></a><br><a href="https://postimg.cc/YvmXT2LB"><img src="https://i.postimg.cc/jSMGwLs2/Wechat-IMG163.jpg" alt="Wechat-IMG163.jpg"></a></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>野三坡</tag>
      </tags>
  </entry>
  <entry>
    <title>operator模块</title>
    <url>/2021/04/20/%E9%B2%9C%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84%E6%A8%A1%E5%9D%97%E4%B9%8Boperator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>operator模块输出一系列对应Python内部操作符的函数。例如：operator.add(x, y)等价于表达式x+y。许多函数的名称都被一些特定的方法使用，没有下划线加持。为了向下兼容，它们中的许多都保留着由双下划线的变体。那些不具备双下划线的变体是为了使表达更清晰。</p>
<p>这些函数在各种函数目录里扮演者对相比较、逻辑操作、数学运算以及序列操作等角色。</p>
<p>对于所有对象来讲对象比较函数是十分有用的，并且这些函数以它们支持的丰富的比较操作命名。</p>
<span id="more"></span>
<p>最近遇到一个像这样的问题，搜索框以下拉框的形式展开，下拉框里包含着三级菜单，无论点哪级菜单，都会筛选出这级菜单下的数据来，是这样，前端保存的时候传的是一个数组。对于菜单其实是建了一个字段来存菜单id,现在查询，前端传一个菜单id,就可以查到，因为我们有一张单独的表来维护菜单，所以每级菜单的索引都是不同的，最重要的问题怎么用一个数组和另一个数字比较，用递归，也可以。我是这样做的，把前端传过来的id放到一个列表里，然后用高阶函数reduc配合operator来实现，让两个列表内的元素依次做比较,最终筛选出比较之后的数据。起初我是没有思路的，因为我是真的忘了，python还有这么一个模块，不得不说，实在是奇特。</p>
<p>代码示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> user_source:</span><br><span class="line">            new_list.append(user_source)</span><br><span class="line">            get_data = get_data.<span class="built_in">filter</span>(reduce(operator.and_,(Q(user_source__contains=x) <span class="keyword">for</span> x <span class="keyword">in</span> new_list)))</span><br></pre></td></tr></table></figure>

<p>以下是关于operator的用法，先码后看，我怕以后想看又找不到了。</p>
<p>operator. <strong>lt(a, b)</strong>          &#x2F;&#x2F;less than小于</p>
<p>operator. <strong>le(a, b)</strong>          &#x2F;&#x2F;lessthan or equal to小于等于</p>
<p>operator. <strong>eq(a, b)</strong>          &#x2F;&#x2F;equal to等于</p>
<p>operator. <strong>ne(a, b)</strong>          &#x2F;&#x2F;not equalto不等于</p>
<p>operator. <strong>ge(a, b)</strong>          &#x2F;&#x2F;greaterand equal to大于等于</p>
<p>operator. <strong>gt(a, b)</strong>          &#x2F;&#x2F;greater大于</p>
<p>operator. <strong><strong>le</strong>(a, b)</strong></p>
<p>operator. <strong><strong>lt</strong>(a, b)</strong></p>
<p>operator. <strong><strong>eq</strong>(a, b)</strong></p>
<p>operator. <strong><strong>ne</strong>(a, b)</strong></p>
<p>operator. <strong><strong>ge</strong>(a, b)</strong></p>
<p>operator. <strong><strong>gt</strong>(a, b)</strong></p>
<p>在a与b之间之行丰富的比较操作。特别地，lt(a, b)等价于a &lt; b、le(a, b)等价于a &lt;&#x3D; b、eq(a, b)等价于a &#x3D;&#x3D; b、ne(a, b)等价于a !&#x3D; b、gt(a, b)等价于a &gt; b、ge(a, b)等价于a &gt;&#x3D; b。注意：这些函数可以返回任何值，这个值可能当做布尔值用、也有可能不行。</p>
<p><strong>逻辑操作一般也适用于所有对象，并且支持真值比较、定义测试和布尔操作。</strong></p>
<p>operator. <strong>not_(obj)</strong></p>
<p>operator. <strong><strong>not</strong>(obj)</strong></p>
<p>返回非obj的结果。（注意：对于对象实例不存在__not__()方法；只有解释器代码定义了这个操作。它的结果受__bool__()和__len__()方法影响）。</p>
<p>operator. <strong>truth(obj)</strong></p>
<p>如果obj是真的，就返回True，否则返回False。等价于使用布尔构造器。</p>
<p>operator. <strong>is_(a, b)</strong></p>
<p>返回表达式a is b，用于测试对象的定义。</p>
<p>operator. <strong>is_not(a, b)</strong></p>
<p>返回表达式a is not b，用于测试对象定义。</p>
<p>​    <strong>数学运算和按位运算是最多的：</strong></p>
<p>operator. <strong>abs(obj)</strong></p>
<p>operator. <strong><strong>abs</strong>(obj)</strong></p>
<p>返回obj的绝对值。</p>
<p>operator**. add(a, b)**</p>
<p>operator. <strong><strong>add</strong>(a, b)</strong></p>
<p>返回a+b，a与b应为数字。</p>
<p>operator. <strong>and(a, b)</strong></p>
<p>operator. <strong><strong>and</strong>(a, b)</strong></p>
<p>返回a与b的按位与操作结果。</p>
<p>operator. <strong>floordiv(a, b)</strong></p>
<p>operator. <strong>__floordiv(a, b)</strong></p>
<p>返回a&#x2F;&#x2F;b。（a&#x2F;b向下取整）</p>
<p>operator. <strong>index(a)</strong></p>
<p>operator. <strong><strong>index</strong>(a)</strong></p>
<p>将a转换为整数数据并返回。等价于a. <strong>index</strong>()</p>
<p>operator. <strong>inv(obj)</strong></p>
<p>operator. <strong>invert(obj)</strong></p>
<p>operator. <strong><strong>inv</strong>(obj)</strong></p>
<p>operator. <strong><strong>invert</strong>(obj)</strong></p>
<p>对数字obj按位求反，并返回。等价于~obj。</p>
<p>operator. <strong>lshift(a, b)</strong></p>
<p>operator. <strong><strong>lshift</strong>(a, b)</strong></p>
<p>将a左移b位后返回。</p>
<p>operator. <strong>mod(a, b)</strong></p>
<p>operator. <strong><strong>mod</strong>(a, b)</strong></p>
<p>返回a%b。</p>
<p>operator. <strong>mul(a, b)</strong></p>
<p>operator. <strong><strong>mul</strong>(a, b)</strong></p>
<p>返回a*b，a与b都为数字。</p>
<p>operator. <strong>matmul(a, b)</strong></p>
<p>operator. <strong><strong>matmul</strong>(a, b)</strong></p>
<p>返回a@b。</p>
<p>operator. <strong>nge(obj)</strong></p>
<p>operator. <strong><strong>neg</strong>(obj)</strong></p>
<p>返回obj的负值（-obj）。</p>
<p>operator. <strong>or(a, b)</strong></p>
<p>operator. <strong><strong>or</strong>(a, b)</strong></p>
<p>a与b按位求或，并返回结果值。</p>
<p>operator. <strong>pos(obj)</strong></p>
<p>operator. <strong><strong>pow</strong>(obj)</strong></p>
<p>返回obj的正值（+obj）。</p>
<p>operator. <strong>pow(a, b)</strong></p>
<p>operator. <strong><strong>pow</strong>(a, b)</strong></p>
<p>返回a ** b，a与b都为数字。</p>
<p>operator. <strong>rshift(a, b)</strong></p>
<p>operator. <strong><strong>rshift</strong>(a, b)</strong></p>
<p>a右移b位，并返回结果值。</p>
<p>operator. <strong>sub(a, b)</strong></p>
<p>operator. <strong><strong>sub</strong>(a, b)</strong></p>
<p>返回a – b。</p>
<p>operator. <strong>truediv(a, b)</strong></p>
<p>operator. <strong><strong>truediv</strong>(a, b)</strong></p>
<p>返回a &#x2F; b，并且类似于2&#x2F;3是0.66而不是0。它也被称为真除法。</p>
<p>operator. <strong>xor(a, b)</strong></p>
<p>operator. <strong><strong>xor</strong>(a, b)</strong></p>
<p>a与b按位异或，并返回结果。</p>
<p>​    <strong>和序列有关的操作（其中的一些也可用于映射），包括：</strong></p>
<p>operator. <strong>concat(a, b)</strong></p>
<p>operator. <strong><strong>concat</strong>(a, b)</strong></p>
<p>返回a + b，a与b都为序列。</p>
<p>operator. <strong>contains(a, b)</strong></p>
<p>operator. <strong><strong>contains</strong>(a, b)</strong></p>
<p>返回测试b in a的结果。请注意反转操作数。</p>
<p>operator. <strong>countof(a, b)</strong></p>
<p>返回b在a中出现的次数。</p>
<p>operator. <strong>delitem(a, b)</strong></p>
<p>operator. <strong><strong>delitem</strong>(a, b)</strong></p>
<p>删除a索引b的值。</p>
<p>operator. <strong>getitem(a, b)</strong></p>
<p>operator. <strong><strong>getitem</strong>(a, b)</strong></p>
<p>返回a索引b的值。</p>
<p>operator. <strong>indexof(a, b)</strong></p>
<p>返回b在a中第一次出现时的索引。</p>
<p>operator. <strong>setitem(a, b, c)</strong></p>
<p>operator. <strong><strong>setitem</strong>(a, b, c)</strong></p>
<p>a中索引b的位置上的值设置为c。</p>
<p>operator. <strong>length_hint(obj, default&#x3D;0)</strong></p>
<p>返回对象obj的估算长度。首先试图返回真实的长度，不行的话使用obj.<strong>length_hint</strong>()估算长度，再不行的话返回默认值规定的长度。</p>
<p><strong>operator模块也定义了一些广义属性和项目查找的工具。它们常用于为诸如map()、sorted()、itertools. groupby()或其他需要函数作为参数的函数提供参数，该参数为一个高速的字段提取器。</strong></p>
<p>operator. attrgetter(attr)</p>
<p>operator. attrgetter(*attrs)</p>
<p>返回一个可点用对象，该对象能从其操作中捕获attr。如果提供了多个属性，返回一个属性构成的元组。属性名也可以包含符号点。例如：</p>
<p>•••运行 f &#x3D; attrgetter(‘name’)之后，调用f(b)，返回b.name。</p>
<p>•运行 f &#x3D; attregetter(‘name’,’date’)之后，调用f(b)，返回(b. name, b,date)。</p>
<p>•运行f &#x3D;attregetter(‘name.first’, ‘name. last’)之后，调用f(b)，返回(b. name. first, b. name. last)。</p>
<p>等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">defattrgetter(*items):</span><br><span class="line"></span><br><span class="line">    ifany(notisinstance(item, <span class="built_in">str</span>) <span class="keyword">for</span> item <span class="keyword">in</span> items):</span><br><span class="line"></span><br><span class="line">        raiseTypeError(<span class="string">&#x27;attribute namemust be a string&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    iflen(items) ==<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">        attr = items[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        defg(obj):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> resolve_attr(obj, attr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        defg(obj):</span><br><span class="line"></span><br><span class="line">            returntuple(resolve_attr(obj, attr) <span class="keyword">for</span> attr <span class="keyword">in</span> items)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">defresolve_attr(obj, attr):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> attr.split(<span class="string">&quot;.&quot;</span>):</span><br><span class="line"></span><br><span class="line">        obj =<span class="built_in">getattr</span>(obj, name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>operator. <strong>itemgetter(item)</strong></p>
<p>operator. <strong>itemgetter(*items)</strong></p>
<p>返回一个可调用对象，该对象可以使用操作__getitem__()方法从自身的操作中捕获item。如果制定了多个items，返回一个由查询值组成的元组。例如：</p>
<p>•运行f &#x3D;itemgetter(2)，然后调用f(r)，返回r[2]。</p>
<p>•运行g &#x3D;itemgetter(2, 5, 3)，然后调用g(r)，返回(r[2], r[5], r[3])。</p>
<p>等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span>  <span class="title function_">itemgetter</span>(<span class="params">*items</span>):</span><br><span class="line"></span><br><span class="line">    iflen(items) ==<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">        item = items[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        defg(obj):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> obj[item]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        defg(obj):</span><br><span class="line"></span><br><span class="line">            returntuple(obj[item] <span class="keyword">for</span> item <span class="keyword">in</span> items)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>Items可以是任何类型，只要该类型可以接受__getitem__()方法的操作。字典结合搜任何可哈希的值。列表、元组和字符串接受索引或者片段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;itemgetter(<span class="number">1</span>)(<span class="string">&#x27;ABCDEFG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;B&#x27;</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;itemgetter(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>)(<span class="string">&#x27;ABCDEFG&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;itemgetter(<span class="built_in">slice</span>(<span class="number">2</span>,<span class="literal">None</span>))(<span class="string">&#x27;ABCDEFG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;CDEFG&#x27;</span></span><br><span class="line"></span><br><span class="line">例如使用itemgetter()从元组记录中取回特定的字段：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;inventory = [(<span class="string">&#x27;apple&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;banana&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;pear&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;orange&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;getcount = itemgetter(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">map</span>(getcount, inventory))</span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sorted</span>(inventory, key=getcount)</span><br><span class="line"></span><br><span class="line">[(<span class="string">&#x27;orange&#x27;</span>,<span class="number">1</span>), (<span class="string">&#x27;banana&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;apple&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;pear&#x27;</span>, <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>operator. <strong>methodcaller(name[, args…])</strong></p>
<p>返回一个可调用的对象，该对象可以在其操作内调用名为name的方法。如果额外的参数或者关键字参数被给出，它们也会被传递给方法。例如：</p>
<p>•运行 f &#x3D; methodcaller(‘name’)，调用f(b)，返回b. name()。</p>
<p>•运行 f &#x3D; methodcaller(‘name’, ‘foo’, bar&#x3D;1)，调用f(b)，返回b. name(‘foo’, bar&#x3D;1)。</p>
<p>等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">defmethodcaller(name, *args, **kwargs):</span><br><span class="line"></span><br><span class="line">    defcaller(obj):</span><br><span class="line"></span><br><span class="line">        returngetattr(obj, name)(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> caller</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<p><strong>1. 函数的映射操作</strong></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>语法</th>
<th>函数</th>
</tr>
</thead>
<tbody><tr>
<td>加法</td>
<td>a + b</td>
<td>add(a, b)</td>
</tr>
<tr>
<td>连接</td>
<td>seq1 + seq2</td>
<td>concat(seq1, seq2)</td>
</tr>
<tr>
<td>包含测试</td>
<td>obj in seq</td>
<td>contains(seq, obj)</td>
</tr>
<tr>
<td>除法</td>
<td>a &#x2F; b</td>
<td>truediv(a, b)</td>
</tr>
<tr>
<td>除法</td>
<td>a &#x2F;&#x2F; b</td>
<td>floordiv(a, b)</td>
</tr>
<tr>
<td>按位与</td>
<td>a &amp; b</td>
<td>and_(a, b)</td>
</tr>
<tr>
<td>按位异或</td>
<td>a ^ b</td>
<td>xor(a, b)</td>
</tr>
<tr>
<td>按位求反</td>
<td>~ a</td>
<td>invert(a)</td>
</tr>
<tr>
<td>按位求或</td>
<td>a | b</td>
<td>or_(a, b)</td>
</tr>
<tr>
<td>求幂</td>
<td>a ** b</td>
<td>pow(a, b)</td>
</tr>
<tr>
<td>身份测试</td>
<td>a is b</td>
<td>is_(a, b)</td>
</tr>
<tr>
<td>身份测试</td>
<td>a is not b</td>
<td>is_not(a, b)</td>
</tr>
<tr>
<td>索引分配</td>
<td>obj[k] &#x3D; v</td>
<td>setitem(obj, k, v)</td>
</tr>
<tr>
<td>索引删除</td>
<td>del obj[k]</td>
<td>delitem(obj, k)</td>
</tr>
<tr>
<td>得出索引键值</td>
<td>obj[k]</td>
<td>getitem(obj, k)</td>
</tr>
<tr>
<td>左移</td>
<td>a &lt;&lt; b</td>
<td>lshift(a, b)</td>
</tr>
<tr>
<td>求模</td>
<td>a % b</td>
<td>mod(a, b)</td>
</tr>
<tr>
<td>乘法</td>
<td>a * b</td>
<td>mul(a, b)</td>
</tr>
<tr>
<td>矩阵乘法</td>
<td>a @ b</td>
<td>matmul(a, b)</td>
</tr>
<tr>
<td>求负值（数学）</td>
<td>- a</td>
<td>neg(a)</td>
</tr>
<tr>
<td>求负值（逻辑）</td>
<td>not a</td>
<td>not_(a)</td>
</tr>
<tr>
<td>求正值</td>
<td>+ a</td>
<td>pos(a)</td>
</tr>
<tr>
<td>右移</td>
<td>a &gt;&gt; b</td>
<td>rshift(a, b)</td>
</tr>
<tr>
<td>片段分配</td>
<td>seq[i: j] &#x3D; values</td>
<td>setitem(seq, slice(I, j), values)</td>
</tr>
<tr>
<td>片段删除</td>
<td>del seq[i, j]</td>
<td>delitem(seq, slice(I, j))</td>
</tr>
<tr>
<td>得到片段</td>
<td>swq[i : j]</td>
<td>getitme(seq, slice(i, j))</td>
</tr>
<tr>
<td>字符串格式化</td>
<td>s % obj</td>
<td>mod(s, obj)</td>
</tr>
<tr>
<td>减法</td>
<td>a - b</td>
<td>sub(a, b)</td>
</tr>
<tr>
<td>真值测试</td>
<td>obj</td>
<td>truth(obj)</td>
</tr>
<tr>
<td>排序</td>
<td>a &lt; b</td>
<td>lt(a, b)</td>
</tr>
<tr>
<td>排序</td>
<td>a &lt;&#x3D; b</td>
<td>le(a, b)</td>
</tr>
<tr>
<td>相等</td>
<td>a &#x3D;&#x3D; b</td>
<td>eq(a, b)</td>
</tr>
<tr>
<td>不等</td>
<td>a !- b</td>
<td>ne(a, b)</td>
</tr>
<tr>
<td>排序</td>
<td>a &gt;&#x3D; b</td>
<td>ge(a, b)</td>
</tr>
<tr>
<td>排序</td>
<td>a &gt; b</td>
<td>ge(a, b)</td>
</tr>
</tbody></table>
<p><strong>2.原址操作</strong></p>
<p>许多操作都有其原地操作版本。以下列出的函数提供了比普通语法操作更原始的原址操作。例如：语句x +&#x3D; y等价于x &#x3D; operator. iadd(x, y)。其它方法提出说z &#x3D; operatgor.iadd(x, y)等价于复合语句 z&#x3D; x; z +&#x3D; y。</p>
<p>在其他例子中，注意，当一个原址操作被调用，计算和分配在讲个分割开来的步骤里进行。以下列出的原址函数值做了第一步，调用原址方法。第二步，分配却没有被操作。</p>
<p>对于不变的目标李如意字符串、数组和元组，被更新的值是需要计算的，但是不回配输入变量：</p>
<p>**&gt;&gt;&gt;**a &#x3D;’hello’</p>
<p>**&gt;&gt;&gt;**iadd(a, ‘ world’)</p>
<p>‘helloworld’</p>
<p>**&gt;&gt;&gt;**a</p>
<p>‘hello</p>
<p>对于可变对象例如列表和字典，预案之操作将会运行更新，因此不需要后续分配。</p>
<p>**&gt;&gt;&gt;**s &#x3D; [‘h’, ‘e’, ‘l’, ‘l’, ‘o’]</p>
<p>**&gt;&gt;&gt;**iadd(s, [‘ ‘, ‘w’, ‘o’, ‘r’, ‘l’, ‘d’])</p>
<p>[‘h’, ‘e’,’l’, ‘l’, ‘o’, ‘ ‘, ‘w’, ‘o’, ‘r’, ‘l’, ‘d’]</p>
<p>**&gt;&gt;&gt;**s</p>
<p>[‘h’, ‘e’,’l’, ‘l’, ‘o’, ‘ ‘, ‘w’, ‘o’, ‘r’, ‘l’, ‘d’]</p>
<p>operator. <strong>iadd(a, b)</strong></p>
<p>operator. <strong><strong>iadd</strong>(a, b)</strong></p>
<p>a &#x3D; iadd(a, b)等价于a +&#x3D; b。</p>
<p>operator. <strong>iand(a, b)</strong></p>
<p>operator. <strong><strong>iand</strong>(a, b)</strong></p>
<p>a &#x3D; land(a, b)等价于a &amp;&#x3D; b。</p>
<p>operator. <strong>iconcat(a, b)</strong></p>
<p>operator. <strong><strong>iconcat</strong>(a, b)</strong></p>
<p>a &#x3D; iconcat(a, b)等价于a +&#x3D; b，a与b都为序列。</p>
<p>operator. <strong>ifloordiv(a, b)</strong></p>
<p>operator. <strong><strong>ifloordiv</strong>(a, b)</strong></p>
<p>a &#x3D; ifloordiv(a, b)等价于 a &#x2F;&#x2F;&#x3D; b。</p>
<p>operator. <strong>ilshift(a, b)</strong></p>
<p>operator. <strong><strong>ilshift</strong>(a, b)</strong></p>
<p>a &#x3D; ilshift(a, b)等价于a &lt;&lt;&#x3D; b。</p>
<p>operator. <strong>imod(a, b)</strong></p>
<p>operator. <strong><strong>imod</strong>(a, b)</strong></p>
<p>a &#x3D; imud(a, b)等价于a %&#x3D; b。</p>
<p>operator. <strong>imul(a, b)</strong></p>
<p>operator. <strong>imul(a, b)</strong></p>
<p>a &#x3D; imul(a, b)等价于a *&#x3D; b。</p>
<p>operator. <strong>imatmul(a, b)</strong></p>
<p>operator. <strong><strong>imatmul</strong>(a, b)</strong></p>
<p>a &#x3D; imatmul(a, b)等价于a @&#x3D; b。</p>
<p>operator. <strong>ior(a, b)</strong></p>
<p>operator. <strong><strong>ior</strong>(a, b)</strong></p>
<p>a &#x3D; ior(a, b)等价于a |&#x3D; b。</p>
<p>operator. <strong>ipow(a, b)</strong></p>
<p>operator. <strong><strong>ipow</strong>(a, b)</strong></p>
<p>a &#x3D; ipow(a, b)等价于a ** b。</p>
<p>operator. <strong>irshift(a, b)</strong></p>
<p>operator. <strong><strong>irshift</strong>(a, b)</strong></p>
<p>a &#x3D; irshift(a, b)等价于a &gt;&gt; b。</p>
<p>operator. <strong>isub(a, b)</strong></p>
<p>operator. <strong><strong>sub</strong>(a, b)</strong></p>
<p>a &#x3D; isub(a, b)等价于a -&#x3D; b。</p>
<p>operator. <strong>itruediv(a, b)</strong></p>
<p>operator. <strong><strong>itruediv</strong>(a, b)</strong></p>
<p>a &#x3D; itruediv(a, b)等价于<strong>a &#x2F;&#x3D; b</strong>。</p>
<p>operator. <strong>ixor(a, b)</strong></p>
<p>operator. <strong><strong>ixor</strong>(a, b)</strong></p>
<p>​    a &#x3D; ixor(a, b)等价于a ^&#x3D; b。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
